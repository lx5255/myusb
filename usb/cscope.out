cscope 15 /work/liuxing/usb               0000495754
	@S3C2440.H

1 #i‚de‡
__S3C2440_H


2 
	#__S3C2440_H


	)

6 
	#BWSCON
 (*(vﬁ©ûê*Ë0x48000000)

	)

7 
	#BANKCON0
 (*(vﬁ©ûê*Ë0x48000004)

	)

8 
	#BANKCON1
 (*(vﬁ©ûê*Ë0x48000008)

	)

9 
	#BANKCON2
 (*(vﬁ©ûê*Ë0x4800000C)

	)

10 
	#BANKCON3
 (*(vﬁ©ûê*Ë0x48000010)

	)

11 
	#BANKCON4
 (*(vﬁ©ûê*Ë0x48000014)

	)

12 
	#BANKCON5
 (*(vﬁ©ûê*Ë0x48000018)

	)

13 
	#BANKCON6
 (*(vﬁ©ûê*Ë0x4800001C)

	)

14 
	#BANKCON7
 (*(vﬁ©ûê*Ë0x48000020)

	)

15 
	#REFRESH
 (*(vﬁ©ûê*Ë0x48000024)

	)

16 
	#BANKSIZE
 (*(vﬁ©ûê*Ë0x48000028)

	)

17 
	#MRSRB6
 (*(vﬁ©ûê*Ë0x4800002C)

	)

18 
	#MRSRB7
 (*(vﬁ©ûê*Ë0x48000030)

	)

21 
	#HcRevisi⁄
 (*(vﬁ©ûê*Ë0x49000000)

	)

22 
	#HcC⁄åﬁ
 (*(vﬁ©ûê*Ë0x49000004)

	)

23 
	#HcComm⁄Sètus
 (*(vﬁ©ûê*Ë0x49000008)

	)

24 
	#HcI¡îru±Sètus
 (*(vﬁ©ûê*Ë0x4900000C)

	)

25 
	#HcI¡îru±E«bÀ
 (*(vﬁ©ûê*Ë0x49000010)

	)

26 
	#HcI¡îru±DißbÀ
 (*(vﬁ©ûê*Ë0x49000014)

	)

27 
	#HcHCCA
 (*(vﬁ©ûê*Ë0x49000018)

	)

28 
	#HcPîiodCuâítED
 (*(vﬁ©ûê*Ë0x4900001C)

	)

29 
	#HcC⁄åﬁHódED
 (*(vﬁ©ûê*Ë0x49000020)

	)

30 
	#HcC⁄åﬁCuºítED
 (*(vﬁ©ûê*Ë0x49000024)

	)

31 
	#HcBulkHódED
 (*(vﬁ©ûê*Ë0x49000028)

	)

32 
	#HcBulkCuºítED
 (*(vﬁ©ûê*Ë0x4900002C)

	)

33 
	#HcD⁄eHód
 (*(vﬁ©ûê*Ë0x49000030)

	)

34 
	#HcRmI¡îvÆ
 (*(vﬁ©ûê*Ë0x49000034)

	)

35 
	#HcFmRemaöög
 (*(vﬁ©ûê*Ë0x49000038)

	)

36 
	#HcFmNumbî
 (*(vﬁ©ûê*Ë0x4900003C)

	)

37 
	#HcPîiodicSèπ
 (*(vﬁ©ûê*Ë0x49000040)

	)

38 
	#HcLSTªshﬁd
 (*(vﬁ©ûê*Ë0x49000044)

	)

39 
	#HcRhDes¸ùt‹A
 (*(vﬁ©ûê*Ë0x49000048)

	)

40 
	#HcRhDes¸ùt‹B
 (*(vﬁ©ûê*Ë0x4900004C)

	)

41 
	#HcRhSètus
 (*(vﬁ©ûê*Ë0x49000050)

	)

42 
	#HcRhP‹tSètus1
 (*(vﬁ©ûê*Ë0x49000054)

	)

43 
	#HcRhP‹tSètus2
 (*(vﬁ©ûê*Ë0x49000058)

	)

46 
	#SRCPND
 (*(vﬁ©ûê*Ë0x4A000000)

	)

47 
	#INTMOD
 (*(vﬁ©ûê*Ë0x4A000004)

	)

48 
	#INTMSK
 (*(vﬁ©ûê*Ë0x4A000008)

	)

49 
	#PRIORITY
 (*(vﬁ©ûê*Ë0x4A00000C)

	)

50 
	#INTPND
 (*(vﬁ©ûê*Ë0x4A000010)

	)

51 
	#INTOFFSET
 (*(vﬁ©ûê*Ë0x4A000014)

	)

52 
	#SUBSRCPND
 (*(vﬁ©ûê*Ë0x4A000018)

	)

53 
	#INTSUBMSK
 (*(vﬁ©ûê*Ë0x4A00001C)

	)

56 
	#DISRC0
 (*(vﬁ©ûê*Ë0x4B000000)

	)

57 
	#DISRCC0
 (*(vﬁ©ûê*Ë0x4B000004)

	)

58 
	#DIDST0
 (*(vﬁ©ûê*Ë0x4B000008)

	)

59 
	#DIDSTC0
 (*(vﬁ©ûê*Ë0x4B00000C)

	)

60 
	#DCON0
 (*(vﬁ©ûê*Ë0x4B000010)

	)

61 
	#DSTAT0
 (*(vﬁ©ûê*Ë0x4B000014)

	)

62 
	#DCSRC0
 (*(vﬁ©ûê*Ë0x4B000018)

	)

63 
	#DCDST0
 (*(vﬁ©ûê*Ë0x4B00001C)

	)

64 
	#DMASKTRIG0
 (*(vﬁ©ûê*Ë0x4B000020)

	)

66 
	#DISRC1
 (*(vﬁ©ûê*Ë0x4B000040)

	)

67 
	#DISRCC1
 (*(vﬁ©ûê*Ë0x4B000044)

	)

68 
	#DIDST1
 (*(vﬁ©ûê*Ë0x4B000048)

	)

69 
	#DIDSTC1
 (*(vﬁ©ûê*Ë0x4B00004C)

	)

70 
	#DCON1
 (*(vﬁ©ûê*Ë0x4B000050)

	)

71 
	#DSTAT1
 (*(vﬁ©ûê*Ë0x4B000054)

	)

72 
	#DCSRC1
 (*(vﬁ©ûê*Ë0x4B000058)

	)

73 
	#DCDST1
 (*(vﬁ©ûê*Ë0x4B00005C)

	)

74 
	#DMASKTRIG1
 (*(vﬁ©ûê*Ë0x4B000060)

	)

76 
	#DISRC2
 (*(vﬁ©ûê*Ë0x4B000080)

	)

77 
	#DISRCC2
 (*(vﬁ©ûê*Ë0x4B000084)

	)

78 
	#DIDST2
 (*(vﬁ©ûê*Ë0x4B000088)

	)

79 
	#DIDSTC2
 (*(vﬁ©ûê*Ë0x4B00008C)

	)

80 
	#DCON2
 (*(vﬁ©ûê*Ë0x4B000090)

	)

81 
	#DSTAT2
 (*(vﬁ©ûê*Ë0x4B000094)

	)

82 
	#DCSRC2
 (*(vﬁ©ûê*Ë0x4B000098)

	)

83 
	#DCDST2
 (*(vﬁ©ûê*Ë0x4B00009C)

	)

84 
	#DMASKTRIG2
 (*(vﬁ©ûê*Ë0x4B0000a0)

	)

86 
	#DISRC3
 (*(vﬁ©ûê*Ë0x4B0000C0)

	)

87 
	#DISRCC3
 (*(vﬁ©ûê*Ë0x4B0000C4)

	)

88 
	#DIDST3
 (*(vﬁ©ûê*Ë0x4B0000C8)

	)

89 
	#DIDSTC3
 (*(vﬁ©ûê*Ë0x4B0000CC)

	)

90 
	#DCON3
 (*(vﬁ©ûê*Ë0x4B0000D0)

	)

91 
	#DSTAT3
 (*(vﬁ©ûê*Ë0x4B0000D4)

	)

92 
	#DCSRC3
 (*(vﬁ©ûê*Ë0x4B0000D8)

	)

93 
	#DCDST3
 (*(vﬁ©ûê*Ë0x4B0000DC)

	)

94 
	#DMASKTRIG3
 (*(vﬁ©ûê*Ë0x4B0000E0)

	)

98 
	#LOCKTIME
 (*(vﬁ©ûê*Ë0x4C000000)

	)

99 
	#MPLLCON
 (*(vﬁ©ûê*Ë0x4C000004)

	)

100 
	#UPLLCON
 (*(vﬁ©ûê*Ë0x4C000008)

	)

101 
	#CLKCON
 (*(vﬁ©ûê*Ë0x4C00000C)

	)

102 
	#CLKSLOW
 (*(vﬁ©ûê*Ë0x4C000010)

	)

103 
	#CLKDIVN
 (*(vﬁ©ûê*Ë0x4C000014)

	)

104 
	#CAMDIVN
 (*(vﬁ©ûê*Ë0x4C000018)

	)

107 
	#LCDCON1
 (*(vﬁ©ûê*Ë0x4D000000)

	)

108 
	#LCDCON2
 (*(vﬁ©ûê*Ë0x4D000004)

	)

109 
	#LCDCON3
 (*(vﬁ©ûê*Ë0x4D000008)

	)

110 
	#LCDCON4
 (*(vﬁ©ûê*Ë0x4D00000C)

	)

111 
	#LCDCON5
 (*(vﬁ©ûê*Ë0x4D000010)

	)

112 
	#LCDSADDR1
 (*(vﬁ©ûê*Ë0x4D000014)

	)

113 
	#LCDSADDR2
 (*(vﬁ©ûê*Ë0x4D000018)

	)

114 
	#LCDSADDR3
 (*(vﬁ©ûê*Ë0x4D00001C)

	)

115 
	#REDLUT
 (*(vﬁ©ûê*Ë0x4D000020)

	)

116 
	#GREENLUT
 (*(vﬁ©ûê*Ë0x4D000024)

	)

117 
	#BLUELUT
 (*(vﬁ©ûê*Ë0x4D000028)

	)

118 
	#DITHMODE
 (*(vﬁ©ûê*Ë0x4D00004C)

	)

119 
	#TPAL
 (*(vﬁ©ûê*Ë0x4D000050)

	)

120 
	#LCDINTPND
 (*(vﬁ©ûê*Ë0x4D000054)

	)

121 
	#LCDSRCPND
 (*(vﬁ©ûê*Ë0x4D000058)

	)

122 
	#LCDINTMSK
 (*(vﬁ©ûê*Ë0x4D00005C)

	)

123 
	#LPCSEL
 (*(vﬁ©ûê*Ë0x4D000060)

	)

124 
	#PALETTE
 0x4D000400

	)

127 
	#NFCONF
 (*(vﬁ©ûê*Ë0x4E000000)

	)

128 
	#NFCONT
 (*(vﬁ©ûê*Ë0x4E000004)

	)

129 
	#NFCMD
 (*(vﬁ©ûê*Ë0x4E000008)

	)

130 
	#NFADDR
 (*(vﬁ©ûê*Ë0x4E00000C)

	)

131 
	#NFDATA
 (*(vﬁ©ûê*Ë0x4E000010)

	)

132 
	#NFMECCD0
 (*(vﬁ©ûê*Ë0x4E000014)

	)

133 
	#NFMECCD1
 (*(vﬁ©ûê*Ë0x4E000018)

	)

134 
	#NFSECCD
 (*(vﬁ©ûê*Ë0x4E00001C)

	)

135 
	#NFSTAT
 (*(vﬁ©ûê*Ë0x4E000020)

	)

136 
	#NFESTAT0
 (*(vﬁ©ûê*Ë0x4E000024)

	)

137 
	#NFESTAT1
 (*(vﬁ©ûê*Ë0x4E000028)

	)

138 
	#NFMECC0
 (*(vﬁ©ûê*Ë0x4E00002C)

	)

139 
	#NFMECC1
 (*(vﬁ©ûê*Ë0x4E000030)

	)

140 
	#NFSECC
 (*(vﬁ©ûê*Ë0x4E000034)

	)

141 
	#NFSBLK
 (*(vﬁ©ûê*Ë0x4E000038)

	)

142 
	#NFEBLK
 (*(vﬁ©ûê*Ë0x4E00003C)

	)

145 
	#CISRCFMT
 (*(vﬁ©ûê*Ë0x4F000000)

	)

146 
	#CIWDOFST
 (*(vﬁ©ûê*Ë0x4F000004)

	)

147 
	#CIGCTRL
 (*(vﬁ©ûê*Ë0x4F000008)

	)

148 
	#CICOYSA1
 (*(vﬁ©ûê*Ë0x4F000018)

	)

149 
	#CICOYSA2
 (*(vﬁ©ûê*Ë0x4F00001C)

	)

150 
	#CICOYSA3
 (*(vﬁ©ûê*Ë0x4F000020)

	)

151 
	#CICOYSA4
 (*(vﬁ©ûê*Ë0x4F000024)

	)

152 
	#CICOCBSA1
 (*(vﬁ©ûê*Ë0x4F000028)

	)

153 
	#CICOCBSA2
 (*(vﬁ©ûê*Ë0x4F00002C)

	)

154 
	#CICOCBSA3
 (*(vﬁ©ûê*Ë0x4F000030)

	)

155 
	#CICOCBSA4
 (*(vﬁ©ûê*Ë0x4F000034)

	)

156 
	#CICORSA1
 (*(vﬁ©ûê*Ë0x4F000038)

	)

157 
	#CICORSA2
 (*(vﬁ©ûê*Ë0x4F00003C)

	)

158 
	#CICORSA3
 (*(vﬁ©ûê*Ë0x4F000040)

	)

159 
	#CICORSA4
 (*(vﬁ©ûê*Ë0x4F000044)

	)

160 
	#CICOTRGFMT
 (*(vﬁ©ûê*Ë0x4F000048)

	)

161 
	#CICOCTRL
 (*(vﬁ©ûê*Ë0x4F00004C)

	)

162 
	#CICOSCPRERATIO
 (*(vﬁ©ûê*Ë0x4F000050)

	)

163 
	#CICOSCPREDST
 (*(vﬁ©ûê*Ë0x4F000054)

	)

164 
	#CICOSCCTRL
 (*(vﬁ©ûê*Ë0x4F000058)

	)

165 
	#CICOTAREA
 (*(vﬁ©ûê*Ë0x4F00005C)

	)

166 
	#CICOSTATUS
 (*(vﬁ©ûê*Ë0x4F000064)

	)

167 
	#CIPRCLRSA1
 (*(vﬁ©ûê*Ë0x4F00006C)

	)

168 
	#CIPRCLRSA2
 (*(vﬁ©ûê*Ë0x4F000070)

	)

169 
	#CIPRCLRSA3
 (*(vﬁ©ûê*Ë0x4F000074)

	)

170 
	#CIPRCLRSA4
 (*(vﬁ©ûê*Ë0x4F000078)

	)

171 
	#CIPRTRGFMT
 (*(vﬁ©ûê*Ë0x4F00007C)

	)

172 
	#CIPRCTRL
 (*(vﬁ©ûê*Ë0x4F000080)

	)

173 
	#CIPRSCPRERATIO
 (*(vﬁ©ûê*Ë0x4F000084)

	)

174 
	#CIPRSCPREDST
 (*(vﬁ©ûê*Ë0x4F000088)

	)

175 
	#CIPRSCCTRL
 (*(vﬁ©ûê*Ë0x4F00008C)

	)

176 
	#CIPRTAREA
 (*(vﬁ©ûê*Ë0x4F000090)

	)

177 
	#CIPRSTATUS
 (*(vﬁ©ûê*Ë0x4F000098)

	)

178 
	#CIIMGCPT
 (*(vﬁ©ûê*Ë0x4F0000A0)

	)

182 
	#ULCON0
 (*(vﬁ©ûê*Ë0x50000000)

	)

183 
	#UCON0
 (*(vﬁ©ûê*Ë0x50000004)

	)

184 
	#UFCON0
 (*(vﬁ©ûê*Ë0x50000008)

	)

185 
	#UMCON0
 (*(vﬁ©ûê*Ë0x5000000C)

	)

186 
	#UTRSTAT0
 (*(vﬁ©ûê*Ë0x50000010)

	)

187 
	#UERSTAT0
 (*(vﬁ©ûê*Ë0x50000014)

	)

188 
	#UFSTAT0
 (*(vﬁ©ûê*Ë0x50000018)

	)

189 
	#UMSTAT0
 (*(vﬁ©ûê*Ë0x5000001C)

	)

190 
	#UTXH0
 (*(vﬁ©ûê*Ë0x50000020)

	)

191 
	#URXH0
 (*(vﬁ©ûê*Ë0x50000024)

	)

192 
	#UBRDIV0
 (*(vﬁ©ûê*Ë0x50000028)

	)

194 
	#ULCON1
 (*(vﬁ©ûê*Ë0x50004000)

	)

195 
	#UCON1
 (*(vﬁ©ûê*Ë0x50004004)

	)

196 
	#UFCON1
 (*(vﬁ©ûê*Ë0x50004008)

	)

197 
	#UMCON1
 (*(vﬁ©ûê*Ë0x5000400C)

	)

198 
	#UTRSTAT1
 (*(vﬁ©ûê*Ë0x50004010)

	)

199 
	#UERSTAT1
 (*(vﬁ©ûê*Ë0x50004014)

	)

200 
	#UFSTAT1
 (*(vﬁ©ûê*Ë0x50004018)

	)

201 
	#UMSTAT1
 (*(vﬁ©ûê*Ë0x5000401C)

	)

202 
	#UTXH1
 (*(vﬁ©ûê*Ë0x50004020)

	)

203 
	#URXH1
 (*(vﬁ©ûê*Ë0x50004024)

	)

204 
	#UBRDIV1
 (*(vﬁ©ûê*Ë0x50004028)

	)

206 
	#ULCON2
 (*(vﬁ©ûê*Ë0x50008000)

	)

207 
	#UCON2
 (*(vﬁ©ûê*Ë0x50008004)

	)

208 
	#UFCON2
 (*(vﬁ©ûê*Ë0x50008008)

	)

209 
	#UMCON2
 (*(vﬁ©ûê*Ë0x5000800C)

	)

210 
	#UTRSTAT2
 (*(vﬁ©ûê*Ë0x50008010)

	)

211 
	#UERSTAT2
 (*(vﬁ©ûê*Ë0x50008014)

	)

212 
	#UFSTAT2
 (*(vﬁ©ûê*Ë0x50008018)

	)

213 
	#UTXH2
 (*(vﬁ©ûê*Ë0x50008020)

	)

214 
	#URXH2
 (*(vﬁ©ûê*Ë0x50008024)

	)

215 
	#UBRDIV2
 (*(vﬁ©ûê*Ë0x50008028)

	)

217 #ifde‡
__BIG_ENDIAN


218 #unde‡
UTXH0


219 
	#UTXH0
 (*(vﬁ©ûê*Ë0x50000023)

	)

220 #unde‡
URXH0


221 
	#URXH0
 (*(vﬁ©ûê*Ë0x50000027)

	)

222 #unde‡
UTXH1


223 
	#UTXH1
 (*(vﬁ©ûê*Ë0x50004023)

	)

224 #unde‡
URXH1


225 
	#URXH1
 (*(vﬁ©ûê*Ë0x50004027)

	)

226 #unde‡
UTXH2


227 
	#UTXH2
 (*(vﬁ©ûê*Ë0x50008023)

	)

228 #unde‡
URXH2


229 
	#URXH2
 (*(vﬁ©ûê*Ë0x50008027)

	)

233 
	#TCFG0
 (*(vﬁ©ûê*Ë0x51000000)

	)

234 
	#TCFG1
 (*(vﬁ©ûê*Ë0x51000004)

	)

235 
	#TCON
 (*(vﬁ©ûê*Ë0x51000008)

	)

236 
	#TCNTB0
 (*(vﬁ©ûê*Ë0x5100000C)

	)

237 
	#TCMPB0
 (*(vﬁ©ûê*Ë0x51000010)

	)

238 
	#TCNTO0
 (*(vﬁ©ûê*Ë0x51000014)

	)

239 
	#TCNTB1
 (*(vﬁ©ûê*Ë0x51000018)

	)

240 
	#TCMPB1
 (*(vﬁ©ûê*Ë0x5100001C)

	)

241 
	#TCNTO1
 (*(vﬁ©ûê*Ë0x51000020)

	)

242 
	#TCNTB2
 (*(vﬁ©ûê*Ë0x51000024)

	)

243 
	#TCMPB2
 (*(vﬁ©ûê*Ë0x51000028)

	)

244 
	#TCNTO2
 (*(vﬁ©ûê*Ë0x5100002C)

	)

245 
	#TCNTB3
 (*(vﬁ©ûê*Ë0x51000030)

	)

246 
	#TCMPB3
 (*(vﬁ©ûê*Ë0x51000034)

	)

247 
	#TCNTO3
 (*(vﬁ©ûê*Ë0x51000038)

	)

248 
	#TCNTB4
 (*(vﬁ©ûê*Ë0x5100003C)

	)

249 
	#TCNTO4
 (*(vﬁ©ûê*Ë0x51000040)

	)

253 #ifde‡ 
__BIG_ENDIAN


254 
	#FUNC_ADDR_REG
 (*(vﬁ©ûê*Ë0x52000143)

	)

255 
	#PWR_REG
 (*(vﬁ©ûê*Ë0x52000147)

	)

256 
	#EP_INT_REG
 (*(vﬁ©ûê*Ë0x5200014B)

	)

257 
	#USB_INT_REG
 (*(vﬁ©ûê*Ë0x5200015B)

	)

258 
	#EP_INT_EN_REG
 (*(vﬁ©ûê*Ë0x5200015F)

	)

259 
	#USB_INT_EN_REG
 (*(vﬁ©ûê*Ë0x5200016F)

	)

260 
	#FRAME_NUM1_REG
 (*(vﬁ©ûê*Ë0x52000173)

	)

261 
	#FRAME_NUM2_REG
 (*(vﬁ©ûê*Ë0x52000177)

	)

262 
	#INDEX_REG
 (*(vﬁ©ûê*Ë0x5200017B)

	)

263 
	#MAXP_REG
 (*(vﬁ©ûê*Ë0x52000183)

	)

264 
	#EP0_CSR
 (*(vﬁ©ûê*Ë0x52000187)

	)

265 
	#IN_CSR1_REG
 (*(vﬁ©ûê*Ë0x52000187)

	)

266 
	#IN_CSR2_REG
 (*(vﬁ©ûê*Ë0x5200018B)

	)

267 
	#OUT_CSR1_REG
 (*(vﬁ©ûê*Ë0x52000193)

	)

268 
	#OUT_CSR2_REG
 (*(vﬁ©ûê*Ë0x52000197)

	)

269 
	#OUT_FIFO_CNT1_REG
 (*(vﬁ©ûê*Ë0x5200019B)

	)

270 
	#OUT_FIFO_CNT2_REG
 (*(vﬁ©ûê*Ë0x5200019F)

	)

271 
	#EP0_FIFO
 (*(vﬁ©ûê*Ë0x520001C3)

	)

272 
	#EP1_FIFO
 (*(vﬁ©ûê*Ë0x520001C7)

	)

273 
	#EP2_FIFO
 (*(vﬁ©ûê*Ë0x520001CF)

	)

274 
	#EP3_FIFO
 (*(vﬁ©ûê*Ë0x520001CF)

	)

275 
	#EP4_FIFO
 (*(vﬁ©ûê*Ë0x520001D3)

	)

276 
	#EP1_DMA_CON
 (*(vﬁ©ûê*Ë0x52000203)

	)

277 
	#EP1_DMA_UNIT
 (*(vﬁ©ûê*Ë0x52000207)

	)

278 
	#EP1_DMA_FIFO
 (*(vﬁ©ûê*Ë0x5200020B)

	)

279 
	#EP1_DMA_TTC_L
 (*(vﬁ©ûê*Ë0x5200020F)

	)

280 
	#EP1_DMA_TTC_M
 (*(vﬁ©ûê*Ë0x52000213)

	)

281 
	#EP1_DMA_TTC_H
 (*(vﬁ©ûê*Ë0x52000217)

	)

282 
	#EP2_DMA_CON
 (*(vﬁ©ûê*Ë0x5200021B)

	)

283 
	#EP2_DMA_UNIT
 (*(vﬁ©ûê*Ë0x5200021F)

	)

284 
	#EP2_DMA_FIFO
 (*(vﬁ©ûê*Ë0x52000223)

	)

285 
	#EP2_DMA_TTC_L
 (*(vﬁ©ûê*Ë0x52000227)

	)

286 
	#EP2_DMA_TTC_M
 (*(vﬁ©ûê*Ë0x5200022B)

	)

287 
	#EP2_DMA_TTC_H
 (*(vﬁ©ûê*Ë0x5200022F)

	)

288 
	#EP3_DMA_CON
 (*(vﬁ©ûê*Ë0x52000243)

	)

289 
	#EP3_DMA_UNIT
 (*(vﬁ©ûê*Ë0x52000247)

	)

290 
	#EP3_DMA_FIFO
 (*(vﬁ©ûê*Ë0x5200024B)

	)

291 
	#EP3_DMA_TTC_L
 (*(vﬁ©ûê*Ë0x5200024F)

	)

292 
	#EP3_DMA_TTC_M
 (*(vﬁ©ûê*Ë0x52000253)

	)

293 
	#EP3_DMA_TTC_H
 (*(vﬁ©ûê*Ë0x52000257)

	)

294 
	#EP4_DMA_CON
 (*(vﬁ©ûê*Ë0x5200025B)

	)

295 
	#EP4_DMA_UNIT
 (*(vﬁ©ûê*Ë0x5200025F)

	)

296 
	#EP4_DMA_FIFO
 (*(vﬁ©ûê*Ë0x52000263)

	)

297 
	#EP4_DMA_TTC_L
 (*(vﬁ©ûê*Ë0x52000267)

	)

298 
	#EP4_DMA_TTC_M
 (*(vﬁ©ûê*Ë0x5200026B)

	)

299 
	#EP4_DMA_TTC_H
 (*(vﬁ©ûê*Ë0x5200026F)

	)

302 
	#FUNC_ADDR_REG
 (*(vﬁ©ûê*Ë0x52000140)

	)

303 
	#PWR_REG
 (*(vﬁ©ûê*Ë0x52000144)

	)

304 
	#EP_INT_REG
 (*(vﬁ©ûê*Ë0x52000148)

	)

305 
	#USB_INT_REG
 (*(vﬁ©ûê*Ë0x52000158)

	)

306 
	#EP_INT_EN_REG
 (*(vﬁ©ûê*Ë0x5200015C)

	)

307 
	#USB_INT_EN_REG
 (*(vﬁ©ûê*Ë0x5200016C)

	)

308 
	#FRAME_NUM1_REG
 (*(vﬁ©ûê*Ë0x52000170)

	)

309 
	#FRAME_NUM2_REG
 (*(vﬁ©ûê*Ë0x52000174)

	)

310 
	#INDEX_REG
 (*(vﬁ©ûê*Ë0x52000178)

	)

311 
	#MAXP_REG
 (*(vﬁ©ûê*Ë0x52000180)

	)

312 
	#EP0_CSR
 (*(vﬁ©ûê*Ë0x52000184)

	)

313 
	#IN_CSR1_REG
 (*(vﬁ©ûê*Ë0x52000184)

	)

314 
	#IN_CSR2_REG
 (*(vﬁ©ûê*Ë0x52000188)

	)

315 
	#OUT_CSR1_REG
 (*(vﬁ©ûê*Ë0x52000190)

	)

316 
	#OUT_CSR2_REG
 (*(vﬁ©ûê*Ë0x52000194)

	)

317 
	#OUT_FIFO_CNT1_REG
 (*(vﬁ©ûê*Ë0x52000198)

	)

318 
	#OUT_FIFO_CNT2_REG
 (*(vﬁ©ûê*Ë0x5200019C)

	)

319 
	#EP0_FIFO
 (*(vﬁ©ûê*Ë0x520001C0)

	)

320 
	#EP1_FIFO
 (*(vﬁ©ûê*Ë0x520001C4)

	)

321 
	#EP2_FIFO
 (*(vﬁ©ûê*Ë0x520001C8)

	)

322 
	#EP3_FIFO
 (*(vﬁ©ûê*Ë0x520001CC)

	)

323 
	#EP4_FIFO
 (*(vﬁ©ûê*Ë0x520001D0)

	)

324 
	#EP1_DMA_CON
 (*(vﬁ©ûê*Ë0x52000200)

	)

325 
	#EP1_DMA_UNIT
 (*(vﬁ©ûê*Ë0x52000204)

	)

326 
	#EP1_DMA_FIFO
 (*(vﬁ©ûê*Ë0x52000208)

	)

327 
	#EP1_DMA_TTC_L
 (*(vﬁ©ûê*Ë0x5200020C)

	)

328 
	#EP1_DMA_TTC_M
 (*(vﬁ©ûê*Ë0x52000210)

	)

329 
	#EP1_DMA_TTC_H
 (*(vﬁ©ûê*Ë0x52000214)

	)

330 
	#EP2_DMA_CON
 (*(vﬁ©ûê*Ë0x52000218)

	)

331 
	#EP2_DMA_UNIT
 (*(vﬁ©ûê*Ë0x5200021C)

	)

332 
	#EP2_DMA_FIFO
 (*(vﬁ©ûê*Ë0x52000220)

	)

333 
	#EP2_DMA_TTC_L
 (*(vﬁ©ûê*Ë0x52000224)

	)

334 
	#EP2_DMA_TTC_M
 (*(vﬁ©ûê*Ë0x52000228)

	)

335 
	#EP2_DMA_TTC_H
 (*(vﬁ©ûê*Ë0x5200022C)

	)

336 
	#EP3_DMA_CON
 (*(vﬁ©ûê*Ë0x52000240)

	)

337 
	#EP3_DMA_UNIT
 (*(vﬁ©ûê*Ë0x52000244)

	)

338 
	#EP3_DMA_FIFO
 (*(vﬁ©ûê*Ë0x52000248)

	)

339 
	#EP3_DMA_TTC_L
 (*(vﬁ©ûê*Ë0x5200024C)

	)

340 
	#EP3_DMA_TTC_M
 (*(vﬁ©ûê*Ë0x52000250)

	)

341 
	#EP3_DMA_TTC_H
 (*(vﬁ©ûê*Ë0x52000254)

	)

342 
	#EP4_DMA_CON
 (*(vﬁ©ûê*Ë0x52000258)

	)

343 
	#EP4_DMA_UNIT
 (*(vﬁ©ûê*Ë0x5200025C)

	)

344 
	#EP4_DMA_FIFO
 (*(vﬁ©ûê*Ë0x52000260)

	)

345 
	#EP4_DMA_TTC_L
 (*(vﬁ©ûê*Ë0x52000264)

	)

346 
	#EP4_DMA_TTC_M
 (*(vﬁ©ûê*Ë0x52000268)

	)

347 
	#EP4_DMA_TTC_H
 (*(vﬁ©ûê*Ë0x5200026C)

	)

351 
	#WTCON
 (*(vﬁ©ûê*Ë0x53000000)

	)

352 
	#WTDAT
 (*(vﬁ©ûê*Ë0x53000004)

	)

353 
	#WTCNT
 (*(vﬁ©ûê*Ë0x53000008)

	)

356 
	#IICCON
 (*(vﬁ©ûê*Ë0x54000000)

	)

357 
	#IICSTAT
 (*(vﬁ©ûê*Ë0x54000004)

	)

358 
	#IICADD
 (*(vﬁ©ûê*Ë0x54000008)

	)

359 
	#IICDS
 (*(vﬁ©ûê*Ë0x5400000C)

	)

360 
	#IICLC
 (*(vﬁ©ûê*Ë0x54000010)

	)

363 
	#IISCON
 (*(vﬁ©ûê*Ë0x55000000)

	)

364 
	#IISMOD
 (*(vﬁ©ûê*Ë0x55000004)

	)

365 
	#IISPSR
 (*(vﬁ©ûê*Ë0x55000008)

	)

366 
	#IISFCON
 (*(vﬁ©ûê*Ë0x5500000C)

	)

367 
	#IISFIFO
 (*(vﬁ©ûê*Ë0x55000010)

	)

369 #ifde‡
__BIG_ENDIAN


370 #unde‡
IISFIFO


371 
	#IISFIFO
 (*(vﬁ©ûê*Ë0x55000012)

	)

375 
	#GPACON
 (*(vﬁ©ûê*Ë0x56000000)

	)

376 
	#GPADAT
 (*(vﬁ©ûê*Ë0x56000004)

	)

378 
	#GPBCON
 (*(vﬁ©ûê*Ë0x56000010)

	)

379 
	#GPBDAT
 (*(vﬁ©ûê*Ë0x56000014)

	)

380 
	#GPBUP
 (*(vﬁ©ûê*Ë0x56000018)

	)

382 
	#GPCCON
 (*(vﬁ©ûê*Ë0x56000020)

	)

383 
	#GPCDAT
 (*(vﬁ©ûê*Ë0x56000024)

	)

384 
	#GPCUP
 (*(vﬁ©ûê*Ë0x56000028)

	)

386 
	#GPDCON
 (*(vﬁ©ûê*Ë0x56000030)

	)

387 
	#GPDDAT
 (*(vﬁ©ûê*Ë0x56000034)

	)

388 
	#GPDUP
 (*(vﬁ©ûê*Ë0x56000038)

	)

390 
	#GPECON
 (*(vﬁ©ûê*Ë0x56000040)

	)

391 
	#GPEDAT
 (*(vﬁ©ûê*Ë0x56000044)

	)

392 
	#GPEUP
 (*(vﬁ©ûê*Ë0x56000048)

	)

394 
	#GPFCON
 (*(vﬁ©ûê*Ë0x56000050)

	)

395 
	#GPFDAT
 (*(vﬁ©ûê*Ë0x56000054)

	)

396 
	#GPFUP
 (*(vﬁ©ûê*Ë0x56000058)

	)

398 
	#GPGCON
 (*(vﬁ©ûê*Ë0x56000060)

	)

399 
	#GPGDAT
 (*(vﬁ©ûê*Ë0x56000064)

	)

400 
	#GPGUP
 (*(vﬁ©ûê*Ë0x56000068)

	)

402 
	#GPHCON
 (*(vﬁ©ûê*Ë0x56000070)

	)

403 
	#GPHDAT
 (*(vﬁ©ûê*Ë0x56000074)

	)

404 
	#GPHUP
 (*(vﬁ©ûê*Ë0x56000078)

	)

406 
	#GPJCON
 (*(vﬁ©ûê*Ë0x560000D0)

	)

407 
	#GPJDAT
 (*(vﬁ©ûê*Ë0x560000D4)

	)

408 
	#GPJUP
 (*(vﬁ©ûê*Ë0x560000D8)

	)

410 
	#MISCCR
 (*(vﬁ©ûê*Ë0x56000080)

	)

411 
	#DCLKCON
 (*(vﬁ©ûê*Ë0x56000084)

	)

412 
	#EXTINT0
 (*(vﬁ©ûê*Ë0x56000088)

	)

413 
	#EXTINT1
 (*(vﬁ©ûê*Ë0x5600008C)

	)

414 
	#EXTINT2
 (*(vﬁ©ûê*Ë0x56000090)

	)

415 
	#EINTFLT0
 (*(vﬁ©ûê*Ë0x56000094)

	)

416 
	#EINTFLT1
 (*(vﬁ©ûê*Ë0x56000098)

	)

417 
	#EINTFLT2
 (*(vﬁ©ûê*Ë0x5600009C)

	)

418 
	#EINTFLT3
 (*(vﬁ©ûê*Ë0x560000A0)

	)

419 
	#EINTMASK
 (*(vﬁ©ûê*Ë0x560000A4)

	)

420 
	#EINTPEND
 (*(vﬁ©ûê*Ë0x560000A8)

	)

421 
	#GSTATUS0
 (*(vﬁ©ûê*Ë0x560000AC)

	)

422 
	#GSTATUS1
 (*(vﬁ©ûê*Ë0x560000B0)

	)

423 
	#GSTATUS2
 (*(vﬁ©ûê*Ë0x560000B4)

	)

424 
	#GSTATUS3
 (*(vﬁ©ûê*Ë0x560000B8)

	)

425 
	#GSTATUS4
 (*(vﬁ©ûê*Ë0x560000BC)

	)

426 
	#MSLCON
 (*(vﬁ©ûê*Ë0x560000CC)

	)

429 #ifde‡ 
__BIG_ENDIAN


430 
	#RTCCON
 (*(vﬁ©ûê*Ë0x57000043)

	)

431 
	#TICNT
 (*(vﬁ©ûê*Ë0x57000047)

	)

432 
	#RTCALM
 (*(vﬁ©ûê*Ë0x57000053)

	)

433 
	#ALMSEC
 (*(vﬁ©ûê*Ë0x57000057)

	)

434 
	#ALMMIN
 (*(vﬁ©ûê*Ë0x5700005B)

	)

435 
	#ALMHOUR
 (*(vﬁ©ûê*Ë0x5700005F)

	)

436 
	#ALMDATE
 (*(vﬁ©ûê*Ë0x57000063)

	)

437 
	#ALMMON
 (*(vﬁ©ûê*Ë0x57000067)

	)

438 
	#ALMYEAR
 (*(vﬁ©ûê*Ë0x5700006B)

	)

439 
	#RTCRST
 (*(vﬁ©ûê*Ë0x5700006F)

	)

440 
	#BCDSEC
 (*(vﬁ©ûê*Ë0x57000073)

	)

441 
	#BCDMIN
 (*(vﬁ©ûê*Ë0x57000077)

	)

442 
	#BCDHOUR
 (*(vﬁ©ûê*Ë0x5700007B)

	)

443 
	#BCDDATE
 (*(vﬁ©ûê*Ë0x5700007F)

	)

444 
	#BCDDAY
 (*(vﬁ©ûê*Ë0x57000083)

	)

445 
	#BCDMON
 (*(vﬁ©ûê*Ë0x57000087)

	)

446 
	#BCDYEAR
 (*(vﬁ©ûê*Ë0x5700008B)

	)

449 
	#RTCCON
 (*(vﬁ©ûê*Ë0x57000040)

	)

450 
	#TICNT
 (*(vﬁ©ûê*Ë0x57000044)

	)

451 
	#RTCALM
 (*(vﬁ©ûê*Ë0x57000050)

	)

452 
	#ALMSEC
 (*(vﬁ©ûê*Ë0x57000054)

	)

453 
	#ALMMIN
 (*(vﬁ©ûê*Ë0x57000058)

	)

454 
	#ALMHOUR
 (*(vﬁ©ûê*Ë0x5700005C)

	)

455 
	#ALMDATE
 (*(vﬁ©ûê*Ë0x57000060)

	)

456 
	#ALMMON
 (*(vﬁ©ûê*Ë0x57000064)

	)

457 
	#ALMYEAR
 (*(vﬁ©ûê*Ë0x57000068)

	)

458 
	#RTCRST
 (*(vﬁ©ûê*Ë0x5700006C)

	)

459 
	#BCDSEC
 (*(vﬁ©ûê*Ë0x57000070)

	)

460 
	#BCDMIN
 (*(vﬁ©ûê*Ë0x57000074)

	)

461 
	#BCDHOUR
 (*(vﬁ©ûê*Ë0x57000078)

	)

462 
	#BCDDATE
 (*(vﬁ©ûê*Ë0x5700007C)

	)

463 
	#BCDDAY
 (*(vﬁ©ûê*Ë0x57000080)

	)

464 
	#BCDMON
 (*(vﬁ©ûê*Ë0x57000084)

	)

465 
	#BCDYEAR
 (*(vﬁ©ûê*Ë0x57000088)

	)

469 
	#ADCCON
 (*(vﬁ©ûê*Ë0x58000000)

	)

470 
	#ADCTSC
 (*(vﬁ©ûê*Ë0x58000004)

	)

471 
	#ADCDLY
 (*(vﬁ©ûê*Ë0x58000008)

	)

472 
	#ADCDAT0
 (*(vﬁ©ûê*Ë0x5800000C)

	)

473 
	#ADCDAT1
 (*(vﬁ©ûê*Ë0x58000010)

	)

474 
	#ADCUPDN
 (*(vﬁ©ûê*Ë0x58000014)

	)

477 
	#SPCON0
 (*(vﬁ©ûê*Ë0x59000000)

	)

478 
	#SPSTA0
 (*(vﬁ©ûê*Ë0x59000004)

	)

479 
	#SPPIN0
 (*(vﬁ©ûê*Ë0x59000008)

	)

480 
	#SPPRE0
 (*(vﬁ©ûê*Ë0x5900000C)

	)

481 
	#SPTDAT0
 (*(vﬁ©ûê*Ë0x59000010)

	)

482 
	#SPRDAT0
 (*(vﬁ©ûê*Ë0x59000014)

	)

484 
	#SPCON1
 (*(vﬁ©ûê*Ë0x59000020)

	)

485 
	#SPSTA1
 (*(vﬁ©ûê*Ë0x59000024)

	)

486 
	#SPPIN1
 (*(vﬁ©ûê*Ë0x59000028)

	)

487 
	#SPPRE1
 (*(vﬁ©ûê*Ë0x5900002C)

	)

488 
	#SPTDAT1
 (*(vﬁ©ûê*Ë0x59000030)

	)

489 
	#SPRDAT1
 (*(vﬁ©ûê*Ë0x59000034)

	)

492 
	#SDICON
 (*(vﬁ©ûê*Ë0x5A000000)

	)

493 
	#SDIPRE
 (*(vﬁ©ûê*Ë0x5A000004)

	)

494 
	#SDICARG
 (*(vﬁ©ûê*Ë0x5A000008)

	)

495 
	#SDICCON
 (*(vﬁ©ûê*Ë0x5A00000C)

	)

496 
	#SDICSTA
 (*(vﬁ©ûê*Ë0x5A000010)

	)

497 
	#SDIRSP0
 (*(vﬁ©ûê*Ë0x5A000014)

	)

498 
	#SDIRSP1
 (*(vﬁ©ûê*Ë0x5A000018)

	)

499 
	#SDIRSP2
 (*(vﬁ©ûê*Ë0x5A00001C)

	)

500 
	#SDIRSP3
 (*(vﬁ©ûê*Ë0x5A000020)

	)

501 
	#SDIDTIMER
 (*(vﬁ©ûê*Ë0x5A000024)

	)

502 
	#SDIBSIZE
 (*(vﬁ©ûê*Ë0x5A000028)

	)

503 
	#SDIDCON
 (*(vﬁ©ûê*Ë0x5A00002C)

	)

504 
	#SDIDCNT
 (*(vﬁ©ûê*Ë0x5A000030)

	)

505 
	#SDIDSTA
 (*(vﬁ©ûê*Ë0x5A000034)

	)

506 
	#SDIFSTA
 (*(vﬁ©ûê*Ë0x5A000038)

	)

507 
	#SDIIMSK
 (*(vﬁ©ûê*Ë0x5A00003C)

	)

508 
	#SDIDAT
 (*(vﬁ©ûê*Ë0x5A000040)

	)

510 #ifde‡
__BIG_ENDIAN


511 #unde‡
SDIDAT


512 
	#SDIDAT
 (*(vﬁ©ûê*Ë0x5A000043)

	)

516 
	#AC_GLBCTRL
 (*(vﬁ©ûê*Ë0x5B000000)

	)

517 
	#AC_GLBSTAT
 (*(vﬁ©ûê*Ë0x5B000004)

	)

518 
	#AC_CODEC_CMD
 (*(vﬁ©ûê*Ë0x5B000008)

	)

519 
	#AC_CODEC_STAT
 (*(vﬁ©ûê*Ë0x5B00000C)

	)

520 
	#AC_PCMADDR
 (*(vﬁ©ûê*Ë0x5B000010)

	)

521 
	#AC_MICADDR
 (*(vﬁ©ûê*Ë0x5B000014)

	)

522 
	#AC_PCMDATA
 (*(vﬁ©ûê*Ë0x5B000018)

	)

523 
	#AC_MICDATA
 (*(vﬁ©ûê*Ë0x5B00001C)

	)

526 
	#BIT_EINT0
 (1 << 0)

	)

527 
	#BIT_EINT1
 (1 << 1)

	)

528 
	#BIT_EINT2
 (1 << 2)

	)

529 
	#BIT_EINT3
 (1 << 3)

	)

530 
	#BIT_EINT4_7
 (1 << 4)

	)

531 
	#BIT_EINT8_23
 (1 << 5)

	)

532 
	#BIT_CAM
 (1 << 6)

	)

533 
	#BIT_nBAT_FLT
 (1 << 7)

	)

534 
	#BIT_TICK
 (1 << 8)

	)

535 
	#BIT_WDT_AC97
 (1 << 9)

	)

536 
	#BIT_TIMER0
 (1 << 10)

	)

537 
	#BIT_TIMER1
 (1 << 11)

	)

538 
	#BIT_TIMER2
 (1 << 12)

	)

539 
	#BIT_TIMER3
 (1 << 13)

	)

540 
	#BIT_TIMER4
 (1 << 14)

	)

541 
	#BIT_UART2
 (1 << 15)

	)

542 
	#BIT_LCD
 (1 << 16)

	)

543 
	#BIT_DMA0
 (1 << 17)

	)

544 
	#BIT_DMA1
 (1 << 18)

	)

545 
	#BIT_DMA2
 (1 << 19)

	)

546 
	#BIT_DMA3
 (1 << 20)

	)

547 
	#BIT_SDI
 (1 << 21)

	)

548 
	#BIT_SPI0
 (1 << 22)

	)

549 
	#BIT_UART1
 (1 << 23)

	)

550 
	#BIT_NFCON
 (1 << 24)

	)

551 
	#BIT_USBD
 (1 << 25)

	)

552 
	#BIT_USBH
 (1 << 26)

	)

553 
	#BIT_IIC
 (1 << 27)

	)

554 
	#BIT_UART0
 (1 << 28)

	)

555 
	#BIT_SPI1
 (1 << 29)

	)

556 
	#BIT_RTC
 (1 << 30)

	)

557 
	#BIT_ADC
 (1 << 31)

	)

558 
	#BIT_ALLMSK
 (0xFFFFFFFF)

	)

560 
	#BIT_SUB_RXD0
 (1 << 0)

	)

561 
	#BIT_SUB_TXD0
 (1 << 1)

	)

562 
	#BIT_SUB_ERR0
 (1 << 2)

	)

563 
	#BIT_SUB_RXD1
 (1 << 3)

	)

564 
	#BIT_SUB_TXD1
 (1 << 4)

	)

565 
	#BIT_SUB_ERR1
 (1 << 5)

	)

566 
	#BIT_SUB_RXD2
 (1 << 6)

	)

567 
	#BIT_SUB_TXD2
 (1 << 7)

	)

568 
	#BIT_SUB_ERR2
 (1 << 8)

	)

569 
	#BIT_SUB_TC
 (1 << 9)

	)

570 
	#BIT_SUB_ADC_S
 (1 << 10)

	)

571 
	#BIT_SUB_CAM_C
 (1 << 11)

	)

572 
	#BIT_SUB_CAM_P
 (1 << 12)

	)

573 
	#BIT_SUB_WDT
 (1 << 13)

	)

574 
	#BIT_SUB_AC97
 (1 << 14)

	)

575 
	#BIT_SUB_ALLMSK
 (0x000007FF)

	)

	@cbuff/c_buff.c

1 
	~"c⁄fig.h
"

2 
	~"c_buff.h
"

54 
c_buff_°ru˘
 *
	$√w_cbuff
(
u16
 
size
) {

55 
c_buff_°ru˘
 *
√w_buf
 = 
NULL
;

56 
√w_buf
 = (
c_buff_°ru˘
 *)
	`mÆloc
((c_buff_struct));

57 if(
√w_buf
 =
NULL
) {

58  
√w_buf
;

61 
√w_buf
->
buff
 = 
	`mÆloc
(
size
);

62 if(
√w_buf
->
buff
 =
NULL
) {

63 
	`‰ì
(
√w_buf
);

67 
√w_buf
->
buff_Àn
 = 
size
;

68 
√w_buf
->
d©a_Àn
 = 0;

69 
√w_buf
->
Êag
 = 0;

70 
√w_buf
->
°¨t
 =Çew_buf->
buff
;

71 
√w_buf
->
íd
 =Çew_buf->
buff
 +Çew_buf->
buff_Àn
 ;

72 
√w_buf
->
ªad_±r
 =Çew_buf->
buff
;

73 
√w_buf
->
wrôe_±r
 =Çew_buf->
buff
;

74  
√w_buf
;

75 
	}
}

78 
	$‰ì_cbuff
(
c_buff_°ru˘
 **
cbuff
)

80 if((*
cbuff
)->
buff
) {

81 
	`‰ì
((*
cbuff
)->
buff
);

84 if(*
cbuff
) {

85 
	`‰ì
(*
cbuff
);

88 *
cbuff
 = 
NULL
;

89 
	}
}

92 
u16
 
	$ªad_cbuff
(
c_buff_°ru˘
 *
cbuff
, *
buf
, 
u16
 
Àn
)

94 
u16
 
size
 = 
cbuff
->
d©a_Àn
 > 
Àn
 ?Üen: cbuff->data_len;

95 
u8
 *
buff
 = 
buf
;

96 if(
size
 == 0) {

99 if(
cbuff
->
Êag
 & 
MUTU_FLAG
){

102 
DIS_CPU_INT


103 
cbuff
->
Êag
 |
MUTU_FLAG
;

105 if(
cbuff
->
wrôe_±r
 > cbuff->
ªad_±r
) {

106 
	`mem˝y
(
buff
, 
cbuff
->
ªad_±r
, 
size
);

107 
cbuff
->
ªad_±r
 +
size
;

109 
u16
 
c›y_size
;

110 
c›y_size
 = 
cbuff
->
íd
 - cbuff->
ªad_±r
;

112 if(
c›y_size
 >
size
){

113 
	`mem˝y
(
buff
, 
cbuff
->
ªad_±r
, 
size
);

114 
cbuff
->
ªad_±r
 +
size
;

116 if(
c›y_size
)

117 
	`mem˝y
(
buff
, 
cbuff
->
ªad_±r
, 
c›y_size
);

118 
buff
 +
c›y_size
;

119 
c›y_size
 = 
size
 - copy_size;

120 
	`mem˝y
(
buff
, 
cbuff
->
°¨t
, 
c›y_size
);

122 
cbuff
->
ªad_±r
 = cbuff->
°¨t
 + 
c›y_size
;

126 
cbuff
->
d©a_Àn
 -
size
;

127 
cbuff
->
Êag
 &~(
FULL_FLAG
|
MUTU_FLAG
);

128 
EN_CPU_INT


129  
size
;

130 
	}
}

134 
u16
 
	$ªad_cbuff_°rög
(
c_buff_°ru˘
 *
cbuff
, *
°rög
, 
u16
 
Àn
)

136 
u16
 
size
 = 
cbuff
->
d©a_Àn
 > 
Àn
 ?Üen: cbuff->data_len;

137 
u8
 *
buff
 = 
°rög
;

138 if(
size
 == 0) {

141 if(
cbuff
->
Êag
 & 
MUTU_FLAG
){

144 
DIS_CPU_INT


145 
cbuff
->
Êag
 |
MUTU_FLAG
;

146 
Àn
 = 0;
size
--;) {

147 if(
cbuff
->
ªad_±r
 =cbuff->
íd
) {

148 
cbuff
->
ªad_±r
 = cbuff->
°¨t
;

150 
Àn
++;

151 *
buff
 = *(
cbuff
->
ªad_±r
++);

152 
cbuff
->
d©a_Àn
--;

153 
cbuff
->
Êag
 &=~
FULL_FLAG
;

154 if(*
buff
++ == '\0') {

158 
cbuff
->
Êag
 &=~
MUTU_FLAG
;

159 
EN_CPU_INT


162  
Àn
;

163 
	}
}

166 
u16
 
	$wrôe_cbuff
(
c_buff_°ru˘
 *
cbuff
, *
buf
, 
u16
 
Àn
)

168 
u16
 
size
 = 
cbuff
->
buff_Àn
 - cbuff->
d©a_Àn
;

169 
u8
 *
buff
 = 
buf
;

171 
size
 = size>
Àn
 ?Üen : size;

173 if(
size
 == 0) {

177 if(
cbuff
->
Êag
 & 
MUTU_FLAG
){

181 
DIS_CPU_INT


182 
cbuff
->
Êag
 |
MUTU_FLAG
;

184 if(
cbuff
->
wrôe_±r
 < cbuff->
ªad_±r
) {

185 
	`mem˝y
(
cbuff
->
wrôe_±r
, 
buff
, 
size
);

186 
cbuff
->
wrôe_±r
 +
size
;

188 
u16
 
c›y_size
;

189 
c›y_size
 = 
cbuff
->
íd
 - cbuff->
wrôe_±r
;

191 if(
c›y_size
 >
size
){

192 
	`mem˝y
(
cbuff
->
wrôe_±r
, 
buff
, 
size
);

193 
cbuff
->
wrôe_±r
 +
size
;

195 if(
c›y_size
)

196 
	`mem˝y
(
cbuff
->
wrôe_±r
, 
buff
, 
c›y_size
);

198 
buff
 +
c›y_size
;

199 
c›y_size
 = 
size
 - copy_size;

200 
	`mem˝y
(
cbuff
->
°¨t
, 
buff
, 
c›y_size
);

202 
cbuff
->
wrôe_±r
 = cbuff->
°¨t
 + 
c›y_size
;

205 
cbuff
->
d©a_Àn
 +
size
;

207 if(
cbuff
->
d©a_Àn
 =cbuff->
buff_Àn
) {

208 if(
cbuff
->
wrôe_±r
 !cbuff->
ªad_±r
){

209 
	`u¥ötf
("cbuffÜenÉrr");

211 
cbuff
->
Êag
 |
FULL_FLAG
;

213 
cbuff
->
Êag
 &=~
MUTU_FLAG
;

214 
EN_CPU_INT


216  
size
;

217 
	}
}

219 
u8
 
	$check_cbuff_mutu
(
c_buff_°ru˘
 *
cbuff
)

221  
cbuff
->
Êag
&
MUTU_FLAG
;

222 
	}
}

224 
	$Êush_cbuff
(
c_buff_°ru˘
 *
cbuff
)

226 if(
cbuff
->
Êag
&
MUTU_FLAG
) {

229 
cbuff
->
d©a_Àn
 = 0;

230 
cbuff
->
Êag
 &~
FULL_FLAG
;

231 
cbuff
->
ªad_±r
 = cbuff->
°¨t
;

232 
cbuff
->
wrôe_±r
 = cbuff->
°¨t
;

233 
	}
}

235 
ölöe
 
u16
 
	$gë_cbuff_d©a_size
(
c_buff_°ru˘
 *
cbuff
)

237  
cbuff
->
d©a_Àn
;

238 
	}
}

241 
ölöe
 
u16
 
	$gë_cbuff_ªmaö
(
c_buff_°ru˘
 *
cbuff
)

243  
cbuff
->
buff_Àn
 - cbuff->
d©a_Àn
;

244 
	}
}

	@cbuff/c_buff.h

1 #i‚de‡
_CBUFF_


2 
	#_CBUFF_


	)

3 
	sc_buff_°ru˘


5 
u8
 *
	mbuff
;

6 
u8
 *
	m°¨t
;

7 
u8
 *
	míd
;

8 
u8
 *
	mªad_±r
;

9 
u8
 *
	mwrôe_±r
;

10 
u16
 
	mbuff_Àn
;

11 
u16
 
	md©a_Àn
;

12 vﬁ©ûê
u8
 
	mÊag
;

13 }
	tc_buff_°ru˘
;

15 
	#FULL_FLAG
 (0x01)

	)

16 
	#MUTU_FLAG
 (0x02)

	)

18 
c_buff_°ru˘
 *
√w_cbuff
(
u16
 
size
);

19 
‰ì_cbuff
(
c_buff_°ru˘
 **
cbuff
);

20 
u16
 
ªad_cbuff
(
c_buff_°ru˘
 *
cbuff
, *
buf
, u16 
Àn
);

21 
u16
 
wrôe_cbuff
(
c_buff_°ru˘
 *
cbuff
, *
buf
, u16 
Àn
);

22 
u8
 
check_cbuff_mutu
(
c_buff_°ru˘
 *
cbuff
);

23 
Êush_cbuff
(
c_buff_°ru˘
 *
cbuff
);

24 
u16
 
gë_cbuff_ªmaö
(
c_buff_°ru˘
 *
c_buff
);

25 
u16
 
gë_cbuff_d©a_size
(
c_buff_°ru˘
 *
cbuff
);

26 
u16
 
ªad_cbuff_°rög
(
c_buff_°ru˘
 *
cbuff
, *
°rög
, u16 
Àn
);

	@chain/chain.c

1 
	~"c⁄fig.h
"

2 
	~"chaö.h
"

5 
u8
 
	$add_chaö_poöt
(
chaö_poöt
 **
chaö_hód
, *
d©a
)

7 
chaö_poöt
 *
√w_poöt
 = (chaö_poöà*)
	`mÆloc
((chain_point ));

8 if(
√w_poöt
 == 0)

12 
√w_poöt
->
d©a
 = data;

14 if(*
chaö_hód
 == 0)

16 
√w_poöt
->
¥ev
 = 0;

17 
√w_poöt
->
√xt
 = 0;

18 *
chaö_hód
 = 
√w_poöt
;

22 (*
chaö_hód
)->
√xt
) *chain_head = (*chain_head)->next;

23 
√w_poöt
->
¥ev
 = *
chaö_hód
;

24 (*
chaö_hód
)->
√xt
 = 
√w_poöt
;

27 
	}
}

30 
u8
 
	$dñ_chaö_poöt
(
chaö_poöt
 **
chaö_hód
, *
d©a
)

32 
chaö_poöt
 *
dñ_poöt
 ;

33 if(*
chaö_hód
 == 0)

38 *
chaö_hód
)

40 if((*
chaö_hód
)->
d©a
 == data)

42 
dñ_poöt
 = *
chaö_hód
;

43 if(
dñ_poöt
->
¥ev
)

45 *
chaö_hód
 = 
dñ_poöt
->
¥ev
;

46 (*
chaö_hód
)->
√xt
 = 
dñ_poöt
->next;

49 if(
dñ_poöt
->
√xt
)

51 *
chaö_hód
 = 
dñ_poöt
->
√xt
;

52 (*
chaö_hód
)->
¥ev
 = 
dñ_poöt
->prev;

55 if((
dñ_poöt
->
√xt
 =0)&&(dñ_poöt->
¥ev
))

57 *
chaö_hód
 = 0;

59 
	`‰ì
(
dñ_poöt
);

62 *
chaö_hód
 = (*chaö_hód)->
√xt
;

65 
	}
}

	@chain/chain.h

1 #i‚de‡
_CHAIN_


2 
	#_CHAIN_


	)

6 *
	m√xt
, *
	m¥ev
;

7 *
	md©a
;

8 }
	tchaö_poöt
;

10 
u8
 
add_chaö_poöt
(
chaö_poöt
 **
chaö_hód
, *
d©a
);

11 
u8
 
dñ_chaö_poöt
(
chaö_poöt
 **
chaö_hód
, *
d©a
);

	@cmd/cmd.c

12 
	~"c⁄fig.h
"

13 
	~"cmd.h
"

14 
	~"comm.h
"

15 
	~"èsk_m™age.h
"

17 #ifde‡
CMD_LINE


18 #i‚de‡
MALLOC_EN


19 
	#CMD_INPUT_MAX
 5

20 
cmd_öput_hd
 
cmd_öput_èbÀ
[
CMD_INPUT_MAX
];

	)

21 
u8
 
	gªad_func_u£_Êag
 = 0;

22 
cmd_li°
 
	gg_cmd
;

23 
	gcmd_¨g_buff
[
CMD_PARM_MAX
][
CMD_PARM_LEN
];

26 
__cmd_li°_°¨t
, 
__cmd_li°_íd
;

27 
u¨t_h™dÀ
 *
	gu¨t_hd
 = 
NULL
;

28 
cmd_öput_hd
 *
	göput_hd
 = 
NULL
;

29 
cmd_li°
 *
	gcmd
 = 
NULL
;

30 
cmd_v¨_öô
();

38 
	$c›y_œ°_cmd
(
cmd_öput_hd
 *
öput_h™dÀ
)

40 
u16
 
cur_cmd_Àn
 = 
öput_h™dÀ
->
d©a_íd_±r
;

41 *
cmd_buf„r
 = 
öput_h™dÀ
->
cmd_buff
;

42 
u16
 
cmd_∑rm_˙t
 = 0;

43 *
öput
;

45 
öput_h™dÀ
->
d©a_íd_±r
 = 0;

46 
öput
 = 
cmd
->cmd;

48 ;(*
cmd_buf„r
++ = *
öput
++) != '\0'; );

49 
cmd_buf„r
--;

50 ; 
cmd_∑rm_˙t
<
cmd
->
cmd¨g_num
; cmd_parm_cnt++){

51 *
cmd_buf„r
++ = ' ';

52 
öput
 = 
cmd
->
cmd¨g
[
cmd_∑rm_˙t
];

53 ;(*
cmd_buf„r
++ = *
öput
++) != '\0'; );

54 
cmd_buf„r
--;

56 
öput_h™dÀ
->
d©a_íd_±r
 = 
cmd_buf„r
 - i≈ut_h™dÀ->
cmd_buff
;

57 
öput_h™dÀ
->
cuº_ö_±r
 = i≈ut_h™dÀ->
d©a_íd_±r
;

59 
	`putc
('\r');

60 
cur_cmd_Àn
--){

61 
	`putc
(' ');

63 
	`u¥ötf
("\r$:");

64 
	`u¥ötf
(
öput_h™dÀ
->
cmd_buff
);

65 
	}
}

72 
	$öput_hd_√xt_cmd
(
cmd_öput_hd
 *
öput_h™dÀ
)

74 *
p_√xt_cmd_°¨t
;

75 
u32
 
cmd_Àn
;

78 
p_√xt_cmd_°¨t
 = 
öput_h™dÀ
->
cmd_buff
; (*p_next_cmd_start != '\n')&&\

79 (*
p_√xt_cmd_°¨t
 != '\r') && (*p_next_cmd_start);Ö_next_cmd_start++){

80 if(
p_√xt_cmd_°¨t
 =(
öput_h™dÀ
->
cmd_buff
 + i≈ut_h™dÀ->
d©a_íd_±r
)){

84 ; (*
p_√xt_cmd_°¨t
 == '\n')||(*p_next_cmd_start == '\r') || (*p_next_cmd_start == 0);Ö_next_cmd_start++){

85 if(
p_√xt_cmd_°¨t
 =(
öput_h™dÀ
->
cmd_buff
 + i≈ut_h™dÀ->
d©a_íd_±r
)){

89 
cmd_Àn
 = 
p_√xt_cmd_°¨t
 - 
öput_h™dÀ
->
cmd_buff
;

90 
cmd_Àn
 = 
öput_h™dÀ
->
d©a_íd_±r
 - cmd_len;

91 
	`mem˝y
(
öput_h™dÀ
->
cmd_buff
, 
p_√xt_cmd_°¨t
+1, 
cmd_Àn
);

92 
öput_h™dÀ
->
d©a_íd_±r
 = 
cmd_Àn
;

93 
öput_h™dÀ
->
cuº_ö_±r
 = 
cmd_Àn
;

94 
	}
}

101 
boﬁ
 
	$ªad_cmd
(
cmd_öput_hd
 **
öput_hd_ªt
)

103 *
cmd_buf„r
;

104 
u32
 
ªad_Àn
;

105 
buf„r
[64];

106 *
p_buf„r
;

107 
cmd_öput_hd
 *
p_öput
 = 
öput_hd
;

109 
p_öput
){

110 
cmd_buf„r
 = &
p_öput
->
cmd_buff
[p_öput->
d©a_íd_±r
];

111 
ªad_Àn
 = 
CMD_BUFF_LEN
 - 
p_öput
->
d©a_íd_±r
;

112 
ªad_Àn
 =Ñead_len > 64?64:read_len;

113 
ªad_Àn
 = 
p_öput
->
	`func
(
buf„r
,read_len);

115 if(
ªad_Àn
){

116 
c
;

117 
boﬁ
 
cmd_íd_Êag
 = 
Ál£
;

119 if(
ªad_Àn
 == 3){

120 if((
buf„r
[0] == 0x1b)&&(buffer[1] == 0x5b)){

121 if(
buf„r
[2] == 0x41){

122 
	`c›y_œ°_cmd
(
p_öput
);

123  
Ál£
;

124 }if(
buf„r
[2] == 0x43){

125 
p_öput
->
cuº_ö_±r
--;

127  
Ál£
;

128 }if(
buf„r
[2] == 0x44){

129 if(
p_öput
->
cuº_ö_±r
 <Ö_öput->
d©a_íd_±r
){

130 
p_öput
->
cuº_ö_±r
++;

131 
	`putc
(0x1b);Öutc(0x5b);Öutc(0x44);

133 
	`putc
(0x1b);Öutc(0x5b);Öutc(0x43);

135  
Ál£
;

141 
p_buf„r
 = 
buf„r
;

142 
ªad_Àn
--){

143 
c
 = *
p_buf„r
++;

145 
	`putc
(
c
);

146 if(
c
 == '\b'){

148 &
p_öput
->
cmd_buff
[p_öput->
d©a_íd_±r
], 
ªad_Àn
);

149 
p_öput
->
d©a_íd_±r
 --;

150 
	`putc
(' ');

151 
	`putc
('\b');

154 if((
c
 ='\n')||(¯='\r')||(
p_öput
->
d©a_íd_±r
 ==(
CMD_BUFF_LEN
 - 1))){

156 
cmd_íd_Êag
 = 
åue
;

158 
p_öput
->
cmd_buff
[p_öput->
d©a_íd_±r
++] = 
c
;

160 if(
cmd_íd_Êag
 =
åue
){

161 *
öput_hd_ªt
 = 
p_öput
;

162  
åue
;

165 
p_öput
 =Ö_öput->
√xt
;

167  
Ál£
;

168 
	}
}

175 
u32
 
	$cmd_°rög_™sys
(
cmd_li°
 *
cmd
, 
cmd_öput_hd
 *
öput
)

177 *
p_out
, *
p_ö
;

179 
p_out
 = 
cmd
->cmd;

180 
p_ö
 = 
öput
->
cmd_buff
;

182 
	`cmd_¥ötf
("cmdánsy†°¨àbuf‡±∏%d\n\r", 
öput
->
d©a_íd_±r
);

183 *
p_ö
 == ' ') {

184 
p_ö
++;

186 #ifde‡
MALLOC_EN


187 
cmd
->
cmd¨g_num
--){

188 
	`‰ì
(
cmd
->
cmd¨g
[cmd->
cmd¨g_num
]);

191 
cmd
->
cmd¨g_num
 = 0;

194 *
p_ö
 != ' '){

196 if((*
p_ö
 == '\r')||(*p_in == '\n')||(*p_in == 0)){

197 *
p_out
 = 0;

198 
cmd
->
cmd¨g_num
 = 0;

199 
	`cmd_¥ötf
("cmdánsysÉnd\n\r");

202 *
p_out
++ = *
p_ö
++;

203 if(((
u32
)
p_out
 >((u32)
cmd
->cmd + 
CMD_LEN
 - 1))||((u32)
p_ö
 >((u32)
öput
->
cmd_buff
 + i≈ut->
d©a_íd_±r
))) {

210 (*
p_ö
 != '\r')&&(*p_in != '\n')&&(*p_in != 0)) {

211 if(*
p_ö
 == ' '){

212 *
p_out
 = 0;

213 *
p_ö
 == ' '){

214 
p_ö
++;

216 if((*
p_ö
 == '\r')||(*p_in == '\n') || (*p_in == 0)){

220 
cmd
->
cmd¨g_num
++;

221 if(
cmd
->
cmd¨g_num
 =
CMD_PARM_MAX
){

224 #ifde‡
MALLOC_EN


225 
cmd
->
cmd¨g
[cmd->
cmd¨g_num
 - 1] =(*)
	`mÆloc
(
CMD_PARM_LEN
);

228 
p_out
 = 
cmd
->
cmd¨g
[cmd->
cmd¨g_num
 - 1];

230 *
p_out
++ = *
p_ö
++;

231 if(
p_out
 - 
cmd
->
cmd¨g
[cmd->
cmd¨g_num
 - 1] >
CMD_PARM_LEN
 - 1){

235 if(
p_ö
 >(
öput
->
cmd_buff
 + i≈ut->
d©a_íd_±r
)){

239 *
p_out
 = 0;

241 
	}
}

248 
u32
 
	$cmd_dól
(
cmd_li°
 *
cmd
)

250 
u8
 
ªs
 = 0;

251 
cmd_h™dÀ
 *
cmd_èbÀ
 = (cmd_h™dÀ *)&
__cmd_li°_°¨t
;

254 ; (*)
cmd_èbÀ
<(*)&
__cmd_li°_íd
; cmd_table++) {

255 if(
	`cmdcmp
(
cmd
->cmd, 
cmd_èbÀ
->cmd) == 0) {

256 
	`cmd_¥ötf
("cmd:%s/%s\n\r", 
cmd
->cmd, 
cmd_èbÀ
->cmd);

257 
ªs
 = 
cmd_èbÀ
->
	`cmd_fun˘i⁄
(
cmd
->
cmd¨g
, cmd->
cmd¨g_num
);

258 if(0 =
ªs
) {

259 
	`cmd_¥ötf
("run cmd success\n\r");

262 
	`cmd_¥ötf
("ru¿cmdÉº:%d\n\r", 
ªs
);

266  
ªs
;

267 
	}
}

277 
u8
 
	$ªad_cmd
(
cmd_li°
 *
cmd
)

279 
cmd_buff
[80];

280 *
p_ö
 = 0, *
p_out
;

282 if(
cmd
->cmd){

285 if(
u¨t_hd
->
io
.
	`ªad
(
cmd_buff
, (cmd_buff))) {

286 
cmd_h™dÀ
:

287 
cmd
->cmd = (*)
	`mÆloc
(30);

288 if(!
cmd
->cmd) {

291 
	`cmd_¥ötf
("cmd buff:%s\n\r", 
cmd_buff
);

292 
p_ö
 = 
cmd
->cmd;

293 
p_out
 = 
cmd_buff
;

295 *
p_out
 != ' '){

296 if((*
p_out
 == '\r')||(*p_out == '\n')||(*p_out == 0)){

297 *
p_ö
 = 0;

298 
cmd
->
cmd¨g_num
 = 0;

301 *
p_ö
++ = *
p_out
++;

302 if(
p_ö
 >(
cmd
->cmd + 30)) {

307 
cmd
->
cmd¨g
 = (**)
	`mÆloc
((**)*20);

308 if(
cmd
->
cmd¨g
 == 0) {

312 (*
p_out
 != '\r')&&(*p_out != '\n')&&(*p_out != 0)) {

313 if(*
p_out
 == ' '){

314 *
p_ö
 = 0;

315 *
p_out
 == ' '){

316 
p_out
++;

318 
cmd
->
cmd¨g_num
++;

320 
cmd
->
cmd¨g
[cmd->
cmd¨g_num
 - 1] = (*)
	`mÆloc
(50);

321 if(
cmd
->
cmd¨g
[cmd->
cmd¨g_num
 - 1] == 0) {

324 
p_ö
 = 
cmd
->
cmd¨g
[cmd->
cmd¨g_num
 - 1];

326 *
p_ö
++ = *
p_out
++;

329 *
p_ö
 = 0;

334 
	}
}

343 
u8
 
	$cmd_™sys
(
cmd_li°
 *
cmd
)

345 
u8
 
i
;

346 
u8
 
ªs
 = 0;

347 
cmd_h™dÀ
 *
cmd_èbÀ
 = (cmd_h™dÀ *)&
__cmd_li°_°¨t
;

349 if(
cmd
->cmd == 0) {

352 ; (*)
cmd_èbÀ
<(*)&
__cmd_li°_íd
; cmd_table++) {

353 if(
	`cmdcmp
(
cmd
->cmd, 
cmd_èbÀ
->cmd) == 0) {

354 
	`cmd_¥ötf
("cmd:%s/%s\n\r", 
cmd
->cmd, 
cmd_èbÀ
->cmd);

355 
ªs
 = 
cmd_èbÀ
->
	`cmd_fun˘i⁄
(
cmd
->
cmd¨g
, cmd->
cmd¨g_num
);

356 if(0 =
ªs
) {

357 
	`cmd_¥ötf
("run cmd success\n\r");

360 
	`cmd_¥ötf
("ru¿cmdÉº:%d\n\r", 
ªs
);

365 
cmd
->
cmd¨g_num
--) {

366 
	`‰ì
(
cmd
->
cmd¨g
[cmd->
cmd¨g_num
]);

368 
	`‰ì
(
cmd
->
cmd¨g
);

369 
cmd
->
cmd¨g
 = 0;

370 
	`‰ì
(
cmd
->cmd);

371 
cmd
->cmd =0;

372 
cmd
->
cmd¨g_num
 = 0;

373  
ªs
;

374 
	}
}

383 
u8
 
	$cmdcmp
(c⁄° *
°r1
, c⁄° *
°r2
)

386 if(*
°r1
 !*
°r2
) {

389 if(*
°r1
 == '\0') {

392 
°r1
++;

393 
°r2
++;

396 
	}
}

397 
	$cmd_v¨_öô
()

399 #ifde‡
MALLOC_EN


400 
cmd
 = (
cmd_li°
 *)
	`mÆloc
((cmd_list));

401 if(
cmd
 =
NULL
){

402 
	`u¥ötf
("mallocÉrr\n\r");

405 
u8
 
¨g˙t
 = 0;

406 
cmd
 = &
g_cmd
;

407 ; 
¨g˙t
<
CMD_PARM_MAX
;árgcnt++){

408 
cmd
->
cmd¨g
[
¨g˙t
] = 
cmd_¨g_buff
[argcnt];

411 
cmd
->
cmd¨g_num
 = 0;

412 
	}
}

414 
	$cmd_löe_öô
()

416 
	`cmd_v¨_öô
();

417 
u¨t_hd
 = 
	`gë_u¨t_hd
(
UART0_SERIAL
);

418 if(
u¨t_hd
 =
NULL
)

422 
	`ªgi°î_cmd_ö_func
(
u¨t_hd
->
io
.
ªad
);

423 
	}
}

425 
	$cmd_löe_exô
()

427 
cmd_öput_hd
 *
öput_hd_lök
, *
‰ì_lök
;

428 
öput_hd_lök
 = 
öput_hd
;

429 #ifde‡
MALLOC_EN


430 
öput_hd_lök
) {

431 
‰ì_lök
 = 
öput_hd_lök
;

432 
öput_hd_lök
 = i≈ut_hd_lök->
√xt
;

434 
	`‰ì
(
‰ì_lök
);

437 
ªad_func_u£_Êag
 = 0;

439 
öput_hd
 = 
NULL
;

440 
	}
}

442 
boﬁ
 
ªgi°î_cmd_ö_func
(
	$u32
 (*
öput_func
)(*, 
u32
))

444 
cmd_öput_hd
 *
√w_lök
 = 0;

445 #ifde‡
MALLOC_EN


446 
√w_lök
 = (
cmd_öput_hd
 *)
	`mÆloc
((cmd_input_hd));

447 if(
√w_lök
 =
NULL
){

448 
	`cmd_¥ötf
("mallocÉrr");

449  
Ál£
;

459 
u8
 
èbÀ_ödex
;

460 
èbÀ_ödex
 = 0;ÅabÀ_ödex<(
ªad_func_èbÀ
)/(
cmd_öput_hd
);Åable_index++){

461 if(
ªad_func_u£_Êag
 & 
	`BIT
(
èbÀ_ödex
) == 0){

462 
√w_lök
 = &
ªad_func_èbÀ
[
èbÀ_ödex
];

464 
ªad_func_u£_Êag
 |
	`BIT
(
èbÀ_ödex
);

467 if(
√w_lök
 == 0){

468 
	`cmd_¥ötf
("maxÑead func\n\r");

469  
Ál£
;

472 
√w_lök
->
func
 = 
öput_func
;

473 
√w_lök
->
√xt
 = 
NULL
;

474 
√w_lök
->
d©a_íd_±r
 = 0;

475 
√w_lök
->
cuº_ö_±r
 = 0;

476 if(
öput_hd
 =
NULL
){

477 
öput_hd
 = 
√w_lök
;

479 
cmd_öput_hd
 *
lök_èû
;

480 
lök_èû
 = 
öput_hd
;

481 
lök_èû
->
√xt
){

482 
lök_èû
 =Üök_èû->
√xt
;

484 
lök_èû
->
√xt
 = 
√w_lök
;

486  
åue
;

487 
	}
}

499 
u8
 
	$cmd_èsk
(*
p
)

501 
cmd_öput_hd
 *
cmd_löe_öput
 = 
NULL
;

504 if(
	`ªad_cmd
(&
cmd_löe_öput
Ë=
åue
){

505 
u32
 
ªt
;

506 
	`u¥ötf
("\n\r");

507 
ªt
 = 
	`cmd_°rög_™sys
(
cmd
, 
cmd_löe_öput
);

508 
	`öput_hd_√xt_cmd
(
cmd_löe_öput
);

509 if(
ªt
 == 0){

510 
	`cmd_dól
(
cmd
);

512 
	`cmd_¥ötf
("ansys cmd stringÉrr");

514 
	`u¥ötf
("\n\r$:");

517 
	}
}

519 
u8
 
	$cmd_èsk_öô
()

521 
	`cmd_löe_öô
();

523 
	}
}

525 
u8
 
	$cmd_èsk_exô
()

527 
	`cmd_löe_exô
();

528 
	}
}

529 c⁄° 
èsk_ls
 
	gcmd_èsk_ls
 =

531 .
«me
 = "cmd_task",

532 .
	gèsk_func
 = 
cmd_èsk
,

533 .
	gèsk_öô
 = 
cmd_èsk_öô
,

534 .
	gèsk_exô
 = 
cmd_èsk_exô
,

535 .
	gq_msg
 = 0,

	@cmd/cmd.h

1 #i‚de‡
_CMD_


2 
	#_CMD_


	)

3 
	#CMD_SECTION
 
	`__©åibuã__
((
	`£˘i⁄
(".cmd_li°")))

	)

5 
	#CMD_DEBUG


	)

6 #ifde‡
CMD_DEBUG


7 
	#cmd_¥ötf
 
u¥ötf


	)

9 
	#cmd_¥ötf
(...)

	)

12 
	#CMD_BUFF_LEN
 128

13 
	#CMD_LEN
 32

14 
	#CMD_PARM_LEN
 64

15 
	#CMD_PARM_MAX
 5

16 
	scmd_li°


	)

18 
	mcmd
[
CMD_LEN
];

19 *
	mcmd¨g
[
CMD_PARM_MAX
];

20 
u8
 
	mcmd¨g_num
;

21 }
	tcmd_li°
;

23 
	scmd_h™dÀ


25 *
	mcmd
;

26 
u8
 (*
cmd_fun˘i⁄
)(**, );

27 *
	mcmd_hñp
;

28 }
	tcmd_h™dÀ
;

30 
	s_cmd_öput_hd


32 
u32
 (*
func
)(*, 
	mu32
);

33 
_cmd_öput_hd
 *
	m√xt
;

34 
	mcmd_buff
[
CMD_BUFF_LEN
];

36 
u16
 
	md©a_íd_±r
;

37 
u16
 
	mcuº_ö_±r
;

38 }
	tcmd_öput_hd
;

40 
u8
 
cmdcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

41 
cmd_löe_öô
();

42 
cmd_löe_exô
();

43 
boﬁ
 
ªgi°î_cmd_ö_func
(
	$u32
 (*
öput_func
)(*, 
u32
));

44 
	`öput_hd_√xt_cmd
(
cmd_öput_hd
 *
öput_h™dÀ
);

45 
boﬁ
 
	`ªad_cmd
(
cmd_öput_hd
 **
öput_hd_ªt
);

46 
u32
 
	`cmd_°rög_™sys
(
cmd_li°
 *
cmd
, 
cmd_öput_hd
 *
öput
);

47 
u32
 
	`cmd_dól
(
cmd_li°
 *
cmd
);

49 
	#REGISTER_CMD
(
«me
, 
func
, 
öfo
Ë
cmd_h™dÀ
 
cmd_
##«mê
CMD_SECTION
\

	)

50 {#«me, 
func
, 
öfo
}

	@cmd/cmd_common.c

12 
	~"c⁄fig.h
"

13 
	~"cmd_comm⁄.h
"

14 #ifde‡
CMD_LINE


15 
__cmd_li°_°¨t
, 
__cmd_li°_íd
;

18 
u8
 
hñp_cmd
(**
¨g
, 
¨g_num
);

19 
u8
 
ªboŸ_cmd
(**
¨g
, 
¨g_num
);

20 
u8
 
ªadªg_cmd
(**
¨g
, 
¨g_num
);

21 
CMD_SECTION


22 c⁄° 
cmd_h™dÀ
 
	gcmd_h™dÀr
[] =

24 {"hñp", 
hñp_cmd
, " ÊâìÂç∞Â∏ÆÂä©‰ø°ÊÅØ {ÂëΩ‰ª§}"},

25 {"ªboŸ", 
ªboŸ_cmd
, "ÈáçÂêØÁ≥ªÁªü {ÂëΩ‰ª§}"},

26 {"ªadªg", 
ªadªg_cmd
, "ËØªÂèñÂØÑÂ≠òÂô®ÁöÑÂÄº {ÂëΩ‰ª§ [ÂØÑÂ≠òÂô®Âú∞ÂùÄ]}"},

37 
u8
 
	$hñp_cmd
(**
¨g
, 
¨g_num
)

39 
cmd_h™dÀ
 *
cmd_èbÀ
 = &
__cmd_li°_°¨t
;

40 
u16
 
cmd_˙t
;

41 if(
¨g_num
 != 0)

45 
cmd_˙t
 = 0; (*)
cmd_èbÀ
<(*)&
__cmd_li°_íd
;cmd_cnt++, cmd_table++)

47 
	`cmd_¥ötf
("\n\r%d:%s %s",
cmd_˙t
, 
cmd_èbÀ
->
cmd
, cmd_èbÀ->
cmd_hñp
);

50 
	}
}

52 
u8
 
	$ªboŸ_cmd
(**
¨g
, 
¨g_num
)

54 
u8
 
i
;

55 (*
boŸ
)() = (*)0;

57 if(
¨g_num
 != 0)

62 
	`boŸ
();

64 
	}
}

66 
u8
 
	$ªadªg_cmd
(**
¨g
, 
¨g_num
)

68 
u8
 
i
;

69 vﬁ©ûê
u32
 *
ªg
 = (vﬁ©ûêu32 *)
	`hex_to_öt
(
¨g
[0]);

71 if(
¨g_num
 != 1)

76 
	`¥ötf_u32
((
u32
)
ªg
);

77 
	`cmd_¥ötf
("reg vlue:");

78 
	`¥ötf_u32
(*
ªg
);

79 
	`¥ötf_bö
(*
ªg
);

81 
	}
}

	@cmd/cmd_common.h

1 #i‚de‡
_CMD_COMM_


2 
	#_CMD_COM_


	)

3 
	~"cmd.h
"

	@comm/comm.c

1 
	~"c⁄fig.h
"

10 
	$°r_to_öt
(c⁄° *
°r
)

12 
u32
 
num
;

13 
num
 = *
°r
 - '0';

14 *++
°r
)

16 if((*
°r
<'0')||(*str>'9'))

20 
num
 =Çum*10 + *
°r
 - '0';

22  
num
;

23 
	}
}

31 
	$°r_to_doubÀ
(c⁄° *
°r
)

33 
d©a
 = 0.0, 
ÊaŸ_Êag
 = 0.1;

34 
u8
 
öt_Êag
 = 0;

35 *
°r
)

37 if(*
°r
 == '.')

39 
öt_Êag
 = 1;

41 if((*
°r
<= '9')&&(*str >= '0'))

43 if(
öt_Êag
 == 0)

45 
d©a
 = d©a*10.0 + ()(*
°r
 - '0');

49 
d©a
 = d©®+ ()(*
°r
 - '0')*
ÊaŸ_Êag
;

50 
ÊaŸ_Êag
 = flaot_flag*0.1;

57 
°r
++;

59  
d©a
;

60 
	}
}

68 *
	$˝°r_u¡û
(*
°r_o
, c⁄° *
°r_i
, c⁄° 
cmpch¨
)

70 (*
°r_i
 !
cmpch¨
)&&(*str_i))

72 *
°r_o
++ = *
°r_i
++;

74 *
°r_o
 = 0;

75  (*)
°r_i
;

76 
	}
}

77 
	$dñay
(
u32
 
time
)

79 
u16
 
i
;

80 
time
--)

82 
i
=0; i<3000; i++)

85 
	}
}

87 
	$hex_to_öt
(c⁄° *
°r
)

89 
u32
 
num
 = 0;

91 (*
°r
 != 'x') && (*str != 'X'))

93 
°r
++;

94 if(*
°r
 == 0)

99 
°r
++;

100 *
°r
 != 0)

102 
num
 *= 16;

103 if((*
°r
 >= '0')&&(*str <= '9'))

105 
num
 +*
°r
 - '0';

107 if((*
°r
 >= 'a')&&(*str <= 'f'))

109 
num
 +*
°r
 - 'a' + 10;

111 if((*
°r
 >= 'A')&&(*str <= 'F'))

113 
num
 +*
°r
 - 'A' + 10;

115 
°r
++;

117  
num
;

118 
	}
}

121 
u32
 
	$gë_bô_vÆue
(*
ö_vœue
, 
u16
 
bô
, 
u8
 
num
)

123 
u8
 *
p
 = 
ö_vœue
;

124 
u32
 
ãmp
;

125 
u8
 
˙t
, 
Àn
;

126 
u32
 
ªtu∫_vÆue
 = 0;

129 if(
num
 > 32 )

133 
bô
>7)

135 
bô
 -= 8;

136 
p
++;

139 
˙t
 = 0;

140 
num
)

143 if(
num
>(8-
bô
))

145 
Àn
 = 8-
bô
;

149 
Àn
 = 
num
;

153 
ãmp
 = (*
p
++)>> 
bô
;

155 if(
Àn
)

157 
ãmp
 &(0x01<<
Àn
)-1;

159 
ãmp
 <<
˙t
;

161 
ªtu∫_vÆue
 |
ãmp
;

162 
bô
 -= bit;

163 
num
 -
Àn
;

164 
˙t
 +
Àn
;

168  
ªtu∫_vÆue
;

169 
	}
}

171 
u32
 
	$be_to_À_u32
(*
¥t
, 
u32
 
w‹d
)

173 
u32
 
ˇche
;

174 
u8
 *
p1
 = (u8 *)&
w‹d
;

175 
u8
 *
p2
 = (u8 *)&
ˇche
;

177 if(
¥t
)

179 
p1
 = 
¥t
;

182 
p2
[0] = 
p1
[3];

183 
p2
[1] = 
p1
[2];

184 
p2
[2] = 
p1
[1];

185 
p2
[3] = 
p1
[0];

186  
ˇche
;

187 
	}
}

189 
u16
 
	$be_to_À_u16
(*
¥t
, 
u16
 
w‹d
)

191 
u16
 
ˇche
;

192 
u8
 *
p1
 = (u8 *)&
w‹d
;

193 
u8
 *
p2
 = (u8 *)&
ˇche
;

195 if(
¥t
)

197 
p1
 = 
¥t
;

200 
p2
[0] = 
p1
[1];

201 
p2
[1] = 
p1
[0];

203  
ˇche
;

204 
	}
}

206 
u8
 
	$cmp_°r
(c⁄° *
°r_1
, c⁄° *
°r_2
)

210 if(*
°r_1
 !*
°r_2
)

214 if(*
°r_1
 == 0)

218 
°r_1
++;

219 
°r_2
++;

221 
	}
}

	@comm/comm.h

1 #i‚de‡
_COMM_


2 
	#_COMM_


	)

4 
	#PCLK
 50000000L

	)

6 
	tboﬁ
, 
	tu8
;

7 
	tu32
;

8 
	tu16
 ;

9 vﬁ©ûê
	tªg32
;

10 vﬁ©ûê
	tªg16
;

11 vﬁ©ûê
	tªg8
;

12 
	ts8
;

13 
	ts16
;

14 
	tS32
;

16 
	#CLCKCON
 *(vﬁ©ûê*)0x4C00000C

	)

17 
	#BIT
(
x
Ë(0x01<<x)

	)

18 
	#MAX
(
a
,
b
Ë(◊)>(b)?◊):(b))

	)

19 
	#MIN
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

20 
	#NULL
 (*)0

	)

22 
dñay
(
u32
 
time
);

23 *
˝°r_u¡û
(*
°r_o
, c⁄° *
°r_i
, c⁄° 
cmpch¨
);

24 
°r_to_öt
(c⁄° *
°r
);

25 
°r_to_doubÀ
(c⁄° *
°r
);

26 
hex_to_öt
(c⁄° *
°r
);

27 
u32
 
gë_bô_vÆue
(*
ö_vœue
, 
u16
 
bô
, 
u8
 
num
);

28 
u32
 
be_to_À_u32
(*
¥t
,u32 
w‹d
);

29 
u16
 
be_to_À_u16
(*
¥t
,u16 
w‹d
);

30 
u8
 
cmp_°r
(c⁄° *
°r_1
, c⁄° *
°r_2
);

	@comm/config.h

1 #i‚de‡
_CONFIG_


2 
	#_CONFIG_


	)

3 
	~"comm.h
"

4 
	~"s3c2440_¥ötf.h
"

5 
	~"my_mÆloc.h
"

6 
	~"úq.h
"

7 
	#MALLOC_EN


8 
	#PRINT_SERIAL
 
UART0_SERIAL


9 
	#DEBUG


10 
	#BOOT_START


11 
	#CMD_LINE


12 

	)

14 #ifde‡
MALLOC_EN


15 
	#_MY_MALLOC
 1

16 

	)

17 #i‡
_MY_MALLOC


18 
	#mÆloc
 
my_mÆloc


	)

19 
	#‰ì
 
my_‰ì


	)

20 
	#MEM_MAX
 (0x20000)

	)

24 
	#NULL
 (*)0

	)

25 
	#TRUE
 1

	)

26 
	#FALSE
 0

	)

27 
	#åue
 1

	)

28 
	#Ál£
 0

	)

	@comm/msg.h

1 #i‚de‡
_MSG_


2 
	#_MSG_


	)

5 
	mNO_MSG
 = 0x00,

6 
	mCBW_CMD_ARRIVAL
,

7 
	mREAD_SD
,

8 
	mWRITE_SD
,

	@comm/sys.c

1 
	~"c⁄fig.h
"

2 
__bss_°¨t
, 
__bss_íd
;

3 
	$˛ón_bss
()

5 
u8
 *
bss
 =& 
__bss_°¨t
;

6 ; 
bss
<&
__bss_íd
;*bss++ = 0);

7 
	}
}

9 
u8
 
	gmem_buff
[
MEM_MAX
];

10 
	$sys_öô
()

12 
	`˛ón_bss
();

13 
	`öô_mem_Æloc
(
mem_buff
, (mem_buff));

14 
	}
}

	@comm/sys.h

1 #i‚de‡
_SYS_


2 
	#_SYS_


	)

4 
˛ón_bss
();

	@cpu/irq.c

1 
	~"c⁄fig.h
"

2 
	~"S3C2440.H
"

3 
	~"úq.h
"

5 #ifde‡
BOOT_START


6 
öt_i§_func
 *
	gi§_h™dÀ_¨øy
 = (int_isr_func)0x33fb06b0;

11 
ªgi°î_úq
(
u32
 
ödex
, u32 
sub_ödex
,(*
i§
)())

13 
INTMSK
 &~
	`BIT
(
ödex
);

14 
INTSUBMSK
 &~
sub_ödex
;

15 
i§_h™dÀ_¨øy
[
ödex
] = 
i§
;

16 
	}
}

18 
ölöe
 
	$dißbÀ_úq
(
u32
 
ödex
)

20 
INTMSK
 |
	`BIT
(
ödex
);

21 
	}
}

23 
ölöe
 
	$íabÀ_úq
(
u32
 
ödex
)

25 
INTMSK
 &~
	`BIT
(
ödex
);

26 
	}
}

28 
	$íabÀ_˝u_öt
()

32 
__asm__
 volatile("mrsÑ1, cpsr");

33 
__asm__
 volatile("msr cpsr_c, #0xd3");

34 
__asm__
 volatile("bicÑ1,Ñ1, #0x80");

43 
	}
}

45 
	$dißbÀ_˝u_öt
()

48 
__asm__
 volatile("mrsÑ1, cpsr");

51 
__asm__
 volatile("orrÑ1,Ñ1, #0x80");

53 
	}
}

	@cpu/irq.h

1 #i‚de‡
_INTRUPT_


2 
	#_INTRUPT_


	)

4 
	#INT_EINT0
 ( 0)

	)

5 
	#INT_EINT1
 ( 1)

	)

6 
	#INT_EINT2
 ( 2)

	)

7 
	#INT_EINT3
 ( 3)

	)

8 
	#INT_EINT4_7
 ( 4)

	)

9 
	#INT_EINT8_23
 ( 5)

	)

10 
	#INT_CAM
 ( 6)

	)

11 
	#INT_nBAT_FLT
 ( 7)

	)

12 
	#INT_TICK
 ( 8)

	)

13 
	#INT_WDT_AC97
 ( 9)

	)

14 
	#INT_TIMER0
 (10)

	)

15 
	#INT_TIMER1
 (11)

	)

16 
	#INT_TIMER2
 (12)

	)

17 
	#INT_TIMER3
 (13)

	)

18 
	#INT_TIMER4
 (14)

	)

19 
	#INT_UART2
 (15)

	)

20 
	#INT_LCD
 (16)

	)

21 
	#INT_DMA0
 (17)

	)

22 
	#INT_DMA1
 (18)

	)

23 
	#INT_DMA2
 (19)

	)

24 
	#INT_DMA3
 (20)

	)

25 
	#INT_SDI
 (21)

	)

26 
	#INT_SPI0
 (22)

	)

27 
	#INT_UART1
 (23)

	)

28 
	#INT_NFCON
 (24)

	)

29 
	#INT_USBD
 (25)

	)

30 
	#INT_USBH
 (26)

	)

31 
	#INT_IIC
 (27)

	)

32 
	#INT_UART0
 (28)

	)

33 
	#INT_SPI1
 (29)

	)

34 
	#INT_RTC
 (30)

	)

35 
	#INT_ADC
 (31)

	)

37 
	#INT_SUB_RXD0
 (1 << 0)

	)

38 
	#INT_SUB_TXD0
 (1 << 1)

	)

39 
	#INT_SUB_ERR0
 (1 << 2)

	)

40 
	#INT_SUB_RXD1
 (1 << 3)

	)

41 
	#INT_SUB_TXD1
 (1 << 4)

	)

42 
	#INT_SUB_ERR1
 (1 << 5)

	)

43 
	#INT_SUB_RXD2
 (1 << 6)

	)

44 
	#INT_SUB_TXD2
 (1 << 7)

	)

45 
	#INT_SUB_ERR2
 (1 << 8)

	)

46 
	#INT_SUB_TC
 (1 << 9)

	)

47 
	#INT_SUB_ADC_S
 (1 << 10)

	)

48 
	#INT_SUB_CAM_C
 (1 << 11)

	)

49 
	#INT_SUB_CAM_P
 (1 << 12)

	)

50 
	#INT_SUB_WDT
 (1 << 13)

	)

51 
	#INT_SUB_AC97
 (1 << 14)

	)

52 
	#INT_SUB_ALLMSK
 (0x000007FF)

	)

54 
	#CÀ¨Pídög
(
bô
Ë{ 
SRCPND
 = 
	`BIT
(bit); \

55 
INTPND
 = INTPND; }

	)

56 
	#CÀ¨SubPídög
(
bô
Ë{
SUBSRCPND
 = bô;}

	)

57 
	#DIS_CPU_INT


58 
	#EN_CPU_INT


59 (*
	töt_i§_func
)();

	)

62 
ªgi°î_úq
(
u32
 
ödex
, u32 
sub_ödex
,(*
i§
)());

63 
ölöe
 
	`dißbÀ_úq
(
u32
 
ödex
);

64 
ölöe
 
	`íabÀ_úq
(
u32
 
ödex
);

65 
	`dißbÀ_˝u_öt
();

66 
	`íabÀ_˝u_öt
();

	@dev_manage/dev_manage.c

1 
	~"c⁄fig.h
"

2 
	~"dev_m™age.h
"

3 
	~"dev_m™age_≠i.h
"

4 
	~"c_buff.h
"

6 #i‡(
USE_MALLOC
 == 1)

8 
dev_hd
 *
	gdev_hd_group
 = 
NULL
;

10 
dev_hd
 
	gdev_hd_group
[
MAX_DEV
];

13 #i‡
EVENT_CALLBACK


14 
	gsys_msg_poﬁ
[
MSG_POOL_SIZE
];

15 
dev_msg_°ru˘
 
	gdev_sys_msg
;

16 
dev_msg_poﬁ_öô
(
dev_msg_°ru˘
 *
dev_msg
, *
poﬁ_buf„r
, 
buf„r_Àn
);

17 #i‡!
USE_MALLOC


18 
	gmsg_poﬁ_group
[
MAX_DEV
][
MSG_POOL_SIZE
];

21 
boŸ_m⁄ut_dev
();

29 
	$dev_m™age_öô
()

31 #i‡(
USE_MALLOC
 == 1)

32 
dev_hd_group
 = (
dev_hd
 *)
	`mÆloc
((dev_hd)*
MAX_DEV
);

33 if(
dev_hd_group
 =
NULL
)

34  
ALLOC_ERR
;

36 
	`mem£t
(
dev_hd_group
, 0x00, (
dev_hd
)*
MAX_DEV
);

38 #i‡
EVENT_CALLBACK


39 
	`dev_msg_poﬁ_öô
(&
dev_sys_msg
, (*)
sys_msg_poﬁ
, (sys_msg_pool));

41 
	`boŸ_m⁄ut_dev
();

43 
	}
}

51 
	$gë_avaû_maj‹
()

53 
maj‹
;

54 
maj‹
 = 0; maj‹<
MAX_DEV
; major++)

56 if(
dev_hd_group
[
maj‹
].
dev_io
 =
NULL
)

58  
maj‹
;

62 
	}
}

70 
	$dev_mou¡
(
dev_io
 *
io
, 
maj‹
, *
∑rm
)

72 
ªs
;

74 if(
dev_hd_group
[
maj‹
].
dev_io
)

75  
MAJOR_ERR
;

77 
ªs
 = 
io
->
	`mou¡
(
maj‹
, 0);

78 
	`dev_¥ötf
("iÿmou¡ %d\n\r", 
ªs
);

79 if(!
ªs
)

81 *
msg_poﬁ
;

82 
dev_hd
 *
dev
 = &
dev_hd_group
[
maj‹
];

83 #i‡
EVENT_CALLBACK


84 #i‡
USE_MALLOC


85 
msg_poﬁ
 = (*)
	`mÆloc
(()*
MSG_POOL_SIZE
);

86 if(
msg_poﬁ
 =
NULL
)

87  
ALLOC_ERR
;

89 
msg_poﬁ
 = &
msg_poﬁ_group
[
maj‹
];

91 
	`dev_msg_poﬁ_öô
(&(
dev
->
dev_msg
), (*)
msg_poﬁ
, ()*
MSG_POOL_SIZE
);

93 
dev
->
dev_io
 = (*)
io
;

94 
dev
->
dev_maj‹
 = 
maj‹
;

95 
dev
->
mutu
 = 0;

97  
ªs
;

98 
	}
}

106 
	$dev_umou¡
(
dev_io
 *
io
, 
maj‹
)

108 
ªs
;

109 
ªs
 = 
io
->
	`umou¡
();

110 if(!
ªs
)

112 
dev_hd
 *
dev
 = &
dev_hd_group
[
maj‹
];

113 #i‡
EVENT_CALLBACK


114 #i‡
USE_MALLOC


115 
	`‰ì
(
dev
->
dev_msg
.
poﬁ_°¨t
);

117 
	`mem£t
(
dev
->
dev_msg
.
poﬁ_°¨t
, 0x00, ()*
MSG_POOL_SIZE
);

120 if(
dev
->
r_buff
)

121 
	`‰ì_cbuff
(
dev
->
r_buff
);

123 
	`mem£t
(
dev
, 0x00, (
dev_hd
));

125 
	}
}

127 
	$dev_›í
(
dev_hd
 **
hd
, c⁄° *
dev_«me
)

129 
dev_hd
 *
hd_±r
 = 
dev_hd_group
;

130 ; (
hd_±r
 - 
dev_hd_group
)/(
dev_hd
Ë< 
MAX_DEV
; hd_ptr++)

132 
	`dev_¥ötf
("hd_±r: %x\n\r", 
hd_±r
);

133 if(
hd_±r
->
dev_io
)

135 
	`dev_¥ötf
("li° devÇame:%s\n\r", ((
dev_io
 *)
hd_±r
->dev_io)->
dev_«me
);

136 if(
	`°rcmp
(
dev_«me
, ((
dev_io
 *)
hd_±r
->dev_io)->dev_name) == 0)

138 
	`dev_¥ötf
("dev open success\n\r");

139 *
hd
 = 
hd_±r
;

144 *
hd
 = 
NULL
;

146 
	}
}

148 
	$gë_hd_by_moj‹
(
maj‹
)

151 
	}
}

153 
_dev_li°_°¨t
, 
_dev_li°_íd
;

154 
dev_io
 *
	$gë_dev_io_by«me
(c⁄° *
dev_«me
)

156 
dev_io
 *
dev_li°_±r
 = &
_dev_li°_°¨t
;

157 ; 
dev_li°_±r
 <&
_dev_li°_íd
; dev_list_ptr++)

159 if(
	`°rcmp
(
dev_li°_±r
->
dev_«me
, dev_name) == 0)

161  
dev_li°_±r
;

165  
NULL
;

166 
	}
}

168 
	$boŸ_m⁄ut_dev
()

170 
dev_io
 *
dev_li°_±r
 = &
_dev_li°_°¨t
;

171 ; 
dev_li°_±r
 <&
_dev_li°_íd
; dev_list_ptr++)

173 
	`dev_¥ötf
("mou¡ dev:%x\n\r", 
dev_li°_±r
);

174 if(
dev_li°_±r
->
boŸ_m⁄ut
 == 1)

176 if(
dev_li°_±r
->
mou¡
)

178 
maj‹
;

179 
ªs
;

180 
maj‹
 = 
	`gë_avaû_maj‹
();

181 if(
maj‹
 == 0xffff)

183 if(
	`dev_mou¡
(
dev_li°_±r
, 
maj‹
, 0) == 0)

184 
	`dev_¥ötf
("mou¡ %†suc˚ss\n\r", 
dev_li°_±r
->
dev_«me
);

188 
	}
}

190 
	$dev_m™age_ªad_ˇŒback
(
maj‹
, *
buf„r
, 
buf„r_Àn
)

192 if(
maj‹
 >
MAX_DEV
)

193  
CROSS_BORDER
;

195 if(
buf„r_Àn
 == 0)

198 if(
dev_hd_group
[
maj‹
].
dev_io
 =
NULL
)

199  
PTR_NULL
;

201 if(
dev_hd_group
[
maj‹
].
r_buff
 =
NULL
)

203 
dev_hd_group
[
maj‹
].
r_buff
 = (*)
	`√w_cbuff
(
R_BUFF_MAX
);

204 if(
dev_hd_group
[
maj‹
].
r_buff
 =
NULL
)

205  
PTR_NULL
;

208 
c_buff_°ru˘
 *
cbuff
 = (c_buff_°ru˘ *)
dev_hd_group
[
maj‹
].
r_buff
;

209 
ªmaö_size
 = 
	`gë_cbuff_ªmaö
(
cbuff
);

210 if(
ªmaö_size
 < 
buf„r_Àn
)

211  
BUFF_LACK
;

213 
buf„r_Àn
 = 
	`wrôe_cbuff
(
cbuff
, 
buf„r
, buffer_len);

214 #i‡
EVENT_CALLBACK


215 
	`po°_dev_mg_msg
(
DATA_COMING
, 
maj‹
, 
buf„r_Àn
);

219 
	}
}

221 
	$gë_dev_msg
(
dev_hd
 *
hd
, *
evít
, *
d©a
)

223 #i‡
EVENT_CALLBACK


224 if(
hd
 =
NULL
)

225  
PTR_NULL
;

227 if(
hd
->
dev_msg
.
msg_˙t
)

229 
DIS_CPU_INT


230 if(
evít
)

231 *
evít
 = *(
hd
->
dev_msg
.
ªad_±r
++);

232 if(
d©a
)

233 *
d©a
 = *(
hd
->
dev_msg
.
ªad_±r
++);

234 
hd
->
dev_msg
.
msg_˙t
--;

235 
EN_CPU_INT


239  
NO_MSG
;

240 
	}
}

241 #i‡
EVENT_CALLBACK


242 
	$dev_msg_poﬁ_öô
(
dev_msg_°ru˘
 *
dev_msg
, *
poﬁ_buf„r
, 
buf„r_Àn
)

244 
dev_msg
->
poﬁ_°¨t
 = 
poﬁ_buf„r
;

245 
dev_msg
->
poﬁ_íd
 = 
poﬁ_buf„r
 + 
buf„r_Àn
;

246 
dev_msg
->
ªad_±r
 = 
poﬁ_buf„r
;

247 
dev_msg
->
wrôe_±r
 = 
poﬁ_buf„r
;

248 
dev_msg
->
msg_˙t
 = 0;

249 
	}
}

251 
	$≥nd_dev_mg_msg
(*
maj‹
, *
evít
, *
d©a
)

253 if(
dev_sys_msg
.
msg_˙t
)

255 if(
dev_sys_msg
.
ªad_±r
 > dev_sys_msg.
poﬁ_íd
)

257 
dev_sys_msg
.
ªad_±r
 = dev_sys_msg.
poﬁ_°¨t
;

260 
DIS_CPU_INT


261 *
maj‹
 = *(
dev_sys_msg
.
ªad_±r
++);

262 *
evít
 = *(
dev_sys_msg
.
ªad_±r
++);

263 *
d©a
 = *(
dev_sys_msg
.
ªad_±r
++);

264 
dev_sys_msg
.
msg_˙t
--;

265 
EN_CPU_INT


270 
evít
 = 0x00;

273 
	}
}

275 
	$po°_dev_mg_msg
(
maj‹
, 
evít
, 
d©a
)

277 if(
evít
 < 
SYS_EVENT_END
)

279 if(
dev_sys_msg
.
wrôe_±r
 > dev_sys_msg.
poﬁ_íd
 - 3)

281 
dev_sys_msg
.
wrôe_±r
 = dev_sys_msg.
poﬁ_°¨t
;

283 if(
dev_sys_msg
.
wrôe_±r
 =dev_sys_msg.
ªad_±r
)

284  
BUFF_LACK
;

286 
DIS_CPU_INT


287 *(
dev_sys_msg
.
wrôe_±r
++Ë
maj‹
;

288 *(
dev_sys_msg
.
wrôe_±r
++Ë
evít
;

289 *(
dev_sys_msg
.
wrôe_±r
++Ë
d©a
;

290 
dev_sys_msg
.
msg_˙t
++;

291 
EN_CPU_INT


295 
dev_msg_°ru˘
 *
dev_msg
 = &
dev_hd_group
[
maj‹
].dev_msg;

296 if(
dev_msg
->
poﬁ_°¨t
 =
NULL
)

297  
PTR_NULL
;

299 if(
dev_msg
->
wrôe_±r
 > dev_msg->
poﬁ_íd
 - 2)

301 
dev_msg
->
wrôe_±r
 = dev_msg->
poﬁ_°¨t
;

303 if(
dev_msg
->
wrôe_±r
 =dev_msg->
ªad_±r
)

304  
BUFF_LACK
;

306 
DIS_CPU_INT


307 *(
dev_msg
->
wrôe_±r
++Ë
evít
;

308 *(
dev_msg
->
wrôe_±r
++Ë
d©a
;

309 
dev_msg
->
msg_˙t
++;

310 
EN_CPU_INT


312 
	}
}

314 
	$dev_evít_ˇŒback_run
()

316 
evít
, 
maj‹
, 
d©a
;

317 
ªs
;

319 
ªs
 = 
	`≥nd_dev_mg_msg
(&
maj‹
, &
evít
, &
d©a
);

320 
evít
)

322 
DATA_COMING
:

323 if(
dev_hd_group
[
maj‹
].
d©a_ªad_ˇŒback
)

325 
buf„r
[
R_BUFF_MAX
];

326 
d©a_size
 = 
	`ªad_cbuff
(
dev_hd_group
[
maj‹
].
r_buff
, 
buf„r
, 
R_BUFF_MAX
);

327 
dev_hd_group
[
maj‹
].
	`d©a_ªad_ˇŒback
(
buf„r
, 
d©a_size
);

333 
	}
}

	@dev_manage/dev_manage.h

1 #i‚de‡
_DEV_MANAGE_


2 
	#_DEV_MANAGE_


	)

4 
	#MAX_DEV
 30

5 
	#USE_MALLOC
 1

6 
	#EVENT_CALLBACK
 1

7 
	#DEV_MG_DEBUG


	)

10 #i‡
EVENT_CALLBACK


11 
	#MSG_POOL_SIZE
 30

	)

13 
	#R_BUFF_MAX
 512

14 

	)

15 #ifde‡
DEV_MG_DEBUG


16 
	#dev_¥ötf
 
u¥ötf


	)

18 
	#dev_¥ötf
(...)

	)

21 #i‡
EVENT_CALLBACK


22 
	sdev_msg_°ru˘


24 *
	mpoﬁ_°¨t
;

25 *
	mpoﬁ_íd
;

26 *
	mªad_±r
;

27 *
	mwrôe_±r
;

28 
	mmsg_˙t
;

29 }
	tdev_msg_°ru˘
;

32 
	#BLOCK_DEV
 1

	)

33 
	#CHARACTER_DEV
 2

	)

34 
	sdev_io


36 *
	mdev_«me
;

37 
	mboŸ_m⁄ut
;

38 
	mdev_ty≥
;

40 (*
	mªad
)(
	maddr
, *
	mbuf„r
, 
	mbuf„r_Àn
);

41 (*
	mwrôe
)(
	maddr
, *
	mbuf„r
, 
	mbuf„r_Àn
);

42 (*
	mio˘æ
)(
	mcmd
, *
	m∑rm
);

43 (*
	mmou¡
)(
	mmaj‹
, *
	m∑rm
);

44 (*
	mumou¡
)();

46 }
	tdev_io
;

50 
	sdev_hd


52 *
	mdev_io
;

53 
	mdev_maj‹
;

54 *
	mr_buff
;

55 (*
	md©a_ªad_ˇŒback
)(*
	mbuf„r
, 
	mbuf„r_Àn
);

56 #i‡
EVENT_CALLBACK


57 
dev_msg_°ru˘
 
	mdev_msg
;

61 
	mmutu
;

62 }
	tdev_hd
;

66 
	mCROSS_BORDER
 = 0x01,

67 
	mPTR_NULL
,

68 
	mBUFF_LACK
,

69 
	mALLOC_ERR
,

70 
	mNO_MSG
,

71 
	mMAJOR_ERR
,

72 
	mIO_ERR
,

73 }
	gDEV_ERR_NUM
;

75 #i‡
EVENT_CALLBACK


78 
	mDATA_COMING
 = 0x01,

79 
	mSYS_EVENT_END
,

80 }
	gDEV_MSG
;

81 
po°_dev_mg_msg
(
maj‹
, 
evít
, 
d©a
);

84 
dev_mou¡
(
dev_io
 *
io
, 
maj‹
, *
∑rm
);

85 
dev_umou¡
(
dev_io
 *
io
, 
maj‹
);

86 
dev_›í
(
dev_hd
 **
hd
, c⁄° *
dev_«me
);

87 
dev_m™age_ªad_ˇŒback
(
maj‹
, *
buf„r
, 
buf„r_Àn
);

89 
	#ªgi°î_dev_io
 
	`__©åibuã__
((
	`£˘i⁄
(".dev_li°"))Ë
dev_io


	)

	@dev_manage/dev_manage_api.c

1 
	~"c⁄fig.h
"

2 
	~"dev_m™age.h
"

3 
	~"dev_m™age_≠i.h
"

5 
	$dev_mou¡_≠i
(
dev_io
 *
io
, 
maj‹
, *
∑rm
)

7 if(
io
 =
NULL
)

8  
PTR_NULL
;

10 if(
maj‹
 == 0xffff)

11 
maj‹
 = 
	`gë_avaû_maj‹
();

13 if(
maj‹
 >
MAX_DEV
)

14  
MAJOR_ERR
;

16  
	`dev_mou¡
(
io
, 
maj‹
, 
∑rm
);

17 
	}
}

19 
	$dev_umou¡_≠i
(
dev_hd
 *
hd
)

21 if(
hd
 =
NULL
)

22  
PTR_NULL
;

24  
	`dev_umou¡
(
hd
->
dev_io
, hd->
dev_maj‹
);

25 
	}
}

27 
	$dev_›í_≠i
(
dev_hd
 **
hd
, c⁄° *
dev_«me
)

29 if(
hd
 =
NULL
)

30  
PTR_NULL
;

32  
	`dev_›í
(
hd
, 
dev_«me
);

33 
	}
}

35 *
	$gë_dev_«me_by_hd
(
dev_hd
 *
hd
)

37 if(
hd
 =
NULL
)

38  
NULL
;

40  ((
dev_io
 *)(
hd
->dev_io))->
dev_«me
;

41 
	}
}

44 
	$dev_ªad_≠i
(
dev_hd
 *
hd
, 
addr
, *
buf„r
, 
buf„r_Àn
)

46 if((
hd
 =
NULL
Ë|| (
buf„r
 == 0))

47  
PTR_NULL
;

49 
dev_io
 *
io
 = 
hd
->dev_io;

50 if(
io
->
dev_ty≥
 =
BLOCK_DEV
)

52 if(
io
->
ªad
)

54 
hd
->
mutu
 = 1;

55 
buf„r_Àn
 = 
io
->
	`ªad
(
addr
, 
buf„r
, buffer_len);

56 
hd
->
mutu
 = 0;

57  
buf„r_Àn
;

60  
IO_ERR
;

62 if(
io
->
dev_«me
 =
CHARACTER_DEV
)

64 if(
hd
->
r_buff
)

66 
ªad_size
;

67 
hd
->
mutu
 = 1;

68 
ªad_size
 = 
	`ªad_cbuff
(
hd
->
r_buff
, 
buf„r
, 
buf„r_Àn
);

69 
hd
->
mutu
 = 0;

70 if(
ªad_size
)

71  
ªad_size
;

74 if(
io
->
ªad
)

76 
hd
->
mutu
 = 1;

77 
buf„r_Àn
 = 
io
->
	`ªad
(0, 
buf„r
, buffer_len);

78 
hd
->
mutu
 = 0;

79  
buf„r_Àn
;

83 
	}
}

85 
	$dev_wrôe_≠i
(
dev_hd
 *
hd
, 
addr
, *
buf„r
, 
buf„r_Àn
)

87 if((
hd
 =
NULL
Ë|| (
buf„r
 == NULL))

88  
PTR_NULL
;

90 
dev_io
 *
io
 = 
hd
->dev_io;

92 if(
io
->
dev_ty≥
 =
BLOCK_DEV
)

94 if(
io
->
wrôe
)

96 
hd
->
mutu
 = 1;

97 
buf„r_Àn
 = 
io
->
	`wrôe
(
addr
, 
buf„r
, buffer_len);

98 
hd
->
mutu
 = 0;

99  
buf„r_Àn
;

102  
IO_ERR
;

104 if(
io
->
dev_ty≥
 =
CHARACTER_DEV
)

106 if(
io
->
wrôe
)

108 
hd
->
mutu
 = 1;

109 
buf„r_Àn
 = 
io
->
	`wrôe
(0, 
buf„r
, buffer_len);

110 
hd
->
mutu
 = 0;

111  
buf„r_Àn
;

114  
IO_ERR
;

117 
	}
}

119 
	$dev_io˘æ_≠i
(
dev_hd
 *
hd
, 
cmd
, *
∑rm
)

121 
ªs
 = 0;

122 if(
hd
 =
NULL
)

123  
PTR_NULL
;

125 
dev_io
 *
io
 = 
hd
->dev_io;

127 if(
io
->
io˘æ
)

129 
hd
->
mutu
 = 1;

130 
ªs
 = 
io
->
	`io˘æ
(
cmd
, 
∑rm
);

131 
hd
->
mutu
 = 0;

134  
ªs
;

135 
	}
}

139 
	~"èsk_m™age.h
"

140 
	$dev_mg_èsk_run
(*
¨g
)

142 
	`dev_evít_ˇŒback_run
();

144 
	}
}

146 
	$dev_mg_èsk_öô
()

148 
ªs
;

149 
ªs
 = 
	`dev_m™age_öô
();

150  
ªs
;

151 
	}
}

152 
	$dev_mg_èsk_exô
()

155 
	}
}

156 
ªgi°î_èsk_li°
 
	gdev_mg_èsk
 =

158 .
«me
 = (*)"dev_manage",

159 .
	gèsk_func
 = 
dev_mg_èsk_run
,

160 .
	gèsk_öô
 = 
dev_mg_èsk_öô
,

161 .
	gèsk_exô
 = 
dev_mg_èsk_exô
,

162 .
	grun_Êag
 = 1,

163 .
	gq_msg
 = 
NULL
,

165 #ifde‡
CMD_LINE


166 
	~"cmd.h
"

167 c⁄° *
	gdev_cmd_èbÀ
[]=

173 
dev_hd
 *
	gsd_dev
 = 
NULL
;

174 
	$dev_cmd_dól
(
cmd_ödex
, *
¨g
)

176 
cmd_ödex
) {

179 
u8
 
buf„r
[512];

180 
addr
 = 
	`°r_to_öt
(
¨g
);

181 
ªs
;

182 
	`mem£t
(
buf„r
, 0x00, 512);

183 
ªs
 = 
	`dev_ªad_≠i
(
sd_dev
,
addr
, 
buf„r
, 1);

184 if(
ªs
 != 1)

185 
	`u¥ötf
("devÑódÉº :%d\n\r", 
ªs
);

187 
	`¥ötf_buff
(
buf„r
, 512);

191 
	`u¥ötf
("›í dev %†íãr\n\r", 
¨g
);

192  
	`dev_›í_≠i
(&
sd_dev
, 
¨g
);

198 
	}
}

200 
	$dev_do
(**
¨g
, 
¨g_num
)

202 
dev_cmd_˙t
;;

203 
¨g_num
--) {

204 
dev_cmd_˙t
 = 0; dev_cmd_˙t<(
dev_cmd_èbÀ
)/(dev_cmd_table[0]); dev_cmd_cnt++) {

205 if(
	`°rcmp
(*
¨g
,
dev_cmd_èbÀ
[
dev_cmd_˙t
]) == 0) {

206 if(
	`dev_cmd_dól
(
dev_cmd_˙t
, *(
¨g
+1)))

211 
	}
}

212 
REGISTER_CMD
(
dev
, 
dev_do
, "…Ë±∏π‹¿Ì¿‡–Õ√¸¡Ó");

	@dev_manage/dev_manage_api.h

1 #i‚de‡
_DEV_MG_API_


2 
	#_DEV_MG_API_


	)

4 
dev_m™age_öô
();

5 
gë_avaû_maj‹
();

6 
dev_io
 *
gë_dev_io_by«me
(c⁄° *
dev_«me
);

7 
gë_dev_msg
(
dev_hd
 *
hd
, *
evít
, *
d©a
);

8 
dev_evít_ˇŒback_run
();

9 
dev_mou¡_≠i
(
dev_io
 *
io
, 
maj‹
, *
∑rm
);

10 
dev_umou¡_≠i
(
dev_hd
 *
hd
);

11 
dev_›í_≠i
(
dev_hd
 **
hd
, c⁄° *
dev_«me
);

12 *
gë_dev_«me_by_hd
(
dev_hd
 *
hd
);

13 
dev_ªad_≠i
(
dev_hd
 *
hd
, 
addr
, *
buf„r
, 
buf„r_Àn
);

14 
dev_wrôe_≠i
(
dev_hd
 *
hd
, 
addr
, *
buf„r
, 
buf„r_Àn
);

15 
dev_io˘æ_≠i
(
dev_hd
 *
hd
, 
cmd
, *
∑rm
);

	@include_lib/my_malloc.h

1 #i‚de‡
_mÆloc_


2 
	#_mÆloc_


	)

3 *
my_mÆloc
(
size
);

4 
my_‰ì
(*
mem_buff
);

5 
öô_mem_Æloc
(*
buff
, 
size
);

	@include_lib/string.h

22 #i‚de‡
__ASM_AVR32_STRING_H


23 
	#__ASM_AVR32_STRING_H


	)

25 
	#__HAVE_ARCH_MEMSET


	)

26 *
mem£t
(*
s
, 
c
, 
size_t
 
n
);

	@include_lib/vsprintf.h

8 
	~"ty≥s.h
"

10 #i‚de‡
va_¨g


12 #i‚de‡
_VALIST


13 
	#_VALIST


	)

14 *
	tva_li°
;

20 
	#NATIVE_INT
 

	)

21 
	#_AUPBND
 ( (
NATIVE_INT
Ë- 1)

	)

22 
	#_ADNBND
 ( (
NATIVE_INT
Ë- 1)

	)

28 
	#_bnd
(
X
, 
bnd
Ë((( (X)Ë+ (bnd)Ë& (~(bnd)))

	)

29 
	#va_¨g
(
≠
, 
T
Ë(*(T *)((◊pË+(
	`_bnd
 (T, 
_AUPBND
))Ë- (_bnd (T,
_ADNBND
))))

	)

30 
	#va_íd
(
≠
Ë(Ë0

	)

31 
	#va_°¨t
(
≠
, 
A
Ë(Ë(◊pË(((*Ë&(A)Ë+ (
	`_bnd
 (A,
_AUPBND
))))

	)

35 
sim∂e_°πoul
(c⁄° *
˝
,**
ídp
,
ba£
);

36 
sim∂e_°πﬁ
(c⁄° *
˝
,**
ídp
,
ba£
);

37 
sim∂e_°πouŒ
(c⁄° *
˝
,**
ídp
,
ba£
);

38 
sim∂e_°πﬁl
(c⁄° *
˝
,**
ídp
,
ba£
);

41 
v¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

42 
¢¥ötf
(* 
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

43 
v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

44 
•rötf
(* 
buf
, c⁄° *
fmt
, ...);

45 
vssˇnf
(c⁄° * 
buf
, c⁄° * 
fmt
, 
va_li°
 
¨gs
);

46 
ssˇnf
(c⁄° * 
buf
, c⁄° * 
fmt
, ...);

	@lib/malloc.c

1 
	~"my_mÆloc.h
"

2 
	~"c⁄fig.h
"

8 
u32
 
	mu£r_Êag
:3;

9 
u32
 
	mblock_size
:29;

10 }
	tblock_hód
;

13 
u32
 
	mmem_size
;

14 
u32
 
	m‰ì_size
;

15 
u8
 *
	m°¨t_mem
;

16 
u8
 *
	míd_mem
;

17 }
	tmem_li°
;

18 
mem_li°
 
	gmem_öfo
 =

23 *
	$my_mÆloc
(
u32
 
size
)

25 
block_hód
 *
mem±r
, *
œ°_±r
 = 0;

26 if(
mem_öfo
.
°¨t_mem
 == 0) {

29 if(
size
%4) {

30 
size
 += 4 - size%4;

33 
mem±r
 = (
block_hód
 *)
mem_öfo
.
°¨t_mem
;

36 if(
mem±r
 >(
mem_öfo
.
íd_mem
 - (
block_hód
))){

40 if(
mem±r
->
u£r_Êag
==0){

41 if((
œ°_±r
)&&÷a°_±r->
u£r_Êag
==0)){

42 
œ°_±r
->
block_size
 +
mem±r
->block_sizê+ (
block_hód
);

43 
mem±r
 = 
œ°_±r
;

44 
œ°_±r
 = 0;

49 if(
mem±r
->
block_size
>=
size
) {

50 *
buff
 =(
u8
 *)
mem±r
+(
block_hód
);

51 
mem±r
->
u£r_Êag
 = 1;

52 if((
mem±r
->
block_size
 - 
size
) > 4) {

53 
block_hód
 *
•lô_block
 = (
u8
 *)
mem±r
 + (block_hódË+ 
size
;

54 
•lô_block
->
u£r_Êag
 = 0;

55 
•lô_block
->
block_size
 = 
mem±r
->block_sizê- (
block_hód
Ë- 
size
;

56 
mem±r
->
block_size
 = 
size
;

60  
buff
;

64 
œ°_±r
 = 
mem±r
;

65 
mem±r
 = (
u8
 *)mem±∏+ mem±r->
block_size
 + (
block_hód
);

69 
	}
}

71 
	$my_‰ì
(*
mem_buff
)

73 
block_hód
 *
mem±r
 = 0;

75 if(
mem_buff
) {

76 
mem±r
 = (
u8
 *)
mem_buff
 - (
block_hód
);

77 if(
mem±r
->
u£r_Êag
 == 1)

78 
mem±r
->
u£r_Êag
 = 0;

81 
	}
}

83 
u8
 
	$öô_mem_Æloc
(*
buff
, 
u32
 
size
)

85 
block_hód
 *
mem¥
 = 0;

86 if(
buff
 == 0)

88 if(
size
>(
	`BIT
(29)-1))

89 
size
 = 
	`BIT
(29)-1;

91 
mem_öfo
.
°¨t_mem
 = 
buff
;

92 
mem_öfo
.
mem_size
 = 
size
;

93 
mem_öfo
.
‰ì_size
 = 
size
;

94 
mem_öfo
.
íd_mem
 = 
buff
+
size
;

95 
mem¥
 = (
block_hód
 *)
mem_öfo
.
°¨t_mem
;

96 
mem¥
->
u£r_Êag
 = 0;

97 
mem¥
->
block_size
 = 
size
 - (
block_hód
);

100 
	}
}

	@lib/stdlib.c

32 
	~"pm≠i.h
"

33 
	~"oshdr.h
"

41 * 
	$mÆloc
(

42 
size_t
 
size
)

44  
	`PM_mÆlocSh¨ed
(
size
);

45 
	}
}

51 * 
	$ˇŒoc
(

52 
size_t
 
√Àm
,

53 
size_t
 
size
)

55 *
p
 = 
	`PM_mÆlocSh¨ed
(
√Àm
 * 
size
);

56 i‡(
p
)

57 
	`mem£t
(
p
,0,
√Àm
 * 
size
);

58  
p
;

59 
	}
}

65 * 
	$ªÆloc
(

66 *
±r
,

67 
size_t
 
size
)

69 *
p
 = 
	`PM_mÆlocSh¨ed
(
size
);

70 i‡(
p
) {

71 
	`mem˝y
(
p
,
±r
,
size
);

72 
	`PM_‰ìSh¨ed
(
±r
);

74  
p
;

75 
	}
}

81 
	$‰ì
(

82 *
p
)

84 
	`PM_‰ìSh¨ed
(
p
);

85 
	}
}

98 
UNICODE_STRING
 *
	$_PM_CSåögToUnicodeSåög
(

99 c⁄° *
c°r
)

101 
Àngth
;

102 
ANSI_STRING
 
™siSå
;

103 
UNICODE_STRING
 *
uniSå
;

106 i‡((
uniSå
 = 
	`ExAŒoˇãPoﬁ
(
N⁄PagedPoﬁ
, (
UNICODE_STRING
))Ë=
NULL
)

107  
NULL
;

110 
Àngth
 = (
	`°æí
(
c°r
Ë* (
WCHAR
)) + (WCHAR);

111 i‡((
uniSå
->
Buf„r
 = 
	`ExAŒoˇãPoﬁ
(
N⁄PagedPoﬁ
, 
Àngth
)Ë=
NULL
) {

112 
	`ExFªePoﬁ
(
uniSå
);

113  
NULL
;

115 
	`RéZîoMem‹y
(
uniSå
->
Buf„r
, 
Àngth
);

116 
uniSå
->
Lígth
 = 0;

117 
uniSå
->
MaximumLígth
 = (
USHORT
)
Àngth
;

120 
	`RéInôAnsiSåög
(&
™siSå
, 
c°r
);

121 
	`RéAnsiSåögToUnicodeSåög
(
uniSå
, &
™siSå
, 
FALSE
);

122  
uniSå
;

123 
	}
}

132 
	$_PM_FªeUnicodeSåög
(

133 
UNICODE_STRING
 *
uniSå
)

135 i‡(
uniSå
) {

136 
	`ExFªePoﬁ
(
uniSå
->
Buf„r
);

137 
	`ExFªePoﬁ
(
uniSå
);

139 
	}
}

	@lib/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

53 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_C99


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

277 
	$__°πod_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

278 **
__ª°ri˘
 
__íd±r
, 
__group
)

279 
__THROW
 
	`__n⁄nuŒ
 ((1));

280 
	$__°πof_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

281 **
__ª°ri˘
 
__íd±r
, 
__group
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$__°πﬁd_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

284 **
__ª°ri˘
 
__íd±r
,

285 
__group
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #i‚de‡
__°πﬁ_öã∫Æ_deföed


287 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

288 **
__ª°ri˘
 
__íd±r
,

289 
__ba£
, 
__group
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

291 
	#__°πﬁ_öã∫Æ_deföed
 1

	)

293 #i‚de‡
__°πoul_öã∫Æ_deföed


294 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

295 **
__ª°ri˘
 
__íd±r
,

296 
__ba£
, 
__group
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	#__°πoul_öã∫Æ_deföed
 1

	)

300 #i‡
deföed
 
__GNUC__
 || deföed 
__USE_ISOC99


301 #i‚de‡
__°πﬁl_öã∫Æ_deföed


302 
__exãnsi⁄__


303 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
__ba£
, 
__group
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	#__°πﬁl_öã∫Æ_deföed
 1

	)

309 #i‚de‡
__°πouŒ_öã∫Æ_deföed


310 
__exãnsi⁄__


311 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

312 
__ª°ri˘
 
__≈å
,

313 **
__ª°ri˘
 
__íd±r
,

314 
__ba£
, 
__group
)

315 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	#__°πouŒ_öã∫Æ_deföed
 1

	)

320 #ifde‡
__USE_EXTERN_INLINES


323 
__BEGIN_NAMESPACE_STD


324 
__ölöe
 

325 
	`__NTH
 (
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

327  
	`__°πod_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

328 
	}
}

329 
__ölöe
 

330 
__NTH
 (
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

331 
__ba£
))

333  
	`__°πﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

334 
	}
}

335 
__ölöe
 

336 
__NTH
 (
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

337 
__ba£
))

339  
	`__°πoul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

340 
	}
}

341 
__END_NAMESPACE_STD


343 #ifde‡
__USE_ISOC99


344 
__BEGIN_NAMESPACE_C99


345 
__ölöe
 

346 
__NTH
 (
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

348  
	`__°πof_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

349 
	}
}

350 
__ölöe
 

351 
__NTH
 (
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

353  
	`__°πﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

354 
	}
}

355 
__END_NAMESPACE_C99


358 #ifde‡
__USE_BSD


359 
__exãnsi⁄__
 
__ölöe
 

360 
__NTH
 (
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

361 
__ba£
))

363  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

364 
	}
}

365 
__exãnsi⁄__
 
__ölöe
 

366 
__NTH
 (
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

367 
__ba£
))

369  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

370 
	}
}

373 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


374 
__BEGIN_NAMESPACE_C99


375 
__exãnsi⁄__
 
__ölöe
 

376 
__NTH
 (
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

377 
__ba£
))

379  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

380 
	}
}

381 
__exãnsi⁄__
 
__ölöe
 

382 
__NTH
 (
	$°πouŒ
 (
__c⁄°
 * 
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

383 
__ba£
))

385  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

386 
	}
}

387 
__END_NAMESPACE_C99


390 
__BEGIN_NAMESPACE_STD


391 
__ölöe
 

392 
__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

394  
	`°πod
 (
__≈å
, (**Ë
NULL
);

395 
	}
}

396 
__ölöe
 

397 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

399  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

400 
	}
}

401 
__ölöe
 

402 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

404  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

405 
	}
}

406 
__END_NAMESPACE_STD


408 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


409 
__BEGIN_NAMESPACE_C99


410 
__exãnsi⁄__
 
__ölöe
 

411 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

413  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

414 
	}
}

415 
__END_NAMESPACE_C99


420 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


424 *
	$l64a
 (
__n
Ë
__THROW
;

427 
	$a64l
 (
__c⁄°
 *
__s
)

428 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

432 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


433 
	~<sys/ty≥s.h
>

440 
	$øndom
 (Ë
__THROW
;

443 
	$§™dom
 (
__£ed
Ë
__THROW
;

449 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

450 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

454 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 #ifde‡
__USE_MISC


462 
	søndom_d©a


464 
öt32_t
 *
Âå
;

465 
öt32_t
 *
Ωå
;

466 
öt32_t
 *
°©e
;

467 
ønd_ty≥
;

468 
ønd_deg
;

469 
ønd_£p
;

470 
öt32_t
 *
íd_±r
;

473 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

474 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

477 
__THROW
 
	`__n⁄nuŒ
 ((2));

479 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

480 
size_t
 
__°©ñí
,

481 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

482 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

484 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

485 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

486 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 
__BEGIN_NAMESPACE_STD


493 
	$ønd
 (Ë
__THROW
;

495 
	$§™d
 (
__£ed
Ë
__THROW
;

496 
__END_NAMESPACE_STD


498 #ifde‡
__USE_POSIX


500 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

504 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


508 
	$dønd48
 (Ë
__THROW
;

509 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

512 
	$Ã™d48
 (Ë
__THROW
;

513 
	$ƒ™d48
 (
__xsubi
[3])

514 
__THROW
 
	`__n⁄nuŒ
 ((1));

517 
	$mønd48
 (Ë
__THROW
;

518 
	$jønd48
 (
__xsubi
[3])

519 
__THROW
 
	`__n⁄nuŒ
 ((1));

522 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

523 *
	$£ed48
 (
__£ed16v
[3])

524 
__THROW
 
	`__n⁄nuŒ
 ((1));

525 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

527 #ifde‡
__USE_MISC


531 
	sdønd48_d©a


533 
__x
[3];

534 
__ﬁd_x
[3];

535 
__c
;

536 
__öô
;

537 
__a
;

541 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

542 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

543 
	$î™d48_r
 (
__xsubi
[3],

544 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

545 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

548 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

549 *
__ª°ri˘
 
__ªsu…
)

550 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 
	$ƒ™d48_r
 (
__xsubi
[3],

552 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

553 *
__ª°ri˘
 
__ªsu…
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

558 *
__ª°ri˘
 
__ªsu…
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 
	$jønd48_r
 (
__xsubi
[3],

561 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

562 *
__ª°ri˘
 
__ªsu…
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

566 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

567 
__THROW
 
	`__n⁄nuŒ
 ((2));

569 
	$£ed48_r
 (
__£ed16v
[3],

570 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 
	$lc⁄g48_r
 (
__∑øm
[7],

573 
dønd48_d©a
 *
__buf„r
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


581 
	#__mÆloc_™d_ˇŒoc_deföed


	)

582 
__BEGIN_NAMESPACE_STD


584 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

586 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
;

588 
__END_NAMESPACE_STD


591 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


592 
__BEGIN_NAMESPACE_STD


595 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

597 
	$‰ì
 (*
__±r
Ë
__THROW
;

598 
__END_NAMESPACE_STD


600 #ifdef 
__USE_MISC


602 
	$c‰ì
 (*
__±r
Ë
__THROW
;

605 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


606 
	~<Æloˇ.h
>

609 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


611 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

614 #ifde‡
__USE_XOPEN2K


616 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

617 
__THROW
 
	`__n⁄nuŒ
 ((1));

620 
__BEGIN_NAMESPACE_STD


622 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

627 
__END_NAMESPACE_STD


629 #ifdef 
__USE_MISC


632 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

633 
__THROW
 
	`__n⁄nuŒ
 ((1));

636 
__BEGIN_NAMESPACE_STD


640 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

641 
__END_NAMESPACE_STD


643 #ifde‡
__USE_ISOC99


644 
__BEGIN_NAMESPACE_C99


647 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

648 
__END_NAMESPACE_C99


652 
__BEGIN_NAMESPACE_STD


654 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

655 
__END_NAMESPACE_STD


659 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

661 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


665 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

668 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


671 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

672 
__THROW
 
	`__n⁄nuŒ
 ((2));

675 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

678 #ifdef 
__USE_MISC


682 
	$˛óªnv
 (Ë
__THROW
;

686 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


691 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

701 #i‚de‡
__USE_FILE_OFFSET64


702 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1));

704 #ifde‡
__REDIRECT


705 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
Ë
	`__n⁄nuŒ
 ((1));

707 
	#mk°emp
 
mk°emp64


	)

710 #ifde‡
__USE_LARGEFILE64


711 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1));

715 #ifde‡
__USE_BSD


721 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

725 
__BEGIN_NAMESPACE_STD


730 
	`sy°em
 (
__c⁄°
 *
__comm™d
);

731 
__END_NAMESPACE_STD


734 #ifdef 
__USE_GNU


738 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


749 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

750 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
;

755 #i‚de‡
__COMPAR_FN_T


756 
	#__COMPAR_FN_T


	)

757 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

759 #ifdef 
__USE_GNU


760 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

764 
__BEGIN_NAMESPACE_STD


767 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

768 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

769 
	`__n⁄nuŒ
 ((1, 2, 5));

773 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

774 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

778 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

779 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

780 
__END_NAMESPACE_STD


782 #ifde‡
__USE_ISOC99


783 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

784 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

788 
__BEGIN_NAMESPACE_STD


792 
div_t
 
	$div
 (
__numî
, 
__díom
)

793 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

794 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

796 
__END_NAMESPACE_STD


798 #ifde‡
__USE_ISOC99


799 
__BEGIN_NAMESPACE_C99


800 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

801 
__díom
)

802 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

803 
__END_NAMESPACE_C99


807 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


814 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

820 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

821 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

826 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3));

830 #ifde‡
__USE_MISC


832 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

835 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

836 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

838 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

839 
__THROW
 
	`__n⁄nuŒ
 ((3));

844 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

847 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

848 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

849 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

852 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

853 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

854 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

855 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

856 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

857 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

858 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

863 
__BEGIN_NAMESPACE_STD


866 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

870 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

873 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

877 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

878 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

880 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

881 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

882 
__THROW
;

883 
__END_NAMESPACE_STD


886 #ifde‡
__USE_SVID


891 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN_EXTENDED


902 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

903 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

904 **
__ª°ri˘
 
__vÆuï
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

909 #ifde‡
__USE_XOPEN


911 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

917 #ifde‡
__USE_XOPEN2K


919 
	`posix_›í±
 (
__oÊag
);

922 #ifde‡
__USE_XOPEN


927 
	$gø¡±
 (
__fd
Ë
__THROW
;

931 
	$u∆ock±
 (
__fd
Ë
__THROW
;

936 *
	$±¢ame
 (
__fd
Ë
__THROW
;

939 #ifde‡
__USE_GNU


943 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

944 
__THROW
 
	`__n⁄nuŒ
 ((2));

947 
	`gë±
 ();

950 #ifde‡
__USE_BSD


954 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

955 
__THROW
 
	`__n⁄nuŒ
 ((1));

959 #unde‡
__√ed_mÆloc_™d_ˇŒoc


961 
__END_DECLS


	@lib/string.c

18 
	~<löux/ty≥s.h
>

19 
	~<löux/°rög.h
>

20 
	~<löux/˘y≥.h
>

21 
	~<mÆloc.h
>

31 
	$°∫icmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
)

34 
c1
, 
c2
;

36 
c1
 = 0; 
c2
 = 0;

37 i‡(
Àn
) {

39 
c1
 = *
s1
; 
c2
 = *
s2
;

40 
s1
++; 
s2
++;

41 i‡(!
c1
)

43 i‡(!
c2
)

45 i‡(
c1
 =
c2
)

47 
c1
 = 
	`tﬁowî
(c1);

48 
c2
 = 
	`tﬁowî
(c2);

49 i‡(
c1
 !
c2
)

51 } --
Àn
);

53  ()
c1
 - ()
c2
;

54 
	}
}

57 * 
	g___°πok
;

59 #i‚de‡
__HAVE_ARCH_STRCPY


65 * 
	$°r˝y
(* 
de°
,c⁄° *
§c
)

67 *
tmp
 = 
de°
;

69 (*
de°
++ = *
§c
++) != '\0')

71  
tmp
;

72 
	}
}

75 #i‚de‡
__HAVE_ARCH_STRNCPY


86 * 
	$°∫˝y
(* 
de°
,c⁄° *
§c
,
size_t
 
cou¡
)

88 *
tmp
 = 
de°
;

90 
cou¡
-- && (*
de°
++ = *
§c
++) != '\0')

93  
tmp
;

94 
	}
}

97 #i‚de‡
__HAVE_ARCH_STRCAT


103 * 
	$°rˇt
(* 
de°
, c⁄° * 
§c
)

105 *
tmp
 = 
de°
;

107 *
de°
)

108 
de°
++;

109 (*
de°
++ = *
§c
++) != '\0')

112  
tmp
;

113 
	}
}

116 #i‚de‡
__HAVE_ARCH_STRNCAT


126 * 
	$°∫ˇt
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

128 *
tmp
 = 
de°
;

130 i‡(
cou¡
) {

131 *
de°
)

132 
de°
++;

133 (*
de°
++ = *
§c
++)) {

134 i‡(--
cou¡
 == 0) {

135 *
de°
 = '\0';

141  
tmp
;

142 
	}
}

145 #i‚de‡
__HAVE_ARCH_STRCMP


151 
	$°rcmp
(c⁄° * 
cs
,c⁄° * 
˘
)

153 sig√d 
__ªs
;

156 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

160  
__ªs
;

161 
	}
}

164 #i‚de‡
__HAVE_ARCH_STRNCMP


171 
	$°∫cmp
(c⁄° * 
cs
,c⁄° * 
˘
,
size_t
 
cou¡
)

173 sig√d 
__ªs
 = 0;

175 
cou¡
) {

176 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

178 
cou¡
--;

181  
__ªs
;

182 
	}
}

185 #i‚de‡
__HAVE_ARCH_STRCHR


191 * 
	$°rchr
(c⁄° * 
s
, 
c
)

193 ; *
s
 !(Ë
c
; ++s)

194 i‡(*
s
 == '\0')

195  
NULL
;

196  (*Ë
s
;

197 
	}
}

200 #i‚de‡
__HAVE_ARCH_STRRCHR


206 * 
	$°ºchr
(c⁄° * 
s
, 
c
)

208 c⁄° *
p
 = 
s
 + 
	`°æí
(s);

210 i‡(*
p
 =()
c
)

211  (*)
p
;

212 } --
p
 >
s
);

213  
NULL
;

214 
	}
}

217 #i‚de‡
__HAVE_ARCH_STRLEN


222 
size_t
 
	$°æí
(c⁄° * 
s
)

224 c⁄° *
sc
;

226 
sc
 = 
s
; *sc != '\0'; ++sc)

228  
sc
 - 
s
;

229 
	}
}

232 #i‚de‡
__HAVE_ARCH_STRNLEN


238 
size_t
 
	$°∫Àn
(c⁄° * 
s
, 
size_t
 
cou¡
)

240 c⁄° *
sc
;

242 
sc
 = 
s
; 
cou¡
-- && *sc != '\0'; ++sc)

244  
sc
 - 
s
;

245 
	}
}

248 #i‚de‡
__HAVE_ARCH_STRDUP


249 * 
	$°rdup
(c⁄° *
s
)

251 *
√w
;

253 i‡((
s
 =
NULL
) ||

254 ((
√w
 = 
	`mÆloc
 (
	`°æí
(
s
Ë+ 1)Ë=
NULL
) ) {

255  
NULL
;

258 
	`°r˝y
 (
√w
, 
s
);

259  
√w
;

260 
	}
}

263 #i‚de‡
__HAVE_ARCH_STRSPN


270 
size_t
 
	$°r•n
(c⁄° *
s
, c⁄° *
ac˚±
)

272 c⁄° *
p
;

273 c⁄° *
a
;

274 
size_t
 
cou¡
 = 0;

276 
p
 = 
s
; *p != '\0'; ++p) {

277 
a
 = 
ac˚±
; *a != '\0'; ++a) {

278 i‡(*
p
 =*
a
)

281 i‡(*
a
 == '\0')

282  
cou¡
;

283 ++
cou¡
;

286  
cou¡
;

287 
	}
}

290 #i‚de‡
__HAVE_ARCH_STRPBRK


296 * 
	$°Ωbrk
(c⁄° * 
cs
,c⁄° * 
˘
)

298 c⁄° *
sc1
,*
sc2
;

300  
sc1
 = 
cs
; *sc1 != '\0'; ++sc1) {

301  
sc2
 = 
˘
; *sc2 != '\0'; ++sc2) {

302 i‡(*
sc1
 =*
sc2
)

303  (*Ë
sc1
;

306  
NULL
;

307 
	}
}

310 #i‚de‡
__HAVE_ARCH_STRTOK


318 * 
	$°πok
(* 
s
,c⁄° * 
˘
)

320 *
sbegö
, *
£nd
;

322 
sbegö
 = 
s
 ? s : 
___°πok
;

323 i‡(!
sbegö
) {

324  
NULL
;

326 
sbegö
 +
	`°r•n
(sbegö,
˘
);

327 i‡(*
sbegö
 == '\0') {

328 
___°πok
 = 
NULL
;

329 –
NULL
 );

331 
£nd
 = 
	`°Ωbrk
–
sbegö
, 
˘
);

332 i‡(
£nd
 && *send != '\0')

333 *
£nd
++ = '\0';

334 
___°πok
 = 
£nd
;

335  (
sbegö
);

336 
	}
}

339 #i‚de‡
__HAVE_ARCH_STRSEP


351 * 
	$°r£p
(**
s
, c⁄° *
˘
)

353 *
sbegö
 = *
s
, *
íd
;

355 i‡(
sbegö
 =
NULL
)

356  
NULL
;

358 
íd
 = 
	`°Ωbrk
(
sbegö
, 
˘
);

359 i‡(
íd
)

360 *
íd
++ = '\0';

361 *
s
 = 
íd
;

363  
sbegö
;

364 
	}
}

367 #i‚de‡
__HAVE_ARCH_STRSWAB


375 *
	$°rswab
(c⁄° *
s
)

377 *
p
, *
q
;

379 i‡((
NULL
 =
s
) || ('\0' == *s)) {

380  (
NULL
);

383 
p
=(*)
s
, 
q
=p+1; (*p != '\0') && (*q != '\0');Ö+=2, q+=2) {

384 
tmp
;

386 
tmp
 = *
p
;

387 *
p
 = *
q
;

388 *
q
 = 
tmp
;

391  (*Ë
s
;

392 
	}
}

395 #i‚de‡
__HAVE_ARCH_MEMSET


404 * 
	$mem£t
(* 
s
,
c
,
size_t
 
cou¡
)

406 *
xs
 = (*Ë
s
;

408 
cou¡
--)

409 *
xs
++ = 
c
;

411  
s
;

412 
	}
}

415 #i‚de‡
__HAVE_ARCH_BCOPY


428 * 
	$bc›y
(c⁄° * 
§c
, * 
de°
, 
cou¡
)

430 *
tmp
 = 
de°
;

432 
cou¡
--)

433 *
tmp
++ = *
§c
++;

435  
de°
;

436 
	}
}

439 #i‚de‡
__HAVE_ARCH_MEMCPY


449 * 
	$mem˝y
(* 
de°
,c⁄° *
§c
,
size_t
 
cou¡
)

451 *
tmp
 = (*Ë
de°
, *
s
 = (*Ë
§c
;

453 
cou¡
--)

454 *
tmp
++ = *
s
++;

456  
de°
;

457 
	}
}

460 #i‚de‡
__HAVE_ARCH_MEMMOVE


469 * 
	$memmove
(* 
de°
,c⁄° *
§c
,
size_t
 
cou¡
)

471 *
tmp
, *
s
;

473 i‡(
de°
 <
§c
) {

474 
tmp
 = (*Ë
de°
;

475 
s
 = (*Ë
§c
;

476 
cou¡
--)

477 *
tmp
++ = *
s
++;

480 
tmp
 = (*Ë
de°
 + 
cou¡
;

481 
s
 = (*Ë
§c
 + 
cou¡
;

482 
cou¡
--)

483 *--
tmp
 = *--
s
;

486  
de°
;

487 
	}
}

490 #i‚de‡
__HAVE_ARCH_MEMCMP


497 
	$memcmp
(c⁄° * 
cs
,c⁄° * 
˘
,
size_t
 
cou¡
)

499 c⁄° *
su1
, *
su2
;

500 
ªs
 = 0;

502  
su1
 = 
cs
, 
su2
 = 
˘
; 0 < 
cou¡
; ++su1, ++su2, count--)

503 i‡((
ªs
 = *
su1
 - *
su2
) != 0)

505  
ªs
;

506 
	}
}

509 #i‚de‡
__HAVE_ARCH_MEMSCAN


519 * 
	$memsˇn
(* 
addr
, 
c
, 
size_t
 
size
)

521 * 
p
 = (*Ë
addr
;

523 
size
) {

524 i‡(*
p
 =
c
)

525  (*Ë
p
;

526 
p
++;

527 
size
--;

529  (*Ë
p
;

530 
	}
}

533 #i‚de‡
__HAVE_ARCH_STRSTR


539 * 
	$°r°r
(c⁄° * 
s1
,c⁄° * 
s2
)

541 
l1
, 
l2
;

543 
l2
 = 
	`°æí
(
s2
);

544 i‡(!
l2
)

545  (*Ë
s1
;

546 
l1
 = 
	`°æí
(
s1
);

547 
l1
 >
l2
) {

548 
l1
--;

549 i‡(!
	`memcmp
(
s1
,
s2
,
l2
))

550  (*Ë
s1
;

551 
s1
++;

553  
NULL
;

554 
	}
}

557 #i‚de‡
__HAVE_ARCH_MEMCHR


567 *
	$memchr
(c⁄° *
s
, 
c
, 
size_t
 
n
)

569 c⁄° *
p
 = 
s
;

570 
n
-- != 0) {

571 i‡(()
c
 =*
p
++) {

572  (*)(
p
-1);

575  
NULL
;

576 
	}
}

	@lib/string.h

22 #i‚de‡
__ASM_AVR32_STRING_H


23 
	#__ASM_AVR32_STRING_H


	)

25 
	#__HAVE_ARCH_MEMSET


	)

26 *
mem£t
(*
s
, 
c
, 
size_t
 
n
);

	@lib/vsprintf.c

12 
	~<°d¨g.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/°rög.h
>

15 
	~<löux/˘y≥.h
>

17 
	~<comm⁄.h
>

18 #i‡!
deföed
 (
CONFIG_PANIC_HANG
)

19 
	~<comm™d.h
>

21 
do_ª£t
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

24 
	$sim∂e_°πoul
(c⁄° *
˝
,**
ídp
,
ba£
)

26 
ªsu…
 = 0,
vÆue
;

28 i‡(*
˝
 == '0') {

29 
˝
++;

30 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1])) {

31 
ba£
 = 16;

32 
˝
++;

34 i‡(!
ba£
) {

35 
ba£
 = 8;

38 i‡(!
ba£
) {

39 
ba£
 = 10;

41 
	`isxdigô
(*
˝
Ë&& (
vÆue
 = 
	`isdigô
(*˝Ë? *˝-'0' : (
	`i¶owî
(*cp)

42 ? 
	`touµî
(*
˝
Ë: *˝)-'A'+10Ë< 
ba£
) {

43 
ªsu…
 =Ñesu…*
ba£
 + 
vÆue
;

44 
˝
++;

46 i‡(
ídp
)

47 *
ídp
 = (*)
˝
;

48  
ªsu…
;

49 
	}
}

51 
	$sim∂e_°πﬁ
(c⁄° *
˝
,**
ídp
,
ba£
)

53 if(*
˝
=='-')

54  -
	`sim∂e_°πoul
(
˝
+1,
ídp
,
ba£
);

55  
	`sim∂e_°πoul
(
˝
,
ídp
,
ba£
);

56 
	}
}

58 #ifde‡
CFG_64BIT_STRTOUL


59 
	$sim∂e_°πouŒ
 (c⁄° *
˝
, **
ídp
, 
ba£
)

61 
ªsu…
 = 0, 
vÆue
;

63 i‡(*
˝
 == '0') {

64 
˝
++;

65 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
 (cp[1])) {

66 
ba£
 = 16;

67 
˝
++;

69 i‡(!
ba£
) {

70 
ba£
 = 8;

73 i‡(!
ba£
) {

74 
ba£
 = 10;

76 
	`isxdigô
 (*
˝
Ë&& (
vÆue
 = 
	`isdigô
 (*cp)

77 ? *
˝
 - '0'

78 : (
	`i¶owî
 (*
˝
Ë? 
	`touµî
 (*˝Ë: *˝Ë- 'A' + 10Ë< 
ba£
) {

79 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

80 
˝
++;

82 i‡(
ídp
)

83 *
ídp
 = (*Ë
˝
;

84  
ªsu…
;

85 
	}
}

89 
	#is_digô
(
c
Ë((cË>'0' && (cË<'9')

	)

91 
	$skù_©oi
(c⁄° **
s
)

93 
i
=0;

95 
	`is_digô
(**
s
))

96 
i
 = i*10 + *((*
s
)++) - '0';

97  
i
;

98 
	}
}

100 
	#ZEROPAD
 1

	)

101 
	#SIGN
 2

	)

102 
	#PLUS
 4

	)

103 
	#SPACE
 8

	)

104 
	#LEFT
 16

	)

105 
	#SPECIAL
 32

	)

106 
	#LARGE
 64

	)

108 
	#do_div
(
n
,
ba£
) ({ \

109 
__ªs
; \

110 
__ªs
 = ((Ë
n
Ë% (Ë
ba£
; \

111 
n
 = ((ËnË/ (Ë
ba£
; \

112 
__ªs
; \

113 })

	)

115 #ifde‡
CFG_64BIT_VSPRINTF


116 * 
	$numbî
(* 
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
 ,
ty≥
)

118 * 
	$numbî
(* 
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
 ,
ty≥
)

121 
c
,
sign
,
tmp
[66];

122 c⁄° *
digôs
="0123456789abcdefghijklmnopqrstuvwxyz";

123 
i
;

125 i‡(
ty≥
 & 
LARGE
)

126 
digôs
 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

127 i‡(
ty≥
 & 
LEFT
)

128 
ty≥
 &~
ZEROPAD
;

129 i‡(
ba£
 < 2 || base > 36)

131 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ';

132 
sign
 = 0;

133 i‡(
ty≥
 & 
SIGN
) {

134 i‡(
num
 < 0) {

135 
sign
 = '-';

136 
num
 = -num;

137 
size
--;

138 } i‡(
ty≥
 & 
PLUS
) {

139 
sign
 = '+';

140 
size
--;

141 } i‡(
ty≥
 & 
SPACE
) {

142 
sign
 = ' ';

143 
size
--;

146 i‡(
ty≥
 & 
SPECIAL
) {

147 i‡(
ba£
 == 16)

148 
size
 -= 2;

149 i‡(
ba£
 == 8)

150 
size
--;

152 
i
 = 0;

153 i‡(
num
 == 0)

154 
tmp
[
i
++]='0';

155 
num
 != 0)

156 
tmp
[
i
++] = 
digôs
[
	`do_div
(
num
,
ba£
)];

157 i‡(
i
 > 
¥ecisi⁄
)

158 
¥ecisi⁄
 = 
i
;

159 
size
 -
¥ecisi⁄
;

160 i‡(!(
ty≥
&(
ZEROPAD
+
LEFT
)))

161 
size
-->0)

162 *
°r
++ = ' ';

163 i‡(
sign
)

164 *
°r
++ = 
sign
;

165 i‡(
ty≥
 & 
SPECIAL
) {

166 i‡(
ba£
==8)

167 *
°r
++ = '0';

168 i‡(
ba£
==16) {

169 *
°r
++ = '0';

170 *
°r
++ = 
digôs
[33];

173 i‡(!(
ty≥
 & 
LEFT
))

174 
size
-- > 0)

175 *
°r
++ = 
c
;

176 
i
 < 
¥ecisi⁄
--)

177 *
°r
++ = '0';

178 
i
-- > 0)

179 *
°r
++ = 
tmp
[
i
];

180 
size
-- > 0)

181 *
°r
++ = ' ';

182  
°r
;

183 
	}
}

186 
•rötf
(* 
buf
, c⁄° *
fmt
, ...);

188 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

190 
Àn
;

191 #ifde‡
CFG_64BIT_VSPRINTF


192 
num
;

194 
num
;

196 
i
, 
ba£
;

197 * 
°r
;

198 c⁄° *
s
;

200 
Êags
;

202 
fõld_width
;

203 
¥ecisi⁄
;

205 
quÆifõr
;

207 
°r
=
buf
 ; *
fmt
 ; ++fmt) {

208 i‡(*
fmt
 != '%') {

209 *
°r
++ = *
fmt
;

214 
Êags
 = 0;

215 
ª≥©
:

216 ++
fmt
;

217 *
fmt
) {

218 '-': 
Êags
 |
LEFT
; 
ª≥©
;

219 '+': 
Êags
 |
PLUS
; 
ª≥©
;

220 ' ': 
Êags
 |
SPACE
; 
ª≥©
;

221 '#': 
Êags
 |
SPECIAL
; 
ª≥©
;

222 '0': 
Êags
 |
ZEROPAD
; 
ª≥©
;

226 
fõld_width
 = -1;

227 i‡(
	`is_digô
(*
fmt
))

228 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

229 i‡(*
fmt
 == '*') {

230 ++
fmt
;

232 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

233 i‡(
fõld_width
 < 0) {

234 
fõld_width
 = -field_width;

235 
Êags
 |
LEFT
;

240 
¥ecisi⁄
 = -1;

241 i‡(*
fmt
 == '.') {

242 ++
fmt
;

243 i‡(
	`is_digô
(*
fmt
))

244 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

245 i‡(*
fmt
 == '*') {

246 ++
fmt
;

248 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

250 i‡(
¥ecisi⁄
 < 0)

251 
¥ecisi⁄
 = 0;

255 
quÆifõr
 = -1;

256 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'q') {

257 
quÆifõr
 = *
fmt
;

258 ++
fmt
;

262 
ba£
 = 10;

264 *
fmt
) {

266 i‡(!(
Êags
 & 
LEFT
))

267 --
fõld_width
 > 0)

268 *
°r
++ = ' ';

269 *
°r
++ = (Ë
	`va_¨g
(
¨gs
, );

270 --
fõld_width
 > 0)

271 *
°r
++ = ' ';

275 
s
 = 
	`va_¨g
(
¨gs
, *);

276 i‡(!
s
)

277 
s
 = "<NULL>";

279 
Àn
 = 
	`°∫Àn
(
s
, 
¥ecisi⁄
);

281 i‡(!(
Êags
 & 
LEFT
))

282 
Àn
 < 
fõld_width
--)

283 *
°r
++ = ' ';

284 
i
 = 0; i < 
Àn
; ++i)

285 *
°r
++ = *
s
++;

286 
Àn
 < 
fõld_width
--)

287 *
°r
++ = ' ';

291 i‡(
fõld_width
 == -1) {

292 
fõld_width
 = 2*(*);

293 
Êags
 |
ZEROPAD
;

295 
°r
 = 
	`numbî
(str,

296 (Ë
	`va_¨g
(
¨gs
, *), 16,

297 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

302 i‡(
quÆifõr
 == 'l') {

303 * 
ù
 = 
	`va_¨g
(
¨gs
, *);

304 *
ù
 = (
°r
 - 
buf
);

306 * 
ù
 = 
	`va_¨g
(
¨gs
, *);

307 *
ù
 = (
°r
 - 
buf
);

312 *
°r
++ = '%';

317 
ba£
 = 8;

321 
Êags
 |
LARGE
;

323 
ba£
 = 16;

328 
Êags
 |
SIGN
;

333 *
°r
++ = '%';

334 i‡(*
fmt
)

335 *
°r
++ = *
fmt
;

337 --
fmt
;

340 #ifde‡
CFG_64BIT_VSPRINTF


341 i‡(
quÆifõr
 == 'q')

342 
num
 = 
	`va_¨g
(
¨gs
, );

345 i‡(
quÆifõr
 == 'l')

346 
num
 = 
	`va_¨g
(
¨gs
, );

347 i‡(
quÆifõr
 == 'h') {

348 
num
 = (Ë
	`va_¨g
(
¨gs
, );

349 i‡(
Êags
 & 
SIGN
)

350 
num
 = ()Çum;

351 } i‡(
Êags
 & 
SIGN
)

352 
num
 = 
	`va_¨g
(
¨gs
, );

354 
num
 = 
	`va_¨g
(
¨gs
, );

355 
°r
 = 
	`numbî
(°r, 
num
, 
ba£
, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

357 *
°r
 = '\0';

358  
°r
-
buf
;

359 
	}
}

361 
	$•rötf
(* 
buf
, c⁄° *
fmt
, ...)

363 
va_li°
 
¨gs
;

364 
i
;

366 
	`va_°¨t
(
¨gs
, 
fmt
);

367 
i
=
	`v•rötf
(
buf
,
fmt
,
¨gs
);

368 
	`va_íd
(
¨gs
);

369  
i
;

370 
	}
}

372 
	$∑nic
(c⁄° *
fmt
, ...)

374 
va_li°
 
¨gs
;

375 
	`va_°¨t
(
¨gs
, 
fmt
);

376 
	`v¥ötf
(
fmt
, 
¨gs
);

377 
	`putc
('\n');

378 
	`va_íd
(
¨gs
);

379 #i‡
	`deföed
 (
CONFIG_PANIC_HANG
)

380 
	`h™g
();

382 
	`udñay
 (100000);

383 
	`do_ª£t
 (
NULL
, 0, 0, NULL);

385 
	}
}

	@main.c

1 
	~"c⁄fig.h
"

2 
	~"èsk_m™age.h
"

6 
u32
 
check_fifo_˙t
;

7 
	$maö
()

12 
	`£rül_öô
(115200);

13 
	`u¥ötf
("hello word\n");

14 
DIS_CPU_INT


29 
	`èsk_run
();

32 
	}
}

	@msg/q_msg.c

1 
	~"q_msg.h
"

3 
q_msg_°ru˘
 *
	$√w_q_msg
(*
«me
, 
u16
 
msg_size
)

5 
q_msg_°ru˘
 *
√w_q
 = (q_msg_°ru˘ *)
	`mÆloc
((q_msg_struct));

6 if(
√w_q
 == 0)

11 
√w_q
->
msg_buff
 = (
u32
 *)
	`mÆloc
((u32)*
msg_size
);

12 
√w_q
->
«me
 =Çame;

13 
√w_q
->
msg_num
 = 0;

14 
√w_q
->
buff_size
 = 
msg_size
;

15 
√w_q
->
w_±r
 = 0;

16 
√w_q
->
r_±r
 = 0;

17  
√w_q
;

18 
	}
}

20 
	$‰ì_q_msg
(
q_msg_°ru˘
 *
q_msg
)

22 if(
q_msg
 == 0)

27 if(
q_msg
->
msg_buff
)

29 
	`‰ì
(
q_msg
->
msg_buff
);

32 
	`‰ì
(
q_msg
);

33 
	}
}

36 
u8
 
	$q_po°
(
q_msg_°ru˘
 *
q_msg
, 
u32
 
msg
)

38 if(
q_msg
 == 0)

43 if(
q_msg
->
msg_num
 =q_msg->
buff_size
)

48 
q_msg
->
msg_buff
[q_msg->
w_±r
++] = 
msg
;

49 
q_msg
->
msg_num
++;

51 if(
q_msg
->
w_±r
 =q_msg->
buff_size
)

53 
q_msg
->
w_±r
 = 0;

56 
	}
}

58 
u32
 
	$q_≥nd
(
q_msg_°ru˘
 *
q_msg
)

60 
u32
 
msg
;

61 if(
q_msg
 == 0)

66 if(
q_msg
->
msg_num
 == 0)

71 
msg
 = 
q_msg
->
msg_buff
[q_msg->
r_±r
++];

72 
q_msg
->
msg_num
--;

74 if(
q_msg
->
r_±r
 =q_msg->
buff_size
)

76 
q_msg
->
r_±r
 = 0;

79  
msg
;

80 
	}
}

82 
u16
 
	$gë_q_msg_num
(
q_msg_°ru˘
 *
q_msg
)

84 if(
q_msg
 == 0)

88  
q_msg
->
msg_num
;

89 
	}
}

91 
u16
 
	$gë_q_msg_‰ì
(
q_msg_°ru˘
 *
q_msg
)

93 if(
q_msg
 == 0)

97  
q_msg
->
buff_size
- q_msg->
msg_num
;

98 
	}
}

100 
	$q_msg_Êush
(
q_msg_°ru˘
 *
q_msg
)

102 
q_msg
->
msg_num
 = 0;

103 
q_msg
->
w_±r
 = 0;

104 
q_msg
->
r_±r
 = 0;

105 
	}
}

	@msg/q_msg.h

1 #i‚de‡
_Q_MSG_


2 
	#_Q_MSG_


	)

3 
	~"c⁄fig.h
"

7 
u32
 *
	mmsg_buff
;

8 
u16
 
	mbuff_size
;

9 
u16
 
	mmsg_num
;

10 
u16
 
	mr_±r
;

11 
u16
 
	mw_±r
;

12 *
	m«me
;

13 }
	tq_msg_°ru˘
;

15 
q_msg_°ru˘
 *
√w_q_msg
(*
«me
, 
u16
 
msg_size
);

16 
‰ì_q_msg
(
q_msg_°ru˘
 *
q_msg
);

17 
u8
 
q_po°
(
q_msg_°ru˘
 *
q_msg
, 
u32
 
msg
);

18 
u32
 
q_≥nd
(
q_msg_°ru˘
 *
q_msg
);

19 
u16
 
gë_q_msg_num
(
q_msg_°ru˘
 *
q_msg
);

20 
q_msg_Êush
(
q_msg_°ru˘
 *
q_msg
);

21 
u16
 
gë_q_msg_‰ì
(
q_msg_°ru˘
 *
q_msg
);

	@sddrv/s3c2440_sdio.c

1 
	~"c⁄fig.h
"

2 
	~"s3c2440_sdio.h
"

3 
	~"s3c2440_u¨t.h
"

4 
	~"S3C2440.H
"

6 * 
	gi§_h™dÀ_¨øy
 = (*) 0x33fb06b0;

7 
u8
 
sdio_i§
();

8 
sdio_h™dÀ
 *
	gsdio_hd
 = 0;

9 vﬁ©ûê
u8
 
	g°ï
 = 0;

18 
	$sdio_öô
()

20 
u32
 
i
;

22 
SDIO
->
CON
 = (0x01<<8);

23 
CLCKCON
 |= 0x01<<9;

24 
SDIO
->
PRE
 = 500;

26 
SDIO
->
BSIZE
 = 512;

27 
SDIO
->
DATCON
 = (1<<20)|(1<<19)|(1<<18);

29 
GPEUP
 &= ~(0x1f<<6);

30 
GPECON
 &= ~((0x03<<10)|(0x03<<12)|(0x03<<14)|(0x03<<16)|(0x03<<18)|(0x03<<20));

31 
GPECON
 |= (0x02<<10)|(0x02<<12)|(0x02<<14)|(0x02<<16)|(0x02<<18)|(0x02<<20);

32 
SDIO
->
CON
 = (0x01<<2)|0x01;

34 
	`ªgi°î_úq
(
INT_SDI
, 0, 
sdio_i§
);

36 
	`dñay
(1000);

37 
	}
}

39 
	$sdio_exô
()

41 
	`dißbÀ_úq
(
INT_SDI
);

42 
SDIO
->
CON
 &= ~0x01;

43 
CLCKCON
 &~
	`BIT
(9);

44 
	}
}

46 
ölöe
 
u8
 
	$check_sdio_busy
()

48  
°ï
;

49 
	}
}

50 
ölöe
 
	$£t_sdio_˛k
(
u8
 
¥e
)

52 
SDIO
->
PRE
 = 
¥e
;

53 
	}
}

54 
u8
 
	$›í_sdio
(
sdio_h™dÀ
 *
hd
)

56 if(
hd
 == 0)

60 
sdio_hd
 = 
hd
;

61 
sdio_hd
->
buff
 = 0;

62 
sdio_hd
->
d©a_˙t
 = 0;

63 
sdio_hd
->
d©a_Àn
 = 0;

64 
sdio_hd
->
°a_Êag
 = 0;

65 
sdio_hd
->
cmd
.cmd = 0;

66 
sdio_hd
->
cmd
.
wôhd©a
 = 0;

67 
°ï
 = 0;

68 
	`sdio_öô
();

70 
	}
}

72 
u8
 
	$sdio_£nd_d©a
(
u8
 
°¨t
)

75 if(
°ï
 == 0)

78 if(
sdio_hd
 == 0)

81 if(
sdio_hd
->
buff
 == 0)

84 
SDIO
->
TIMER
 = 0x2ffff;

85 
SDIO
->
BSIZE
 = 
BLOCK_SIZE
;

86 
SDIO
->
DATCON
 = 
DATASIZE_U8
|
BLKMODE_BLOCK
|
WIDEBUS_4BIT
|
SEND_DATA_MODE
|0X01;

88 
SDIO
->
FSTA
&
TF_DET
)

90 if(
sdio_hd
->
d©a_˙t
 >sdio_hd->
d©a_Àn
)

94 
SDIDATB
 = 
sdio_hd
->
buff
[sdio_hd->
d©a_˙t
++];

98 if((
sdio_hd
->
d©a_˙t
 >
BLOCK_SIZE
))

104 if(
°¨t
)

105 
SDIO
->
DATCON
 |
DATA_START
;

109 
	}
}

111 
u8
 
	$sdio_ªcive_d©a
(
u8
 
°¨t
)

114 if(
°ï
 == 0)

117 if(
sdio_hd
 == 0)

120 if(
sdio_hd
->
buff
 == 0)

123 
SDIO
->
TIMER
 = 0x2ffff;

124 
SDIO
->
BSIZE
 = 
BLOCK_SIZE
;

125 
SDIO
->
DATCON
 = 
DATASIZE_U8
|
BLKMODE_BLOCK
|
WIDEBUS_4BIT
|
RECIVE_DATA_MODE
|0x01;

127 
SDIO
->
FSTA
&
RF_DET
)

130 if(
sdio_hd
->
d©a_˙t
 >sdio_hd->
d©a_Àn
)

133 
sdio_hd
->
buff
[sdio_hd->
d©a_˙t
++] = 
SDIDATB
;

136 if(
°¨t
)

137 
SDIO
->
DATCON
 |
DATA_START
;

140 
	}
}

148 
u8
 
	$sdio_cmd_£nd
(
sdio_h™dÀ
 *
hd
)

150 
u8
 
ªs
 = 0;

151 
u32
 
msk
 = 0;

152 if(
hd
 == 0)

156 if(
	`check_sdio_busy
())

161 
sdio_hd
 = 
hd
;

162 
SDIO
->
CMDSTA
 |= 0x1f00;

163 
SDIO
->
CMDARG
 = 
sdio_hd
->
cmd
.
¨g
;

164 
SDIO
->
CMDCON
 = (
sdio_hd
->
cmd
.cmd&0x3f)|(1<<6);

166 if(
sdio_hd
->
cmd
.
ab‹tcmd
)

168 
SDIO
->
CMDCON
 |=1<<12;

171 if(
sdio_hd
->
cmd
.
wôhd©a
)

173 
SDIO
->
CMDCON
 |=1<<11;

174 
msk
 |
RECIBE_CRC_ERR_INT
|
DATATIMEOUT_INT
|
DATAFIN_INT
|
TFHALF_INT
|
REHAFL_INT
;

177 if(
sdio_hd
->
cmd
.
r•_ty≥
)

179 
sdio_hd
->
r•
[0] = 0;

180 
sdio_hd
->
r•
[1] = 0;

181 
sdio_hd
->
r•
[2] = 0;

182 
sdio_hd
->
r•
[3] = 0;

183 
SDIO
->
CMDCON
 |=1<<9;

184 
msk
 |
RSPCRC_INT
|
RSPEND_INT
;

185 if(
sdio_hd
->
cmd
.
r•_ty≥
 == 2)

187 
SDIO
->
CMDCON
 |=1<<10;

193 
msk
 |
CMD_SEND_INT
;

196 
msk
 |
CMDTIMEOUT_INT
|
CRCSTA_INT
;

198 
°ï
 = 1;

199 
sdio_hd
->
°a_Êag
 = 0;

200 
SDIO
->
CMDCON
 |= 0x01<<8;

201 
SDIO
->
INT_MSK
 = 
msk
;

203 if(
sdio_hd
->
cmd
.
wôhd©a
)

205 
sdio_hd
->
d©a_˙t
 = 0;

206 
SDIO
->
DATSTA
 = 0x0fff;

207 
SDIO
->
FSTA
 =(0x1<<16);

209 if(
sdio_hd
->
d©a_dú
)

211 
	`sdio_ªcive_d©a
(1);

217 
	`sdio_£nd_d©a
(1);

221 
°ï
==1)

224 
	`dñay
(10);

228 if(
sdio_hd
->
°a_Êag
)

234 
	}
}

235 
u8
 
	gª°©_˙t
 = 0;

236 
u8
 
	$ª_°¨t_cmd
()

239 if(
ª°©_˙t
++ == 5)

241 
ª°©_˙t
 = 0;

245 
SDIO
->
CMDCON
 |= 0x01<<8;

247 
°ï
 = 1;

248 
sdio_hd
->
°a_Êag
 = 0;

249 if(
sdio_hd
->
cmd
.
wôhd©a
)

251 
sdio_hd
->
d©a_˙t
 = 0;

252 
SDIO
->
DATSTA
 = 0x0fff;

253 
SDIO
->
FSTA
 =(0x1<<16);

255 if(
sdio_hd
->
d©a_dú
)

257 
	`sdio_ªcive_d©a
(1);

261 
	`sdio_£nd_d©a
(1);

266 
	}
}

267 
u8
 
	$sdio_i§
()

270 if(
sdio_hd
)

273 if(
SDIO
->
CMDSTA
 & 
RSPCRC_ERR
)

275 
	`sd_¥ötf
("cmd crc\n\r");

280 
sdio_hd
->
°a_Êag
 |
CRC_ERR
;

281 
°ï
 = 0;

282 
SDIO
->
CMDSTA
 |
RSPCRC_ERR
;

283 
sdio_hd
->
r•
[0] = 
SDIO
->
RSP0
;

287 if(
SDIO
->
CMDSTA
 & 
CMDTOUT
)

289 
	`sd_¥ötf
("cmdÅime out\n\r");

290 if(
	`ª_°¨t_cmd
() == 0)

294 
sdio_hd
->
°a_Êag
 |
TOUT
;

295 
°ï
 = 0;

296 
SDIO
->
CMDSTA
 |
CMDTOUT
;

299 if(
sdio_hd
->
cmd
.
r•_ty≥
 == 0)

301 if(
SDIO
->
CMDSTA
 & 
CMD_SEND_END
)

303 
	`sd_¥ötf
("cmd send\n\r");

304 
SDIO
->
CMDSTA
 |
CMD_SEND_END
;

305 
°ï
 = 0;

310 if(
SDIO
->
CMDSTA
 & 
RSPFIN
)

312 
	`sd_¥ötf
("cmdÑsp\n\r");

313 if(
sdio_hd
->
cmd
.
wôhd©a
)

315 
°ï
 = 2;

319 
°ï
 = 0;

322 if(
sdio_hd
->
cmd
.
r•_ty≥
 == 2)

324 
	`sd_¥ötf
("r•_ty≥ %d\n\r", 
°ï
);

325 
sdio_hd
->
r•
[0] = 
SDIO
->
RSP3
;

326 
sdio_hd
->
r•
[1] = 
SDIO
->
RSP2
;

327 
sdio_hd
->
r•
[2] = 
SDIO
->
RSP1
;

328 
sdio_hd
->
r•
[3] = 
SDIO
->
RSP0
;

332 
sdio_hd
->
r•
[0] = 
SDIO
->
RSP0
;

335 
SDIO
->
CMDSTA
 |
RSPFIN
;

351 if(
SDIO
->
DATSTA
 & 
BUSYTFIN_STA
)

353 
	`sd_¥ötf
("busy %d\n\r", 
SDIO
->
DATSTA
 & 
NOBUSY_STA
);

354 if((
SDIO
->
DATSTA
 & 
NOBUSY_STA
)==0)

357 
sdio_hd
->
°a_Êag
 |
SD_BUSY
;

362 
SDIO
->
DATSTA
 |
NOBUSY_STA
;

364 
°ï
 = 0;

365 
SDIO
->
DATSTA
 |
BUSYTFIN_STA
;

368 if(
sdio_hd
->
cmd
.
wôhd©a
)

370 if(
SDIO
->
DATSTA
 & 
CRCERR_STA
)

372 
	`sd_¥ötf
("CRCERR_STA\n\r");

373 if(
	`ª_°¨t_cmd
() == 0)

377 
sdio_hd
->
°a_Êag
 |
CRC_ERR
;

378 
°ï
 = 0;

379 
SDIO
->
DATSTA
 |
CRCERR_STA
;

382 if(
SDIO
->
DATSTA
 & 
DATACRC_STA
)

384 
	`sd_¥ötf
("DATACRC_STA\n\r");

385 if(
	`ª_°¨t_cmd
() == 0)

389 
sdio_hd
->
°a_Êag
 |
CRC_ERR
;

390 
°ï
 = 0;

391 
SDIO
->
DATSTA
 |
DATACRC_STA
;

395 if(
SDIO
->
DATSTA
 & 
DATATIMEOUT_STA
)

397 
SDIO
->
DATSTA
 |
DATATIMEOUT_STA
;

398 
	`sd_¥ötf
("DATATIMEOUT_STA\n\r");

399 if(
°ï
)

401 if(
	`ª_°¨t_cmd
() == 0)

405 
sdio_hd
->
°a_Êag
 |
TOUT
;

406 
°ï
 = 0;

412 if(
SDIO
->
DATSTA
 & 
DATFIN_STA
)

415 
°ï
 = 0;

416 
SDIO
->
DATSTA
 |
DATFIN_STA
;

417 
SDIO
->
DATCON
 = 0;

422 if(
sdio_hd
->
d©a_dú
 == 1)

425 if(
SDIO
->
FSTA
 & 
RF_HAFL
)

428 
	`sdio_ªcive_d©a
(0);

430 if(
SDIO
->
FSTA
 & 
RF_LAST
)

434 
	`sdio_ªcive_d©a
(0);

440 if(
SDIO
->
FSTA
 & 
TF_HALF
)

442 
	`sd_¥ötf
("TF_HALF 0x%x\n\r", 
SDIO
->
DATSTA
);

443 
	`sdio_£nd_d©a
(0);

450 
SDIO
->
DATSTA
 = 0x0fff;

455 
SDIO
->
CMDSTA
 |= 0x1f00;

456 
SDIO
->
DATSTA
 = 0x0fff;

458 
SRCPND
 |
	`BIT
(25);

459 
INTPND
 |
	`BIT
(25);

461 
	}
}

	@sddrv/s3c2440_sdio.h

1 #i‚de‡
_SDIO_


2 
	#_SDIO_


	)

5 #ifde‡
SD_DEBUG


6 
	#sd_¥ötf
 
u¥ötf


	)

8 
	#sd_¥ötf
(...)

	)

10 
	ssdio_ªg


12 vﬁ©ûê
	mCON
;

13 vﬁ©ûê
	mPRE
;

14 vﬁ©ûê
	mCMDARG
;

15 vﬁ©ûê
	mCMDCON
;

16 vﬁ©ûê
	mCMDSTA
;

17 vﬁ©ûê
	mRSP0
;

18 vﬁ©ûê
	mRSP1
;

19 vﬁ©ûê
	mRSP2
;

20 vﬁ©ûê
	mRSP3
;

21 vﬁ©ûê
	mTIMER
;

22 vﬁ©ûê
	mBSIZE
;

23 vﬁ©ûê
	mDATCON
;

24 vﬁ©ûê
	mDATCNT
;

25 vﬁ©ûê
	mDATSTA
;

26 vﬁ©ûê
	mFSTA
;

27 vﬁ©ûê
	mINT_MSK
;

28 vﬁ©ûê
	mDAT
;

29 } 
	tsdio_ªg
;

31 
	#SDIO
 ((vﬁ©ûê
sdio_ªg
 *)0x5A000000)

	)

32 
	#SDIDATB
 *((vﬁ©ûê
u8
 *)0x5A000048)

	)

33 
	#GPECON
 *((vﬁ©ûê*)0x56000040)

	)

34 
	#GPEUP
 *((vﬁ©ûê*)0x56000048)

	)

36 
	#BLOCK_SIZE
 (512)

	)

37 
	#DATASIZE_U32
 (0x02<<22)

	)

38 
	#DATASIZE_U16
 (0x01<<22)

	)

39 
	#DATASIZE_U8
 (0)

	)

41 
	#BLKMODE_BLOCK
 (1<<17)

	)

42 
	#BLKMODE_FLUX
 (0<<17)

	)

44 
	#WIDEBUS_4BIT
 (1<<16)

	)

45 
	#WIDEBUS_1BIT
 (0<<16)

	)

47 
	#EnDMA
 (1<<15)

	)

48 
	#DisDMA
 (0<<15)

	)

50 
	#DATA_START
 (1<<14)

	)

52 
	#SEND_DATA_MODE
 (3<<12)

	)

53 
	#RECIVE_DATA_MODE
 (2<<12)

	)

54 
	#CHECK_BUSY
 (1<<12)

	)

57 
	#NOBUSY_INT
 (1<<18)

	)

58 
	#RSPCRC_INT
 (1<<17)

	)

59 
	#CMD_SEND_INT
 (1<<16)

	)

60 
	#CMDTIMEOUT_INT
 (1<<15)

	)

61 
	#RSPEND_INT
 (1<<14)

	)

62 
	#RWREQ_INT
 (1<<13)

	)

63 
	#CRCSTA_INT
 (1<<10)

	)

64 
	#RECIBE_CRC_ERR_INT
 (1<<9)

	)

65 
	#DATATIMEOUT_INT
 (1<<8)

	)

66 
	#DATAFIN_INT
 (1<<7)

	)

67 
	#BUSYFIN_INT
 (1<<6)

	)

68 
	#TFHALF_INT
 (1<<4)

	)

69 
	#TFEMPT_INT
 (1<<3)

	)

70 
	#RTLAST_INT
 (1<<2)

	)

71 
	#REFULL_INT
 (1<<1)

	)

72 
	#REHAFL_INT
 (1<<0)

	)

76 
	#NOBUSY_STA
 (1<<11)

	)

77 
	#CRCERR_STA
 (1<<7)

	)

78 
	#DATACRC_STA
 (1<<6)

	)

79 
	#DATATIMEOUT_STA
 (1<<5)

	)

80 
	#DATFIN_STA
 (1<<4)

	)

81 
	#BUSYTFIN_STA
 (1<<3)

	)

82 
	#TXDATAON
 (1<<1)

	)

83 
	#RXDATAON
 (1<<0)

	)

87 
	#RSPCRC_ERR
 (1<<12)

	)

88 
	#CMD_SEND_END
 (1<<11)

	)

89 
	#CMDTOUT
 (1<<10)

	)

90 
	#RSPFIN
 (1<<9)

	)

91 
	#CMD_ON
 (1<<8)

	)

94 
	#FF_FAIL
 (3<<14)

	)

95 
	#TF_DET
 (1<<13)

	)

96 
	#RF_DET
 (1<<12)

	)

97 
	#TF_HALF
 (1<<11)

	)

98 
	#TF_EMPT
 (1<<10)

	)

99 
	#RF_LAST
 (1<<9)

	)

100 
	#RF_FULL
 (1<<8)

	)

101 
	#RF_HAFL
 (1<<7)

	)

104 
	#CRC_ERR
 (1<<8)

	)

105 
	#TOUT
 (1<<7)

	)

106 
	#CMD_MATCH
 (1<<6)

	)

107 
	#SD_BUSY
 (1<<5)

	)

109 
	ssdio_cmd


111 
u8
 
	mcmd
;

112 
boﬁ
 
	mab‹tcmd
;

113 
boﬁ
 
	mwôhd©a
;

114 
u8
 
	mr•_ty≥
;

115 
u32
 
	m¨g
;

116 }
	tsdio_cmd
;

118 
	ssdio_h™dÀ


120 
sdio_cmd
 
	mcmd
;

121 
u16
 
	md©a_Àn
;

122 
u16
 
	md©a_˙t
;

123 
u32
 
	mr•
[4];

124 
u8
 *
	mbuff
;

125 
u8
 
	md©a_dú
;

126 
u8
 
	m°a_Êag
;

127 } 
	tsdio_h™dÀ
;

129 
sdio_öô
();

130 
u8
 
sdio_cmd_£nd
(
sdio_h™dÀ
 *
hd
);

131 
u8
 
›í_sdio
(
sdio_h™dÀ
 *
hd
) ;

132 
sdio_exô
();

133 
ölöe
 
u8
 
check_sdio_busy
();

134 
ölöe
 
£t_sdio_˛k
(
u8
 
¥e
);

	@sddrv/sd_dev_api.c

1 
	~"sd_drv.h
"

2 
	~"sd_dev_≠i.h
"

3 
	~"dev_m™age.h
"

4 
	gsd_maj‹
 = 0xffff;

5 
	$sd_dev_mou¡
(
maj‹
, *
∑rm
)

7 
sd_maj‹
 = 
maj‹
;

8  
	`sd_öô
();

9 
	}
}

11 
	$sd_dev_umou¡
()

13 if(
	`gë_sd_busy
())

16 
	`sd_exô
();

18 
	}
}

20 
	$sd_ªad_≠i
(
block_addr
, *
buf„r
, 
Àn
)

22 
ªs
, 
block_˙t
 = 0;

23 
Àn
--)

25 
ªs
 = 
	`sd_ªad_block
(
block_addr
, (
u8
 *)
buf„r
, 1);

26 if(
ªs
)

27  
block_addr
;

29 
block_˙t
++;

31  
block_˙t
;

32 
	}
}

34 
	$sd_wrôe_≠i
(
block_addr
, *
buf„r
, 
Àn
)

36 
ªs
, 
block_˙t
 = 0;

37 
Àn
--)

39 
ªs
 = 
	`sd_wrôe_block
(
block_addr
, (
u8
 *)
buf„r
, 1);

40 if(
ªs
)

41  
block_addr
;

43 
block_addr
++;

45  
block_addr
;

46 
	}
}

48 
	$sd_io˘æ_≠i
(
cmd
, *
∑rm
)

50 
cmd
)

55 
	}
}

57 
ªgi°î_dev_io
 
	gsd_dev_io
 =

59 .
dev_«me
 = "sd",

60 .
	gboŸ_m⁄ut
 = 1,

61 .
	gdev_ty≥
 = 
BLOCK_DEV
,

62 .
	gªad
 = 
sd_ªad_≠i
,

63 .
	gwrôe
 = 
sd_wrôe_≠i
,

64 .
	gmou¡
 = 
sd_dev_mou¡
,

65 .
	gumou¡
 = 
sd_dev_umou¡
,

66 .
	gio˘æ
 = 
sd_io˘æ_≠i
,

	@sddrv/sd_dev_api.h

1 #i‚de‡
_SD_DEV_API_


2 
	#_SD_DEV_API_


	)

6 
	mGET_DEV_BUYS
 = 0x00,

7 
	mGET_BLOCK_SIZE
,

8 
	mSET_DATA_SPEED
,

9 
	mGET_MAX_


10 }
	gDEV_CTRL_CMD
;

	@sddrv/sd_drv.c

1 
	~"c⁄fig.h
"

2 
	~"s3c2440_sdio.h
"

3 
	~"sd_drv.h
"

4 
	~"s3c2440_u¨t.h
"

7 c⁄° 
u8
 
	g°dio_cmd_èbÀ
[][5]=

38 
u8
 *
	gsd_wrôe_buff
 = 
NULL
;

39 #i‡(
SD_MALLOC
==0)

40 
u8
 
	gsd_wrôe_buf„r
[
SD_BLOCK_SIZE
];

41 #i‡
WIN_CACHE


42 
u8
 
	gsd_wö_ˇche
[3][
SD_BLOCK_SIZE
];

46 
sdio_h™dÀ
 
	gsdio_hd
;

48 
sd_h™dÀ
 
	gsd_hd
 =

50 .
öô_Êag
 = 0,

52 
sd_wö
 
	gwrôe_wö
[2];

53 
sd_wö
 
	gªad_wö
;

55 
u8
 
	$lﬂd_cmd
(
sdio_h™dÀ
 *
hd
, 
u8
 
cmd
, 
u32
 
¨g
)

57 if(
cmd
 >=(
°dio_cmd_èbÀ
)/( stdio_cmd_table[0]))

60 
hd
->
cmd
.cmd = 
°dio_cmd_èbÀ
[cmd][0];

61 
hd
->
cmd
.
ab‹tcmd
 = 
°dio_cmd_èbÀ
[cmd][1];

62 
hd
->
cmd
.
wôhd©a
 = 
°dio_cmd_èbÀ
[cmd][2];

63 
hd
->
cmd
.
r•_ty≥
 = 
°dio_cmd_èbÀ
[cmd][3] + stdio_cmd_table[cmd][4];

66 
hd
->
cmd
.
¨g
 =árg;

68 
	}
}

76 
u8
 
	$sd_£nd_cmd
(
u8
 
cmd
, 
u32
 
¨g
)

78 
u8
 
ªs
;

79 
	`check_sdio_busy
())

81 
	`dñay
(10);

84 
ªs
 = 
	`lﬂd_cmd
(&
sdio_hd
, 
cmd
, 
¨g
);

85 if(
ªs
)

90 
ªs
 = 
	`sdio_cmd_£nd
(&
sdio_hd
);

91 if(
ªs
)

93 
	`sd_¥ötf
("sd cmdÉº:%d\n", 
ªs
);

98 
	}
}

101 
u8
 
	$™Æysis_CSD
(
u32
 *
csd
)

103 
u32
 
c_size
;

104 
u32
 
size_mu…
;

105 
u8
 
sd_ty≥
 = 
	`gë_bô_vÆue
(
csd
, 126, 1);

106 
sd_hd
.
d©a_èns„r
 = 
	`gë_bô_vÆue
(
csd
, 96, 8)>>1;

107 
sd_hd
.
block_size
 = 0x0001<<
	`gë_bô_vÆue
(
csd
,80,4);

108 if(!
	`gë_bô_vÆue
(
csd
, 96, 8))

110 
c_size
 = 
	`gë_bô_vÆue
(
csd
,62,12);

111 
size_mu…
 = 
	`gë_bô_vÆue
(
csd
,47,3);

112 
sd_hd
.
block_num
 = (
c_size
+1)*(0x01<<(
size_mu…
+2));

113 
sd_hd
.
sd_size
 =sd_hd.
block_num
 /1024 * sd_hd.
block_size
;

117 
c_size
 = 
	`gë_bô_vÆue
(
csd
,48,22);

118 
sd_hd
.
sd_size
 =(
c_size
+1)<<9;

119 
sd_hd
.
block_num
 = sd_hd.
sd_size
*2;

122 
	`sd_¥ötf
("c_size:%d size_mu…:%d\n\r", 
c_size
, 
size_mu…
);

126 
	`sd_¥ötf
("tansfer:%dMbit/s block s:%d bnum:%d\n\r",\

127 
sd_hd
.
d©a_èns„r
, sd_hd.
block_size
, sd_hd.
block_num
);

128 
	`sd_¥ötf
("sd_size:%d\n\r",
sd_hd
.
sd_size
);

130 
	}
}

132 #i‡
WIN_CACHE


133 
boﬁ
 
	gwrôe_ˇche_num
 = 0;

134 
u16
 
	$sd_wrôe
(
u32
 
block_num
, 
u16
 
off£t
, 
u8
 *
buff
, u16 
buff_Àn
)

136 
u8
 
ªs
;

137 if(
buff_Àn
 > (
SD_BLOCK_SIZE
 - 
off£t
))

139 
buff_Àn
 = 
SD_BLOCK_SIZE
 - 
off£t
;

142 if(
block_num
 !
wrôe_wö
[
wrôe_ˇche_num
].block_num)

145 
wrôe_ˇche_num
 = !write_cache_num;

147 if(
block_num
 !
wrôe_wö
[
wrôe_ˇche_num
].block_num)

149 
	`check_sdio_busy
())

151 
	`dñay
(10);

154 if(
block_num
 =
ªad_wö
.block_num)

156 
	`mem˝y
(
wrôe_wö
[
wrôe_ˇche_num
].
buff
, 
ªad_wö
.buff, 
SD_BLOCK_SIZE
);

160 
ªs
 = 
	`sd_ªad_block
(
block_num
, 
wrôe_wö
[
wrôe_ˇche_num
].
buff
, 0);

161 if(
ªs
)

166 
wrôe_wö
[
wrôe_ˇche_num
].
block_num
 = block_num;

170 
	`sd_¥ötf
("wrôêblock %d :%d %d:%d\n\r", !
wrôe_ˇche_num
, 
wrôe_wö
[!wrôe_ˇche_num].
block_num
, write_cache_num, write_win[write_cache_num].block_num);

173 if(
wrôe_wö
[!
wrôe_ˇche_num
].
block_num
 < 0xffffffff)

176 
ªs
 = 
	`sd_wrôe_block
(
wrôe_wö
[!
wrôe_ˇche_num
].
block_num
, wrôe_wö[!wrôe_ˇche_num].
buff
, 0);

177 if(
ªs
)

182 if(
wrôe_wö
[!
wrôe_ˇche_num
].
block_num
 =
ªad_wö
.block_num)

184 
	`mem˝y
(
ªad_wö
.
buff
, 
wrôe_wö
[!
wrôe_ˇche_num
].buff, 
SD_BLOCK_SIZE
);

189 
	`mem˝y
(
wrôe_wö
[
wrôe_ˇche_num
].
buff
+
off£t
, buff, 
buff_Àn
);

191  
buff_Àn
;

192 
	}
}

195 
u8
 
	$sync_sd
()

197 
u8
 
ªs
;

198 if(
wrôe_wö
[
wrôe_ˇche_num
].
block_num
 < 0xffffffff)

200 
ªs
 = 
	`sd_wrôe_block
(
wrôe_wö
[
wrôe_ˇche_num
].
block_num
, wrôe_wö[wrôe_ˇche_num].
buff
, 0);

201 if(
ªs
)

203  
ªs
;

206 if(
wrôe_wö
[
wrôe_ˇche_num
].
block_num
 =
ªad_wö
.block_num)

208 
	`mem˝y
(
ªad_wö
.
buff
, 
wrôe_wö
[
wrôe_ˇche_num
].buff, 
SD_BLOCK_SIZE
);

212 
	}
}

215 
u16
 
	$sd_ªad
(
u32
 
block_num
, 
u16
 
off£t
, 
u8
 *
buff
, u16 
buff_Àn
)

217 
u8
 
ªs
;

218 if(
buff_Àn
 > (
SD_BLOCK_SIZE
 - 
off£t
))

220 
buff_Àn
 = 
SD_BLOCK_SIZE
 - 
off£t
;

224 if(
block_num
 =
wrôe_wö
[
wrôe_ˇche_num
].block_num)

226 
	`mem˝y
(
buff
, 
wrôe_wö
[
wrôe_ˇche_num
].buff+
off£t
, 
buff_Àn
);

227 }if(
block_num
 =
wrôe_wö
[!
wrôe_ˇche_num
].block_num)

229 
	`mem˝y
(
buff
, 
wrôe_wö
[!
wrôe_ˇche_num
].buff+
off£t
, 
buff_Àn
);

233 if(
ªad_wö
.
block_num
 != block_num)

235 if(
buff_Àn
 =
SD_BLOCK_SIZE
)

237 
ªs
 = 
	`sd_ªad_block
(
block_num
, 
buff
,1);

238 if(
ªs
)

242  
SD_BLOCK_SIZE
;

246 
ªad_wö
.
block_num
 = block_num;

247 
ªs
 = 
	`sd_ªad_block
(
block_num
, 
ªad_wö
.
buff
,1);

248 if(
ªs
)

250 
ªad_wö
.
block_num
 = 0xffffffff;

255 
	`mem˝y
(
buff
, 
ªad_wö
.buff+
off£t
, 
buff_Àn
);

257  
buff_Àn
;

258 
	}
}

260 
u8
 
	$sd_¥e_ªad
(
u32
 
block_num
)

262 
u8
 
ªs
;

263 
ªad_wö
.
block_num
 = block_num;

264 
ªs
 = 
	`sd_ªad_block
(
block_num
, 
ªad_wö
.
buff
,0);

265 if(
ªs
)

267 
ªad_wö
.
block_num
 = 0xffffffff;

270 
	}
}

272 
u8
 
	$sd_wrôe_block
(
u32
 
block_num
, 
u8
 *
buff
,u8 
waô_Êag
)

274 
u8
 
ªs
;

276 
	`check_sdio_busy
())

278 
	`dñay
(10);

280 if(!
waô_Êag
)

281 
	`mem˝y
(
sd_wrôe_buff
, 
buff
, 
SD_BLOCK_SIZE
);

283 
ªs
 = 
	`lﬂd_cmd
(&
sdio_hd
, 
WRITE_BLOCK
, 
block_num
);

284 
sdio_hd
.
buff
 = buff;

285 
sdio_hd
.
d©a_Àn
 = 512;

286 
sdio_hd
.
d©a_˙t
 = 0;

287 
sdio_hd
.
d©a_dú
 = 0;

288 
ªs
 = 
	`sdio_cmd_£nd
(&
sdio_hd
);

290 if(
waô_Êag
)

292 
	`check_sdio_busy
())

294 
	`dñay
(1);

298 if(
ªs
)

302 
	}
}

304 
ölöe
 
u8
 
	$gë_sd_busy
()

306  
	`check_sdio_busy
();

307 
	}
}

309 
u8
 
	$sd_ªad_block
(
u32
 
block_num
, 
u8
 * 
buff
, u8 
waô_Êag
)

311 
u8
 
ªs
;

312 
	`check_sdio_busy
())

314 
	`dñay
(1);

317 
ªs
 = 
	`lﬂd_cmd
(&
sdio_hd
, 
READ_SINGLE_BLOCK
, 
block_num
);

318 
sdio_hd
.
buff
 = buff;

319 
sdio_hd
.
d©a_Àn
 = 512;

320 
sdio_hd
.
d©a_˙t
 = 0;

321 
sdio_hd
.
d©a_dú
 = 1;

322 
ªs
 = 
	`sdio_cmd_£nd
(&
sdio_hd
);

324 if(
waô_Êag
) {

325 
	`check_sdio_busy
()){

326 
	`dñay
(1);

330 if(
ªs
) {

336 
	}
}

347 
u8
 
	$sd_öô
()

349 
u8
 
ªs
;

350 
u16
 
i
;

351 
u8
 
˙t
 = 100;

353 #i‡
SD_MALLOC


355 
u8
 *
buf„r
;

356 #i‡
WIN_CACHE


357 
buf„r
 =(
u8
 *)
	`mÆloc
(
SD_BLOCK_SIZE
*4);

358 if(
buf„r
 =
NULL
)

361 
wrôe_wö
[0].
buff
 = 
buf„r
 + 
SD_BLOCK_SIZE
;

362 
wrôe_wö
[0].
block_num
 = 0xffffffff;

363 
wrôe_wö
[1].
buff
 = 
buf„r
 + 
SD_BLOCK_SIZE
*2;

364 
wrôe_wö
[1].
block_num
 = 0xffffffff;

365 
ªad_wö
.
buff
 = 
buf„r
 + 
SD_BLOCK_SIZE
*3;

366 
ªad_wö
.
block_num
 = 0xffffffff;

368 
buf„r
 = 
	`mÆloc
(
SD_BLOCK_SIZE
);

369 if(
buf„r
 =
NULL
)

373 
sd_wrôe_buff
 =(
u8
 *)
	`mÆloc
(
SD_BLOCK_SIZE
);

374 if(
sd_wrôe_buff
 =
NULL
)

377 
sd_wrôe_buff
 = &
sd_wrôe_buf„r
[0];

378 
wrôe_wö
[0].
buff
 = &
sd_wö_ˇche
[0][0];

379 
wrôe_wö
[1].
buff
 = &
sd_wö_ˇche
[1][0];

380 
ªad_wn
.
buff
 = &
sd_wö_ˇche
[2][0];

383 
ªs
 = 
	`›í_sdio
(&
sdio_hd
);

384 
	`sd_¥ötf
("›í sdiÿîr:%d\n\r", 
ªs
);

385 if(
ªs
)

388 
	`sd_£nd_cmd
(
GO_IDLE_STATE
, 0);

389 
	`sd_¥ötf
("GO_IDLE_STATE\n\r");

390 
ªs
 = 
	`sd_£nd_cmd
(
SDIO_SEND_IF_COND
, 0x1aa);

391 if(
ªs
)

394 
	`dñay
(10);

395 
	`sd_¥ötf
("SD_BLOCK_SIZE\n\r");

396 
˙t
--)

398 
	`sd_£nd_cmd
(
APP_CMD
, 0);

399 
	`sd_£nd_cmd
(
SD_APP_OP_COND
, 0xc0100000);

400 
	`dñay
(1000);

401 
	`u¥ötf
("r• %x\n\r", 
sdio_hd
.
r•
[0]);

402 if(
sdio_hd
.
r•
[0]&(1<<31))

407 if(
˙t
 == 0)

411 
	`sd_¥ötf
("ALL_SEND_CID\n\r");

412 
ªs
 = 
	`sd_£nd_cmd
(
ALL_SEND_CID
, 0);

413 if(
ªs
)

416 
	`sd_¥ötf
("%s\n\r", 
__löe__
);

417 
ªs
 = 
	`sd_£nd_cmd
(
SEND_RELATIVE_ADDR
, 0);

418 if(
ªs
)

421 
sd_hd
.
rˇ
 = 
sdio_hd
.
r•
[0]&0xffff0000;

423 
ªs
 = 
	`sd_£nd_cmd
(
SEND_CSD
, 
sd_hd
.
rˇ
);

424 
	`mem˝y
(&
sd_hd
.
CSD
, 
sdio_hd
.
r•
, 4*4);

426 
ªs
 = 
	`sd_£nd_cmd
(
SEND_CID
, 
sd_hd
.
rˇ
);

427 
	`mem˝y
(&
sd_hd
.
CID
, 
sdio_hd
.
r•
, 4*4);

428 
	`sd_¥ötf
("CSD:0x%x-0x%x-0x%x-0x%x\n\r", 
sd_hd
.
CSD
[0],sd_hd.CSD[1],sd_hd.CSD[2],sd_hd.CSD[3]);

429 
	`™Æysis_CSD
((*)&
sd_hd
.
CSD
);

430 
	`£t_sdio_˛k
(49);

431 
	`sd_¥ötf
("5\n\r");

433 
ªs
 = 
	`sd_£nd_cmd
(
SELEC_CHIP
, 
sd_hd
.
rˇ
);

434 if(
ªs
)

437 
	`sd_¥ötf
("6\n\r");

438 
	`sd_£nd_cmd
(
APP_CMD
, 
sd_hd
.
rˇ
);

439 
ªs
 = 
	`sd_£nd_cmd
(
SET_BUS_WIDTH
, 0x02);

440 if(
ªs
)

443 
	`sd_¥ötf
("7\n\r");

444 if(
sd_hd
.
block_size
 !
SD_BLOCK_SIZE
)

446 
ªs
 = 
	`sd_£nd_cmd
(
SET_BLOCKLEN
, 
SD_BLOCK_SIZE
);

447 if(
ªs
)

453 
	}
}

461 
	$sd_exô
()

463 #i‡
SD_MALLOC


464 
	`‰ì
(
sd_wrôe_buff
);

466 
	}
}

468 
sd_h™dÀ
 *
	$›í_sd
()

471 if(
sd_hd
.
öô_Êag
 == 0) {

472 
u8
 
ªs
;

473 
ªs
 = 
	`sd_öô
();

474 if(
ªs
)

476 
sd_hd
.
öô_Êag
 = 1;

478 
sd_hd
.
io
.
öô
 = 
sd_öô
;

479 
sd_hd
.
io
.
ªad
 = 
sd_ªad
;

480 
sd_hd
.
io
.
wrôe
 = 
sd_wrôe
;

481 
sd_hd
.
io
.
sync_sd
 = sync_sd;

482 
sd_hd
.
io
.
ªad_block
 = 
sd_ªad_block
;

483 
sd_hd
.
io
.
wrôe_block
 = 
sd_wrôe_block
;

484  &
sd_hd
;

485 
	}
}

	@sddrv/sd_drv.h

1 #i‚de‡
_SD_DRV_


2 
	#_SD_DEV_


	)

3 
	~"c⁄fig.h
"

5 
	#WIN_CACHE
 1

6 
	#SD_MALLOC
 1

7 

	)

8 
	#SD_BLOCK_SIZE
 512

	)

11 
	mGO_IDLE_STATE
 = 0,

12 
	mALL_SEND_CID
,

13 
	mSEND_RELATIVE_ADDR
,

14 
	mSELEC_CHIP
,

15 
	mSEND_CSD
,

16 
	mSEND_CID
,

17 
	mREAD_DAT_UNTIL_STOP
,

18 
	mSTOP
,

19 
	mSEND_STATUS
,

20 
	mGO_INACTIVE_STATE
 ,

21 
	mSET_BLOCKLEN
,

22 
	mREAD_SINGLE_BLOCK
,

23 
	mREAD_MULTIPLE_BLOCK
,

24 
	mWRITE_BLOCK
,

25 
	mWRITE_MULTIPLE_BLOCK
,

26 
	mPROGRAM_CSD
,

27 
	mSET_WRITE_PROT
,

28 
	mCLR_WRITE_PROT
,

29 
	mSEND_WRITE_PROT
,

30 
	mERASE_WR_BLK_START
,

31 
	mERASE_WR_BLK_END
,

32 
	mERASE
,

33 
	mAPP_CMD
,

34 
	mSD_APP_OP_COND
,

35 
	mSDIO_SEND_IF_COND
,

36 
	mCMD1
,

37 
	mSET_BUS_WIDTH


38 }
	tCMD_ENUM
;

41 
	ssdio_io


43 (*
	möô
)();

44 
u8
 (*
ªad_block
)(
	mu8
 *);

45 
u8
 (*
wrôe_block
)(
	mu8
 *);

46 
u8
 (*
£nd_cmd
)(
	mu8
, 
	mu32
, u32 *);

47 }
	tsdio_io
;

49 
	ssd_io


51 (*
	möô
)();

52 #i‡
WIN_CACHE


53 
u8
 (*
ªad
)(
u32
 
	mblock_num
, 
u16
 
	moff£t
, u8 *
	mbuff
, u16 
	mbuff_Àn
);

54 
u8
 (*
wrôe
)(
u32
 
	mblock_num
, 
u16
 
	moff£t
, u8 *
	mbuff
, u16 
	mbuff_Àn
);

55 
u8
 (*
sync_sd
)();

57 
u8
 (*
ªad_block
)(
u32
 
	mblock_num
, u8 *
	mbuff
, u8 
	mwaô_Êag
);

58 
u8
 (*
wrôe_block
)(
u32
 
	mblock_num
, u8 *
	mbuff
, u8 
	mwaô_Êag
);

59 }
	tsd_io
;

60 
	s_ID_°ru˘


62 
u8
 
	mid
;

63 
u8
 
	mPRV
[2];

64 
u8
 
	mMDT
[3];

65 
u8
 
	mOID
[3];

66 
u8
 
	mPNM
[6];

67 
u32
 
	mPSN
;

68 }
	t_ID_°ru˘
;

69 
	s_sd_¨g


71 
u32
 
	mrˇ
;

72 
u32
 
	mª•⁄d
[4];

73 
u32
 
	mCSD
[4];

74 
u32
 
	mCID
[4];

75 
_ID_°ru˘
 
	mID
;

76 }
	t_sd_¨g
;

78 
	s_sd_wö


80 
u8
 *
	mbuff
;

81 
u32
 
	mblock_num
;

82 }
	tsd_wö
;

83 
	ssd_h™dÀ


85 
_ID_°ru˘
 
	mID
;

86 
sd_io
 
	mio
;

87 
u32
 
	mCSD
[4];

88 
u32
 
	mCID
[4];

89 
u32
 
	mrˇ
;

90 
u32
 
	mblock_num
;

91 
u32
 
	mblock_size
;

92 
u32
 
	msd_size
;

93 
u8
 
	md©a_èns„r
;

94 
u8
 
	möô_Êag
;

95 }
	tsd_h™dÀ
;

97 
u8
 
_sd_öô
();

98 
u8
 
sd_ªad_block
(
u32
 
block_num
, u8 *
buff
, u8 
waô_Êag
);

99 
u8
 
sd_wrôe_block
(
u32
 
block_num
, u8 *
buff
, u8 
waô_Êag
);

100 
u8
 
sd_¥e_ªad
(
u32
 
block_num
);

101 
¥ötf_£˘‹
(
u32
 
block_num
);

102 
sd_h™dÀ
 *
›í_sd
();

103 
ölöe
 
u8
 
gë_sd_busy
();

104 
sd_exô
();

105 #i‡
WIN_CACHE


106 
u16
 
sd_wrôe
(
u32
 
block_num
, u16 
off£t
, 
u8
 *
buff
, u16 
buff_Àn
);

107 
u16
 
sd_ªad
(
u32
 
block_num
, u16 
off£t
, 
u8
 *
buff
, u16 
buff_Àn
);

108 
u8
 
sync_sd
();

	@task_manage/task_manage.c

1 
	~"c⁄fig.h
"

2 
	~"°d¨g.h
"

3 
	~"èsk_m™age.h
"

4 
	~"chaö.h
"

8 #ifde‡
TASK_MG_DEBUG


9 
	#èsk_¥ötf
 
u¥ötf


	)

11 
	#èsk_¥ötf
(...)

	)

13 
chaö_poöt
 *
	gèsk_chaö
 = 0;

14 
èsk_ls
 *
	gcur_èsk
 = 0;

17 
èsk_ls
 
cmd_èsk_ls
;

20 
__èsk_li°_°¨t
, 
__èsk_li°_íd
;

21 
u8
 
	$èsk_run
()

23 
u8
 
ªs
;

24 
chaö_poöt
 *
èsk_poöt
;

25 #ifde‡
CMD_LINE


26 
ªs
 = 
	`¸ót_èsk
(&
cmd_èsk_ls
, 50);

31 
èsk_ls
 *
èsk_±r
 = &
__èsk_li°_°¨t
;

32 ; 
èsk_±r
 < &
__èsk_li°_íd
;Åask_ptr++)

34 if(
èsk_±r
->
run_Êag
 == 1)

36 
	`èsk_¥ötf
("ru¿%s\n", 
èsk_±r
->
«me
);

37 
	`¸ót_èsk
(
èsk_±r
, 50);

40 
	`èsk_¥ötf
("aaa");

44 if(
èsk_chaö
 == 0)

46  
TM_TASK_NOEXIST
;

48 
èsk_poöt
 = 
èsk_chaö
;

50 
èsk_poöt
)

52 
cur_èsk
 = 
èsk_poöt
->
d©a
;

53 if(
cur_èsk
->
	`èsk_func
(0))

54  
TM_RUN_ERR
;

57 
èsk_poöt
 =Åask_poöt->
√xt
;

60 
	}
}

63 
u8
 
	$¸ót_èsk
(
èsk_ls
 *
èsk_li°
, 
u16
 
msg_size
)

66 if(
èsk_li°
 =
NULL
)

67  
TM_PTR_NULL
;

69 if(
èsk_li°
->
èsk_öô
)

71 if(
èsk_li°
->
	`èsk_öô
())

72  
TM_INIT_FAIL
;

74 
èsk_li°
->
q_msg
 = (
q_msg_°ru˘
 *)
	`√w_q_msg
—ask_li°->
«me
, 
msg_size
);

75 if(
èsk_li°
->
q_msg
 == 0)

76  
TM_MALLOC_ERR
;

78 
	`add_chaö_poöt
(&
èsk_chaö
, 
èsk_li°
);

79 
èsk_li°
->
run_Êag
 = 1;

81 
	}
}

83 
u8
 
	$dñ_èsk
(*
«me
)

85 
èsk_ls
 *
èsk_li°
;

86 
chaö_poöt
 *
chaö_poö
 = 
èsk_chaö
;

88 
chaö_poö
)

90 
èsk_li°
 = 
èsk_chaö
->
d©a
;

91 if(
	`cmp_°r
(
«me
, 
èsk_li°
->name))

93 if(
èsk_li°
->
èsk_exô
)

94 
èsk_li°
->
	`èsk_exô
();

96 
	`dñ_chaö_poöt
(&
èsk_chaö
, 
èsk_li°
);

97 
	`‰ì_q_msg
(
èsk_li°
->
q_msg
);

101 
chaö_poö
 = chaö_poö->
√xt
;

103  
TM_TASK_NOEXIST
;

104 
	}
}

107 
u8
 
	$èskq_po°
(*
èsk_«me
, 
u32
 
msg
)

109 
èsk_ls
 *
èsk_li°
;

110 
chaö_poöt
 *
chaö_poö
 = 
èsk_chaö
;

112 
chaö_poö
)

114 
èsk_li°
 = 
chaö_poö
->
d©a
;

115 if(
	`cmp_°r
((c⁄° *)
èsk_«me
, (c⁄° *)
èsk_li°
->
«me
))

117 
u8
 
ªs
;

118 
ªs
 = 
	`q_po°
(
èsk_li°
->
q_msg
, 
msg
);

119 if(
ªs
)

120  
TM_OTHER
;

124 
chaö_poö
 = chaö_poö->
√xt
;

128 
	}
}

131 
u32
 
	$èskq_≥nd
()

133 
u32
 
msg
;

134 if(
cur_èsk
 == 0)

137 
msg
 = 
	`q_≥nd
(
cur_èsk
->
q_msg
);

139  
msg
;

140 
	}
}

143 
u8
 
	$èsk_po°_msg
(*
«me
, 
u8
 
Àn
, ...)

145 
u16
 
msg_˙t
;

146 
u32
 
msg
[4] = {0,0,0,0};

147 
u8
 
˙t
 = 0, 
ªs
;

148 
va_li°
 
≠
;

149 if(
cur_èsk
 == 0)

151  
TM_TASK_NOEXIST
;

153 
msg_˙t
 = 
	`gë_q_msg_‰ì
(
cur_èsk
->
q_msg
);

154 if(
msg_˙t
 < 
Àn
)

156  
TM_OVER
;

158 
	`va_°¨t
(
≠
,
Àn
);

160 
˙t
<
Àn
)

162 
msg
[
˙t
++] = 
	`va_¨g
(
≠
, );

164 
	`va_íd
(
≠
);

166 
˙t
=0; cnt<4;)

168 
ªs
 = 
	`èskq_po°
(
«me
, 
msg
[
˙t
++]);

169 if(
ªs
)

170  
TM_OTHER
;

173 
	}
}

177 
u8
 
	$èsk_≥nd_msg
(
u32
 *
msg
)

179 
u8
 
˙t
;

180 if(
	`gë_q_msg_num
(
cur_èsk
->
q_msg
)<4)

182 
msg
[0] = 0xffffffff;

183  
TM_NO_MSG
;

185 
˙t
 = 0; cnt<4;cnt++)

186 
msg
[
˙t
] = 
	`èskq_≥nd
();

189 
	}
}

191 
u16
 
	$gë_èsk_msg_num
()

193  
cur_èsk
->
q_msg
->
msg_num
;

194 
	}
}

197 #ifde‡
CMD_LINE


198 
	~"cmd.h
"

200 c⁄° *
	gèsk_cmd_èbÀ
[]=

205 
	$èsk_cmd_dól
(
cmd_ödex
, *
¨g
)

207 
cmd_ödex
)

211 
èsk_ls
 *
èsk_li°
;

212 
chaö_poöt
 *
chaö_poö
 = 
èsk_chaö
;

214 
chaö_poö
)

216 
èsk_li°
 = 
chaö_poö
->
d©a
;

217 
	`u¥ötf
("èsk:%s\n", 
èsk_li°
->
«me
);

218 
chaö_poö
 = chaö_poö->
√xt
;

228 
	}
}

229 
	$èsk_do
(**
¨g
, 
¨g_num
)

231 
èsk_cmd_˙t
;;

232 
¨g_num
--)

234 
èsk_cmd_˙t
 = 0;Åask_cmd_˙t<(
èsk_cmd_èbÀ
)/(task_cmd_table[0]);Åask_cmd_cnt++)

236 if(
	`°rcmp
(*
¨g
++,
èsk_cmd_èbÀ
[
èsk_cmd_˙t
]) == 0)

238 
	`èsk_cmd_dól
(
èsk_cmd_˙t
, *
¨g
);

242 
	}
}

243 
REGISTER_CMD
(
tk
, 
èsk_do
, "»ŒŒÒ¿‡–Õ√¸¡Ó");

	@task_manage/task_manage.h

1 #i‚de‡
_TASK_MANAGE_


2 
	#_TASK_MANAGE_


	)

3 
	~"q_msg.h
"

8 *
	m«me
;

9 
u8
 (*
èsk_func
)(*
	m¨g
);

10 
u8
 (*
èsk_öô
)();

11 
u8
 (*
èsk_exô
)();

12 
q_msg_°ru˘
 *
	mq_msg
;

13 
u8
 
	mrun_Êag
;

14 }
	tèsk_ls
;

18 
	mTM_TASK_EXIST
 = 0x01,

19 
	mTM_TASK_NOEXIST
,

20 
	mTM_INIT_FAIL
,

21 
	mTM_PTR_NULL
,

22 
	mTM_MALLOC_ERR
,

23 
	mTM_OVER
,

24 
	mTM_NO_MSG
,

25 
	mTM_RUN_ERR
,

26 
	mTM_OTHER
,

27 }
	gèsk_îr
;

28 
u8
 
èsk_run
();

29 
u8
 
¸ót_èsk
(
èsk_ls
 *
èsk_li°
, 
u16
 
msg_size
);

30 
u8
 
dñ_èsk
(*
«me
);

31 
u8
 
èskq_po°
(*
èsk_«me
, 
u32
 
msg
);

32 
u32
 
èskq_≥nd
();

33 
u8
 
èsk_po°_msg
(*
«me
, u8 
Àn
, ...);

34 
u8
 
èsk_≥nd_msg
(
u32
 *
msg
);

35 
u16
 
gë_èsk_msg_num
();

37 
	#ªgi°î_èsk_li°
 
	`__©åibuã__
((
	`£˘i⁄
(".èsk_li°"))Ë
èsk_ls


	)

	@uart/printf.c

1 
	~"c⁄fig.h
"

2 
	~"s3c2440_u¨t.h
"

3 
	~"°d¨g.h
"

4 
	~"s3c2440_¥ötf.h
"

13 
	$u¨t_¥ötf
(
u8
 
£rül
, *
buff
, ...)

15 
va_li°
 
≠
;

16 
wrôe_buff
[100];

17 *
buÂoöãr
 = 
wrôe_buff
;

19 
	`va_°¨t
(
≠
,
buff
);

20 
	`v•rötf
(
wrôe_buff
, 
buff
, 
≠
);

21 
	`va_íd
(
≠
);

22 *
buÂoöãr
)

24 
	`u¨t_putbyã
(
£rül
,*
buÂoöãr
++);

27 
	}
}

29 
uputs
(*
buff
, 
u16
 
Àn
);

30 
u¨t_h™dÀ
 *
	gu¨t_h™d
;

32 
ölöe
 
u8
 
	$£rül_öô
(
u32
 
baud
)

34 #ifde‡
DEBUG


35 
u¨t_h™d
 = 
	`u¨t_›í
(
PRINT_SERIAL
, 
baud
);

36 if(
u¨t_h™d
 =
NULL
)

45 
	}
}

46 
	$u¥ötf
(*
buff
, ...)

48 #ifde‡
DEBUG


49 
va_li°
 
≠
;

50 
wrôe_buff
[100];

51 *
buÂoöãr
 = 
wrôe_buff
;

53 
	`va_°¨t
(
≠
,
buff
);

54 
	`v•rötf
(
wrôe_buff
, 
buff
, 
≠
);

55 
	`va_íd
(
≠
);

56 
	`uputs
(
wrôe_buff
, 
	`°æí
(write_buff));

58 
	}
}

60 
	$gëc
()

63 
	}
}

64 
	$putc
(
byã
)

66 #ifde‡
DEBUG


67 
u¨t_h™d
->
io
.
	`putbyã
(
byã
);

69 
	}
}

70 
	$uputs
(*
buff
, 
u16
 
Àn
)

72 #ifde‡
DEBUG


73 
u¨t_h™d
->
io
.
	`puts
(
buff
, 
Àn
);

75 
	}
}

76 
	$¥ötf_u32
(
u32
 
vÆue
)

78 
u8
 
i
, 
ch
;

80 
	`u¥ötf
( "0x");

81 
i
 = 8;

83 
i
--;

84 
ch
 = (
vÆue
>>
i
*4)&0xf;

85 if(
ch
<10)

93 }
i
);

94 
	`putc
(' ');

95 
	}
}

97 
	$¥ötf_u8
(
u8
 
vÆue
)

99 
u8
 
i
, 
ch
;

101 
i
 = 2;

102 
	`u¥ötf
( "0x");

104 
i
--;

105 
ch
 = (
vÆue
>>
i
*4)&0xf;

106 if(
ch
<10)

108 
	`putc
('0'+
ch
);

112 
	`putc
('a'+
ch
-10);

114 }
i
);

115 
	`putc
(' ');

116 
	}
}

118 
	$¥ötf_u16
(
u16
 
vÆue
)

120 
u8
 
i
, 
ch
;

121 
i
 = 4;

122 
	`u¥ötf
( "0x");

124 
i
--;

125 
ch
 = (
vÆue
>>
i
*4)&0xf;

126 if(
ch
<10)

128 
	`putc
('0'+
ch
);

132 
	`putc
('a'+
ch
-10);

134 }
i
);

135 
	`putc
(' ');

136 
	}
}

138 
	$¥ötf_buff
(c⁄° 
u8
 *
buff
, 
u32
 
size
)

140 
size
--)

142 
	`¥ötf_u8
(*
buff
++);

146 
	}
}

148 
	$¥ötf_bö
(c⁄° 
u32
 
vÆue
)

150 
u8
 
˙t
 = 32;

152 ; 
˙t
>0; cnt--)

154 
	`u¥ötf
("bô%d:", 
˙t
-1);

155 if(
vÆue
 & (0x01<<(
˙t
-1)))

157 
	`u¥ötf
("1 ");

161 
	`u¥ötf
("0 ");

165 
	}
}

	@uart/printf.h

1 #i‚de‡
_PRINTF


2 
	#_PRINTF


	)

3 
	~"s3c2440_u¨t.h
"

6 
u¨t_¥ötf
(
u8
 
£rül
, *
buff
, ...);

7 
¥ötf_u32
(
u32
 
vÆue
);

8 
¥ötf_u8
(
u8
 
vÆue
);

9 
¥ötf_u16
(
u16
 
vÆue
);

10 
¥ötf_buff
(c⁄° 
u8
 *
buff
, 
u32
 
size
);

11 
u¥ötf
(*
buff
, ...);

12 
¥ötf_bö
(c⁄° 
u32
 
vÆue
);

13 
ölöe
 
u8
 
	$£rül_öô
(
u32
 
baud
)

	@uart/s3c2440_printf.h

1 #i‚de‡
_PRINTF


2 
	#_PRINTF


	)

3 
	~"s3c2440_u¨t.h
"

6 
u¨t_¥ötf
(
u8
 
£rül
, *
buff
, ...);

7 
¥ötf_u32
(
u32
 
vÆue
);

8 
¥ötf_u8
(
u8
 
vÆue
);

9 
¥ötf_u16
(
u16
 
vÆue
);

10 
¥ötf_buff
(c⁄° 
u8
 *
buff
, 
u32
 
size
);

11 
u¥ötf
(*
buff
, ...);

12 
¥ötf_bö
(c⁄° 
u32
 
vÆue
);

	@uart/s3c2440_uart.c

1 
	~"c⁄fig.h
"

2 
	~"S3C2440.H
"

3 
	~"úq.h
"

4 
	~"s3c2440_u¨t.h
"

6 *
	gi§_h™dÀ_¨øy
 = (*)0x33fb06b0;

8 
UART_REG
 *
	gu¨t_ªgi°î
[3] =

10 
UART0
 ,
UART1
, 
UART2


13 
u¨t_h™dÀ
 
	gu¨t_hd
[3];

14 
u¨t0_putbyã
(
c
);

15 
u¨t0_puts
(*
buff
, 
u16
 
size
);

16 
u16
 
u¨t0_ªad_°rög
(*
°rög
, u16 
Àn
);

17 
u¨t1_putbyã
(
c
);

18 
u¨t1_puts
(*
buff
, 
u16
 
size
);

19 
u¨t0_i§
();

20 
u32
 
u¨t0_ªad
(*
buf„r
, u32 
size
);

22 
wrôe_tx_fifo
(
USERIAL
 
£rül
);

30 
u¨t_h™dÀ
 *
	$u¨t_›í
(
USERIAL
 
£rül
, 
u32
 
Baud
)

32 
u32
 
baud_div
;

34 if(
UART0_SERIAL
 =
£rül
) {

35 
	`ªgi°î_úq
(
INT_UART0
, 
INT_SUB_RXD0
|
INT_SUB_TXD0
, 
u¨t0_i§
);

37 if(
UART1_SERIAL
 =
£rül
)

39 #ifde‡
BOOT_START


43 
INTMSK
 &= ~(1<<23);

44 
INTSUBMSK
 &= ~(1<<3);

47 if(
£rül
 >2 ) {

48  
NULL
;

51 
u¨t_hd
[
£rül
].
ªad_cbuff
 = 
	`√w_cbuff
(
CBUFF_MAX_SIZE
);

52 if(
u¨t_hd
[
£rül
].
ªad_cbuff
 =
NULL
) {

53  
NULL
;

55 
u¨t_hd
[
£rül
].
wrôe_cbuff
 = 
	`√w_cbuff
(
CBUFF_MAX_SIZE
);

56 if(
u¨t_hd
[
£rül
].
wrôe_cbuff
 =
NULL
) {

57 
	`‰ì_cbuff
(&
u¨t_hd
[
£rül
].
ªad_cbuff
);

58  
NULL
;

61 
GPHCON
 &~(0xf<<(4+
£rül
*4));

62 
GPHCON
 |0xa<<(4+
£rül
*4);

64 
baud_div
 = 
PCLK
/(
Baud
*16) - 1;

65 
u¨t_ªgi°î
[
£rül
]->
UBRDIV
 = 
baud_div
;

66 
u¨t_ªgi°î
[
£rül
]->
UFCON
 = 0x37;

67 
u¨t_ªgi°î
[
£rül
]->
UCON
 = 0x185;

69 
u¨t_hd
[
£rül
].
∑ckage_˙t
 = 0;

70 if(
£rül
 =
UART0_SERIAL
) {

71 
u¨t_hd
[
£rül
].
io
.
putbyã
 = 
u¨t0_putbyã
;

72 
u¨t_hd
[
£rül
].
io
.
puts
 = 
u¨t0_puts
;

73 
u¨t_hd
[
£rül
].
io
.
ªad
 = 
u¨t0_ªad
;

75 if(
£rül
 =
UART1_SERIAL
) {

76 
u¨t_hd
[
£rül
].
io
.
putbyã
 = 
u¨t1_putbyã
;

77 
u¨t_hd
[
£rül
].
io
.
puts
 = 
u¨t1_puts
;

79  &
u¨t_hd
[
£rül
];

80 
	}
}

82 
u¨t_h™dÀ
 *
	$gë_u¨t_hd
(
USERIAL
 
£rül
)

84  &
u¨t_hd
[
£rül
];

85 
	}
}

94 
	$u¨t0_i§
()

96 if(
SUBSRCPND
&0x01) {

97 if(
UART0
->
UFSTAT
&0x3f) {

98 
u8
 
rx_˙t
 = 0;

99 
u8
 
rx_buff
[
RX_FIFO_SIZE
];

101 (
UART0
->
UFSTAT
)&0x3f){

102 
rx_buff
[
rx_˙t
++] = 
UART0
->
URXH
;

105 
rx_˙t
 = 
	`MIN
‘x_˙t,
	`gë_cbuff_ªmaö
(
u¨t_hd
[
UART0_SERIAL
].
ªad_cbuff
)-1);

106 if(
rx_˙t
 < 
RX_FIFO_SIZE
) {

110 if(
	`gë_cbuff_ªmaö
(
u¨t_hd
[
UART0_SERIAL
].
ªad_cbuff
)<
rx_˙t
){

111 
rx_˙t
 = 
	`gë_cbuff_ªmaö
(
u¨t_hd
[
UART0_SERIAL
].
ªad_cbuff
);

115 if(
rx_buff
[
rx_˙t
-1] == '\0'){

116 
u¨t_hd
[
UART0_SERIAL
].
∑ckage_˙t
++;

118 
	`wrôe_cbuff
(
u¨t_hd
[
UART0_SERIAL
].
ªad_cbuff
, 
rx_buff
, 
rx_˙t
);

121 
UART0
->
UFCON
 |= 0x2;

122 
SUBSRCPND
 |= 0x01;

125 if(
SUBSRCPND
 & 0x02) {

126 
SUBSRCPND
 |= 0x02;

127 if(!(
UART0
->
UFSTAT
 & 
	`BIT
(14))) {

133 
	`wrôe_tx_fifo
(
UART0_SERIAL
);

136 
	}
}

138 
	$wrôe_tx_fifo
(
USERIAL
 
£rül
)

140 
u8
 
buf
[
TX_FIFO_SIZE
];

141 
u8
 *
buf_p
 = 
buf
;

142 
u16
 
size
;

143 
u32
 
öt_ödex
;

145 
size
 = 
TX_FIFO_SIZE
 - ((
u¨t_ªgi°î
[
£rül
]->
UFSTAT
>>8)&0x3f);

146 if(((
u¨t_ªgi°î
[
£rül
]->
UFSTAT
) & (0x1<<14)))

149 
£rül
) {

150 
UART0_SERIAL
:

151 
öt_ödex
 = 
INT_UART0
;

153 
UART1_SERIAL
:

154 
öt_ödex
 = 
INT_UART1
;

156 
UART2_SERIAL
:

157 
öt_ödex
 = 
INT_UART2
;

163 
	`dißbÀ_úq
(
öt_ödex
);

164 
size
 = 
	`ªad_cbuff
(
u¨t_hd
[
£rül
].
wrôe_cbuff
, 
buf
, size);

165 
size
--) {

166 
u¨t_ªgi°î
[
£rül
]->
UTXH
 = *
buf_p
++;

168 
	`íabÀ_úq
(
öt_ödex
);

169 
	}
}

177 
	$u¨t_putbyã
(
USERIAL
 
£rül
, 
byã
)

179 
	`gë_cbuff_ªmaö
(
u¨t_hd
[
£rül
].
wrôe_cbuff
) == 0) {

180 
	`dñay
(10);

184 
u32
 
öt_ödex
;

185 
£rül
) {

186 
UART0_SERIAL
:

187 
öt_ödex
 = 
INT_UART0
;

189 
UART1_SERIAL
:

190 
öt_ödex
 = 
INT_UART1
;

192 
UART2_SERIAL
:

193 
öt_ödex
 = 
INT_UART2
;

199 
	`dißbÀ_úq
(
öt_ödex
);

200 
	`wrôe_cbuff
(
u¨t_hd
[
£rül
].
wrôe_cbuff
,&
byã
, 1);

201 
	`íabÀ_úq
(
öt_ödex
);

202 if(
	`check_cbuff_mutu
(
u¨t_hd
[
£rül
].
wrôe_cbuff
) == 0){

203 
	`wrôe_tx_fifo
(
£rül
);

205 
	}
}

213 
	$u¨t_wrôe
(
USERIAL
 
£rül
, *
buff
, 
u8
 
size
)

215 
u32
 
öt_ödex
;

216 
	`gë_cbuff_ªmaö
(
u¨t_hd
[
£rül
].
wrôe_cbuff
Ë< 
size
) {

217 
	`dñay
(10);

220 
£rül
) {

221 
UART0_SERIAL
:

222 
öt_ödex
 = 
INT_UART0
;

224 
UART1_SERIAL
:

225 
öt_ödex
 = 
INT_UART1
;

227 
UART2_SERIAL
:

228 
öt_ödex
 = 
INT_UART2
;

234 
	`dißbÀ_úq
(
öt_ödex
);

235 
size
 = 
	`wrôe_cbuff
(
u¨t_hd
[
£rül
].
wrôe_cbuff
,
buff
, size);

236 
	`íabÀ_úq
(
öt_ödex
);

237 if(
	`check_cbuff_mutu
(
u¨t_hd
[
£rül
].
wrôe_cbuff
) == 0){

238 
	`wrôe_tx_fifo
(
£rül
);

240 
	}
}

243 
	$u¨t0_putbyã
(
c
)

245 
	`u¨t_putbyã
(
UART0_SERIAL
, 
c
);

246 
	}
}

248 
	$u¨t1_putbyã
(
c
)

250 
	`u¨t_putbyã
(
UART1_SERIAL
, 
c
);

251 
	}
}

253 
	$u¨t0_puts
(*
buff
, 
u16
 
size
)

255 
	`u¨t_wrôe
(
UART0_SERIAL
, 
buff
, 
size
);

256 
	}
}

258 
	$u¨t1_puts
(*
buff
, 
u16
 
size
)

260 
	`u¨t_wrôe
(
UART1_SERIAL
, 
buff
, 
size
);

261 
	}
}

263 
u16
 
	$u¨t0_ªad_°rög
(*
°rög
, 
u16
 
Àn
)

265 if(
u¨t_hd
[
UART0_SERIAL
].
∑ckage_˙t
) {

266 
u¨t_hd
[
UART0_SERIAL
].
∑ckage_˙t
--;

267  
	`ªad_cbuff_°rög
(
u¨t_hd
[
UART0_SERIAL
].
ªad_cbuff
,
°rög
, 
Àn
);

271 
	}
}

273 
u32
 
	$u¨t0_ªad
(*
buf„r
, 
u32
 
size
)

275  
	`ªad_cbuff
(
u¨t_hd
[
UART0_SERIAL
].
ªad_cbuff
, 
buf„r
, 
size
);

276 
	}
}

	@uart/s3c2440_uart.h

1 #i‚de‡
_S3C2440_UART


2 
	#_S3C2440_UART


	)

3 
	~"c_buff.h
"

4 
	sUART_REG


6 vﬁ©ûê
	mULCON
;

7 vﬁ©ûê
	mUCON
;

8 vﬁ©ûê
	mUFCON
;

9 vﬁ©ûê
	mUMCON
;

10 vﬁ©ûê
	mUTRSTAT
;

11 vﬁ©ûê
	mUERSTAT
;

12 vﬁ©ûê
	mUFSTAT
;

13 vﬁ©ûê
	mUMSTAT
;

14 vﬁ©ûê
	mUTXH
;

15 vﬁ©ûê
	mURXH
;

16 vﬁ©ûê
	mUBRDIV
;

17 }
	tUART_REG
;

33 
	s_u¨t_io


35 (*
	mputbyã
)(
	mc
);

36 (*
	mputs
)(*
	mbuff
, 
u16
 
	msize
);

37 
u16
 (*
ªad
)(*
	mbuff
, u16 
	msize
);

38 }
	tu¨t_io
;

40 
	s_u¨t_h™dÀ


42 
c_buff_°ru˘
 *
	mªad_cbuff
;

43 
c_buff_°ru˘
 *
	mwrôe_cbuff
;

44 
u¨t_io
 
	mio
;

45 
u8
 
	m∑ckage_˙t
;

46 }
	tu¨t_h™dÀ
;

47 
	#UART0
 ((
UART_REG
 *)0x50000000)

	)

48 
	#UART1
 ((
UART_REG
 *)0x50004000)

	)

49 
	#UART2
 ((
UART_REG
 *)0x50008000)

	)

50 
	#INTMSK
 *((vﬁ©ûê*)0X4A000008)

	)

51 
	#INTSUBMSK
 *((vﬁ©ûê*)0X4A00001C)

	)

52 
	#SUBSRCPND
 *((vﬁ©ûê*)0X4A000018)

	)

54 
	#RX_FIFO_SIZE
 31

	)

55 
	#TX_FIFO_SIZE
 63

	)

57 
	#CBUFF_MAX_SIZE
 512

	)

60 
	mUART0_SERIAL
 = 0,

61 
	mUART1_SERIAL
,

62 
	mUART2_SERIAL
 ,

63 }
	tUSERIAL
;

65 
u¨t_h™dÀ
 *
u¨t_›í
(
USERIAL
 
£rül
, 
u32
 
Baud
);

66 
u¨t_putbyã
(
USERIAL
 
£rül
, 
byã
);

67 
u¨t_wrôe
(
USERIAL
 
£rül
, *
buff
, 
u8
 
size
);

68 
u8
 
u¨t_ªad
(
USERIAL
 
£rül
, *
buff
);

69 
u¨t_h™dÀ
 *
gë_u¨t_hd
(
USERIAL
 
£rül
);

	@usb/SCSI.c

1 
	~"usb_drv.h
"

2 
	~"usb_dev_íum.h
"

3 
	~"SCSI.h
"

4 
	~"sd_drv.h
"

23 #i‡
USB_DEV_ENUM
 =
USB_DISK


24 c⁄° 
msd_scsi_öq_ª•
 
	görq_ª•
 = {

37 c⁄° 
_Unô_Sîül_Numbî
 
	gSîül_Numbî
 =

45 
sd_h™dÀ
 *
	gsd_hd
 = 0;

49 
u8
 
	$Inquúy_dól
()

54 
	`usb_wrôe
((*)&
örq_ª•
, 0x24);

56 
	}
}

59 
u8
 
	$RódF‹m©C≠acôy_dól
()

61 
ªad_f‹m©_ª•
 
f‹m©_li°
;

62 
sd_hd
 = 
	`›í_sd
();

63 if(
sd_hd
 == 0)

68 
f‹m©_li°
.
li°_Àngth
 = 
	`be_to_À_u32
(0, 8);

69 
f‹m©_li°
.
block_num
 = 
	`be_to_À_u32
(0,
sd_hd
->block_num);

70 
f‹m©_li°
.
block_size
 = 
	`be_to_À_u32
(0,
sd_hd
->block_size);

71 
f‹m©_li°
.
block_size
 |= 0x02;

74 
	`usb_wrôe
((*)&
f‹m©_li°
, 0x12);

75 
	`£t_csw_°ï
(
CSW_END
);

77 
	}
}

78 
u8
 
	$Te°UnôRódy_dól
()

82 
	}
}

83 
u8
 
	$Reque°Sí£_dól
()

86 
	}
}

87 
u8
 
	$ModeSí£6_dól
()

90 
	}
}

91 
u8
 
	$SèπSt›_dól
()

94 
	}
}

95 
u8
 
	$MediumRemovÆ_dól
()

98 
	}
}

101 
u8
 
	$RódC≠acôy_dól
()

103 
Ród_C≠acôy_ª•
 
C≠acôy_ª•
;

104 
sd_hd
 = 
	`›í_sd
();

105 if(
sd_hd
 == 0)

110 
C≠acôy_ª•
.
œ°_block_addr
 = 
	`be_to_À_u32
(0,
sd_hd
->
block_num
-1);

111 
C≠acôy_ª•
.
block_size
 = 
	`be_to_À_u32
(0,
sd_hd
->block_size);

114 
	`usb_wrôe
((*)&
C≠acôy_ª•
, 0x8);

115 
	`£t_csw_°ï
(
CSW_END
);

117 
	}
}

120 
u8
 
	$Ród_dól
(
u32
 
block_addr
, u32 
Àn
)

122 
u8
 
buff
[512];

123 
u16
 
usb_‰ì_size
;

124 
u16
 
˙t
 = 0;

125 
u8
 
ªs
;

128 
Àn
--)

130 
˙t
 = 0;

132 
	`sd_ªad
(
block_addr
++, 0, 
buff
, 
sd_hd
->
block_size
);

133 if(
Àn
>2)

135 
	`sd_¥e_ªad
(
block_addr
);

140 
usb_‰ì_size
 = 
	`gë_ï_buff_‰ì
(2);

142 if(
usb_‰ì_size
 > 
sd_hd
->
block_size
 -
˙t
)

144 
usb_‰ì_size
 = 
sd_hd
->
block_size
 -
˙t
;

147 
ªs
 = 
	`usb_wrôe
((*)(&
buff
[
˙t
]), 
usb_‰ì_size
);

149 
˙t
 +
usb_‰ì_size
;

151 }
˙t
<
sd_hd
->
block_size
);

154 
	`£t_csw_°ï
(
CSW_END
);

155  
	`gë_ï_buff_‰ì
(2) < 1024)

160 
	}
}

161 
u8
 
	$Wrôe_dól
()

165 
	}
}

166 
u8
 
	$Vîify_dól
()

169 
	}
}

170 
u8
 
	$ModeSí£10_dól
()

173 
	}
}

174 
u8
 
	$SENSE6_dól
()

176 
u8
 
buff
[4] = {0x03,0x00,0x80,0x00};

177 
	`usb_wrôe
((*)
buff
, 0x4);

178 
	`£t_csw_°ï
(
CSW_END
);

180 
	}
}

183 
u8
 
	$cdb_6b_dól
(
cdb_cmd_6b
 *
cmd
)

186 
cmd
->
›î©i⁄_code
)

188 
Inquúy
:

189 
	`£t_csw_°ï
(
CSW_END
);

190 if(
cmd
->
logic_block_addr_2
&0x01)

192 
	`u¥ötf
("1\n\r");

193 
	`usb_wrôe
((*)&
Sîül_Numbî
, Sîül_Numbî.
∑ge_Àn
+4);

196  
	`Inquúy_dól
();

198 
SENSE6
:

199  
	`SENSE6_dól
();

201 
Te°_Unô_Ródy
:

202  
	`Te°UnôRódy_dól
();

204 
Medium_RemovÆ
:

205  
	`MediumRemovÆ_dól
();

209  
CMD_ERR
;

213 
	}
}

215 
u8
 
	$cdb_10b_dól
(
cdb_cmd_10b
 *
cmd
)

217 
u32
 
logic_block_addr
;

218 
u16
 
Àngth
;

221 
cmd
->
›î©i⁄_code
)

223 
Ród_F‹m©_ˇ∑côy
:

224  
	`RódF‹m©C≠acôy_dól
();

226 
Ród_C≠acôy
:

227  
	`RódC≠acôy_dól
();

229 
Ród_10
 :

230 
logic_block_addr
 = 
	`be_to_À_u32
((*)&
cmd
->
logic_block_addr_3
, 0);

231 
Àngth
 = 
	`be_to_À_u16
((*)&
cmd
->
Àngth_H
, 0);

232  
	`Ród_dól
(
logic_block_addr
, 
Àngth
);

234 
Wrôe_10
 :

242 
	}
}

244 
u8
 
	$scsi_cmd_dól
(
u8
 *
cmd
, u8 
Àn
)

247 
Àn
)

251  
	`cdb_6b_dól
((
cdb_cmd_6b
 *)
cmd
);

255  
	`cdb_10b_dól
((
cdb_cmd_10b
 *)
cmd
);

263 
	}
}

	@usb/SCSI.h

1 #i‚de‡
_SCSI_


2 
	#_SCSI_


	)

3 
	scdb_cmd_6b


5 
u8
 
	m›î©i⁄_code
;

6 
u8
 
	mlogic_block_addr_2
;

7 
u8
 
	mlogic_block_addr_1
;

8 
u8
 
	mlogic_block_addr_0
;

9 
u8
 
	mÀngth
;

10 
u8
 
	mc⁄åﬁ
;

11 }
	tcdb_cmd_6b
;

13 
	scdb_cmd_10b


15 
u8
 
	m›î©i⁄_code
;

16 
u8
 
	m£rvi˚_a˘i⁄
;

17 
u8
 
	mlogic_block_addr_3
;

18 
u8
 
	mlogic_block_addr_2
;

19 
u8
 
	mlogic_block_addr_1
;

20 
u8
 
	mlogic_block_addr_0
;

21 
u8
 
	mª£rved
;

22 
u8
 
	mÀngth_H
;

23 
u8
 
	mÀngth_L
;

24 
u8
 
	mc⁄åﬁ
;

25 }
	tcdb_cmd_10b
;

27 
	scdb_cmd_12b


29 
u8
 
	m›î©i⁄_code
;

30 
u8
 
	m£rvi˚_a˘i⁄
;

31 
u8
 
	mlogic_block_addr_3
;

32 
u8
 
	mlogic_block_addr_2
;

33 
u8
 
	mlogic_block_addr_1
;

34 
u8
 
	mlogic_block_addr_0
;

35 
u8
 
	mÀngth_3
;

36 
u8
 
	mÀngth_2
;

37 
u8
 
	mÀngth_1
;

38 
u8
 
	mÀngth_0
;

39 
u8
 
	mc⁄åﬁ
;

40 }
	tcdb_cmd_12b
;

44 
	mCMD_ERR
 = 0X01,

51 
u8
 
	m≥rùhîÆ
;

52 
u8
 
	mrmb
;

53 
u8
 
	mvîsi⁄
;

54 
u8
 
	mª•_d©a_f‹m©
;

55 
u8
 
	maddôi⁄Æ_Àn
;

56 
u8
 
	mscc°p
;

57 
u8
 
	mbque
;

58 
u8
 
	mcmdque
;

59 
u8
 
	mvíd‹_id
[8];

60 
u8
 
	m¥odu˘_id
[16];

61 
u8
 
	m¥odu˘_ªv
[4];

62 } 
	tmsd_scsi_öq_ª•
;

66 
u8
 
	m≥rùhîÆ
;

67 
u8
 
	m∑ge_code
;

68 
u8
 
	mRESERVED
;

69 
u8
 
	m∑ge_Àn
;

70 
u8
 
	m∑ge_num
[10];

71 } 
	t_Unô_Sîül_Numbî
;

75 
u32
 
	mli°_Àngth
;

76 
u32
 
	mblock_num
;

77 
u32
 
	mblock_size
;

78 }
	tªad_f‹m©_ª•
;

82 
u32
 
	mœ°_block_addr
;

83 
u32
 
	mblock_size
;

84 }
	tRód_C≠acôy_ª•
;

89 
	#F‹m©_Unô
 0x04

90 
	#Inquúy
 0x12

91 
	#Sèr_St›
 0x1B

92 
	#Mode_Sñe˘
 0x55

93 
	#Mode_Sí£
 0x5A

94 
	#Medium_RemovÆ
 0x1E

95 
	#Ród_10
 0x28

96 
	#Ród_12
 0xA8

97 
	#Ród_C≠acôy
 0x25

98 
	#Ród_F‹m©_ˇ∑côy
 0x23

99 
	#Reque°_Sí£
 0x03

100 
	#Rezîo_Unô
 0x01

101 
	#Sìk_10
 0x2B

102 
	#Síd_Dügno°ic
 0x1D

103 
	#Te°_Unô_Ródy
 0x00

104 
	#Vîify
 0x2F

105 
	#Wrôe_10
 0x2A

106 
	#Wrôe_12
 0xAA

107 
	#Wrôe_™d_Vîify
 0x2E

108 
	#SENSE6
 0x1a

109 

	)

113 
u8
 
scsi_cmd_dól
(u8 *
cmd
, u8 
Àn
);

	@usb/hid/hid.c

3 
	~"hid.h
"

6 
_ªp‹t_£nd_func
 
	gªp‹t_£nd_fun
 = 
NULL
;

7 c⁄° 
u8
 
	ghidRï‹tM≠
[] =

108 
u32
 
ªad_ªp‹t_m≠_ˇŒback
(
u16
 
off£t
, *
buf„r
, u16 
Àn
);

109 
u32
 
ouçut_ªp‹t_ˇŒback
(
u8
 
ªp‹t_id
, *
d©a
, 
u16
 
Àn
);

117 
	$_hid_öô
()

119 #i‡
HID_TYPE
 =
BLE_HID


120 
ªp‹t_£nd_fun
 = 
À_hid_öput_ªp‹t_£nd
;

121 
	`ªgi°î_À_hid_ˇŒback
(
ªad_ªp‹t_m≠_ˇŒback
, 
ouçut_ªp‹t_ˇŒback
);

122 #ñi‡
HID_TYPE
 =
USB_HID


125 
	}
}

126 
u32
 
	$ªad_ªp‹t_m≠_ˇŒback
(
u16
 
off£t
, *
buf„r
, u16 
Àn
)

128 
u16
 
size
 = (
hidRï‹tM≠
);

129 if(
size
>
Àn
)

131 
	`u¥ötf
("ªad buf‡ovî %d-%d\n", 
Àn
, 
size
);

132 
size
 = 
Àn
;

134 
	`mem˝y
(
buf„r
,&
hidRï‹tM≠
[
off£t
], 
size
);

135  
size
;

136 
	}
}

137 
ölöe
 
u32
 
	$gë_ªp‹t_m≠_size
()

139  (
hidRï‹tM≠
);

140 
	}
}

142 
u32
 
	$ouçut_ªp‹t_ˇŒback
(
u8
 
ªp‹t_id
, *
d©a
, 
u16
 
Àn
)

145 
	}
}

147 
ölöe
 
u32
 
	$öput_ªp‹t_£nd
(
u8
 
ªp‹t_id
, *
d©a
, 
u16
 
Àn
)

149 if(
ªp‹t_£nd_fun
)

150  
	`ªp‹t_£nd_fun
(
ªp‹t_id
, 
d©a
, 
Àn
);

152 
	}
}

161 
s8
 
	gmou£_d©a
[4];

162 
u32
 
	$£nd_mou£
(
s8
 
key
, s8 
x
,s8 
y
, s8 
whìl
)

164 
ªt_vÆ
;

165 
mou£_d©a
[0] = 
key
;

166 
mou£_d©a
[1] = 
x
;

167 
mou£_d©a
[2] = 
y
;

168 
mou£_d©a
[3] = 
whìl
;

169  
	`öput_ªp‹t_£nd
(1, 
mou£_d©a
, (mouse_data));

170 
	}
}

172 
_vﬁume_d©a
 
	gvﬁume_d©a
;

184 
u8
 
	gmou£_¢es
 = 10;

185 
	$£t_mou£_£nds
(
u8
 
d©a
)

187 
mou£_¢es
 = 
d©a
;

188 if(
mou£_¢es
 == 0)

189 
mou£_¢es
 = 1;

190 if(
mou£_¢es
 > 127)

191 
mou£_¢es
 = 127;

192 
	}
}

200 
	$mou£_c⁄åﬁ
(
u8
 
cmd
)

202 
cmd
)

204 
MOUSE_UP
:

205 
	`£nd_mou£
(0, 0, 
mou£_¢es
, 0);

208 
MOUSE_DOWN
:

209 
	`£nd_mou£
(0, 0, -
mou£_¢es
, 0);

212 
MOUSE_RIGHT
:

213 
	`£nd_mou£
(0, 
mou£_¢es
, 0, 0);

216 
MOUSE_LEFT
:

217 
	`£nd_mou£
(0, -
mou£_¢es
, 0, 0);

220 
WHEEL_UP
:

221 
	`£nd_mou£
(0, 0, 0, 
mou£_¢es
);

224 
MOUSE_LEFT_BUTTON
:

225 
	`£nd_mou£
(0x01, 0, 0, 0);

226 
	`£nd_mou£
(0, 0, 0 ,0);

229 
MOUSE_MIDDLE_BUTTON
:

230 
	`£nd_mou£
(0x02, 0, 0, 0);

231 
	`£nd_mou£
(0, 0, 0 ,0);

234 
MOUSE_RIGHT_BUTTON
:

235 
	`£nd_mou£
(0x04, 0, 0, 0);

236 
	`£nd_mou£
(0, 0, 0 ,0);

242 
	}
}

251 
	$hid_music_c⁄åﬁ
(
u8
 
cmd
)

253 *(
u8
 *)&(
vﬁume_d©a
) = 0;

254 
cmd
)

256 
VOLUME_UP
:

258 
vﬁume_d©a
.
Vﬁume
 = 1;

261 
VOLUME_DOWN
:

263 
vﬁume_d©a
.
Vﬁume
 = -1;

266 
MUSIC_PP
:

268 
vﬁume_d©a
.
music_µ
 = 1;

271 
MUSIC_NEXT
:

272 
vﬁume_d©a
.
muisc_√xt
 = 1;

275 
MUSIC_PRE
:

276 
vﬁume_d©a
.
music_¥e
 = 1;

279 
MUSIC_RANDOM
:

280 
vﬁume_d©a
.
music_øndom
 = 1;

287 
	`öput_ªp‹t_£nd
(2, &
vﬁume_d©a
, (volume_data));

288 
	}
}

	@usb/hid/hid.h

1 #i‚de‡
__HID__


2 
	#__HID__


	)

4 
	#BLE_HID
 1

	)

5 
	#USB_HID
 2

	)

7 
	#HID_TYPE
 
USB_HID


	)

8 
	$u32
 (*
	t_ªp‹t_£nd_func
)(
	tu8
 , *, 
	tu16
 );

9 
	$u32
 (*
	tªad_ªp‹t_m≠_cb
)(
	tu16
 , *, u16 );

10 
	$u32
 (*
	touçut_ªp‹t_cb
)(
	tu8
, *, 
	tu16
);

11 
	s_vﬁume_d©a


13 
s8
 
ch™√l
:2;

14 
s8
 
Vﬁume
:2;

15 
u8
 
music_µ
:1;

16 
u8
 
muisc_√xt
:1;

17 
u8
 
music_¥e
:1;

18 
u8
 
music_øndom
:1;

19 }
	t__©åibuã__
((
	t∑cked
)Ë
	t_vﬁume_d©a
;

23 
MOUSE_LEFT
 = 0x00,

24 
MOUSE_RIGHT
,

25 
MOUSE_UP
,

26 
MOUSE_DOWN
,

27 
WHEEL_UP
,

28 
WHEEL_DOWN
,

29 
MOUSE_LEFT_BUTTON
,

30 
MOUSE_RIGHT_BUTTON
,

31 
MOUSE_MIDDLE_BUTTON
,

33 
	`mou£_c⁄åﬁ
(
u8
 
cmd
);

34 
	`£t_mou£_£nds
(
u8
 
d©a
);

39 
VOLUME_UP
 = 0,

40 
VOLUME_DOWN
,

41 
MUSIC_PP
,

42 
MUSIC_NEXT
,

43 
MUSIC_PRE
,

44 
MUSIC_RANDOM
,

46 
	`hid_music_c⁄åﬁ
(
u8
 
cmd
);

48 
u32
 
	`gë_ªp‹t_m≠_size
();

	@usb/hid_device_api.c

11 
	~"c⁄fig.h
"

12 
	~"hid_devi˚_≠i.h
"

13 
	~"usb_hid_devi˚.h
"

14 
	~"cmd.h
"

16 
_ªp‹t_£nd_func
 
	gªp‹t_£nd_fun
 = 
NULL
;

17 c⁄° 
u8
 
	ghidRï‹tM≠
[] =

154 
u32
 
ªad_ªp‹t_m≠_ˇŒback
(
u16
 
off£t
, *
buf„r
, u16 
Àn
);

155 
u32
 
ouçut_ªp‹t_ˇŒback
(
u8
 
ªp‹t_id
, *
d©a
, 
u16
 
Àn
);

163 
	$hid_öô
()

165 #i‡
HID_TYPE
 =
BLE_HID


166 
ªp‹t_£nd_fun
 = 
À_hid_öput_ªp‹t_£nd
;

167 
	`ªgi°î_À_hid_ˇŒback
(
ªad_ªp‹t_m≠_ˇŒback
, 
ouçut_ªp‹t_ˇŒback
);

168 #ñi‡
HID_TYPE
 =
USB_HID


169 
u8
 
ªt
;

170 
ªp‹t_£nd_fun
 = 
usb_hid_öput_ªp‹t_£nd
;

171 
	`ªgi°î_usb_hid_ˇŒback
(
ªad_ªp‹t_m≠_ˇŒback
, 
ouçut_ªp‹t_ˇŒback
);

172 
ªt
 = 
	`›í_usb_hid
();

173 if(
ªt
){

174 
	`u¥ötf
("›í usb hidÉº %d\n", 
ªt
);

178 
	}
}

180 
	$hid_exô
()

182 #i‡
HID_TYPE
 =
BLE_HID


183 #ñi‡
HID_TYPE
 =
USB_HID


184 
	`˛o£_usb_hid
();

187 
	}
}

189 
u32
 
	$ªad_ªp‹t_m≠_ˇŒback
(
u16
 
off£t
, *
buf„r
, u16 
Àn
)

191 
u16
 
size
 = (
hidRï‹tM≠
);

192 if(
size
>
Àn
)

194 
	`u¥ötf
("ªad buf‡ovî %d-%d\n", 
Àn
, 
size
);

195 
size
 = 
Àn
;

198 
	`mem˝y
(
buf„r
,&
hidRï‹tM≠
[
off£t
], 
size
);

199  
size
;

200 
	}
}

202 
ölöe
 
u32
 
	$gë_ªp‹t_m≠_size
()

204  (
hidRï‹tM≠
);

205 
	}
}

208 
u32
 
	$ouçut_ªp‹t_ˇŒback
(
u8
 
ªp‹t_id
, *
d©a
, 
u16
 
Àn
)

211 
	}
}

213 
ölöe
 
u32
 
	$öput_ªp‹t_£nd
(
u8
 
ªp‹t_id
, *
d©a
, 
u16
 
Àn
)

215 if(
ªp‹t_£nd_fun
)

216  
	`ªp‹t_£nd_fun
(
ªp‹t_id
, 
d©a
, 
Àn
);

218 
	}
}

227 
s8
 
	gmou£_d©a
[4];

228 
u32
 
	$£nd_mou£
(
s8
 
key
, s8 
x
,s8 
y
, s8 
whìl
)

230 
ªt_vÆ
;

231 
mou£_d©a
[0] = 
key
;

232 
mou£_d©a
[1] = 
x
;

233 
mou£_d©a
[2] = 
y
;

234 
mou£_d©a
[3] = 
whìl
;

235  
	`öput_ªp‹t_£nd
(1, 
mou£_d©a
, (mouse_data));

236 
	}
}

238 
_vﬁume_d©a
 
	gvﬁume_d©a
;

250 
u8
 
	gmou£_¢es
 = 10;

251 
	$£t_mou£_£nds
(
u8
 
d©a
)

253 
mou£_¢es
 = 
d©a
;

254 if(
mou£_¢es
 == 0)

255 
mou£_¢es
 = 1;

256 if(
mou£_¢es
 > 127)

257 
mou£_¢es
 = 127;

258 
	}
}

266 
	$mou£_c⁄åﬁ
(
u8
 
cmd
)

268 
cmd
)

270 
MOUSE_UP
:

271 
	`£nd_mou£
(0, 0, 
mou£_¢es
, 0);

274 
MOUSE_DOWN
:

275 
	`£nd_mou£
(0, 0, -
mou£_¢es
, 0);

278 
MOUSE_RIGHT
:

279 
	`£nd_mou£
(0, 
mou£_¢es
, 0, 0);

282 
MOUSE_LEFT
:

283 
	`£nd_mou£
(0, -
mou£_¢es
, 0, 0);

286 
WHEEL_UP
:

287 
	`£nd_mou£
(0, 0, 0, 
mou£_¢es
);

290 
MOUSE_LEFT_BUTTON
:

291 
	`£nd_mou£
(0x01, 0, 0, 0);

292 
	`£nd_mou£
(0, 0, 0 ,0);

295 
MOUSE_MIDDLE_BUTTON
:

296 
	`£nd_mou£
(0x02, 0, 0, 0);

297 
	`£nd_mou£
(0, 0, 0 ,0);

300 
MOUSE_RIGHT_BUTTON
:

301 
	`£nd_mou£
(0x04, 0, 0, 0);

302 
	`£nd_mou£
(0, 0, 0 ,0);

308 
	}
}

317 
	$hid_music_c⁄åﬁ
(
u8
 
cmd
)

319 *(
u8
 *)&(
vﬁume_d©a
) = 0;

320 
cmd
)

322 
VOLUME_UP
:

324 
vﬁume_d©a
.
Vﬁume
 = 1;

327 
VOLUME_DOWN
:

329 
vﬁume_d©a
.
Vﬁume
 = -1;

332 
MUSIC_PP
:

334 
vﬁume_d©a
.
music_µ
 = 1;

337 
MUSIC_NEXT
:

338 
vﬁume_d©a
.
muisc_√xt
 = 1;

341 
MUSIC_PRE
:

342 
vﬁume_d©a
.
music_¥e
 = 1;

345 
MUSIC_RANDOM
:

346 
vﬁume_d©a
.
music_øndom
 = 1;

353 
	`öput_ªp‹t_£nd
(2, &
vﬁume_d©a
, (volume_data));

354 
	}
}

356 
	ghid_maj‹
 = 0xffff;

357 
	$hid_dev_mou¡
(
maj‹
, *
∑rm
)

359 
hid_maj‹
 = 
maj‹
;

360  
	`hid_öô
();

361 
	}
}

363 
	$sd_dev_umou¡
()

366 
	`hid_exô
();

368 
	}
}

372 
	$hid_˘l
(
u32
 
cmd
, *
∑rm
)

374 
cmd
)

381 
	}
}

382 #ifde‡
CMD_LINE


383 
u8
 
	$˛o£hid_do
(**
¨g
, 
¨g_num
)

385 
	`u¥ötf
("close usb\n\r");

386 
	`hid_exô
();

388 
	}
}

390 
REGISTER_CMD
(
˛o£hid
, 
˛o£hid_do
,"πÿ±’HIDƒ£øÈ");

392 
u8
 
	$mou£_do
(**
¨g
, 
¨g_num
)

394 
	`u¥ötf
("mouse\n\r");

395 
	`mou£_c⁄åﬁ
(
MOUSE_UP
);

397 
	}
}

399 
REGISTER_CMD
(
mou£
, 
mou£_do
," Û±Í…œ“∆");

401 
u8
 
	$›íhid_do
(**
¨g
, 
¨g_num
)

403 if(
¨g_num
 != 0)

408 
	`hid_exô
();

409 
	`dñay
(2000);

410 
	`hid_öô
();

412 
	}
}

413 
REGISTER_CMD
(
›íhid
, 
›íhid_do
,"¥Úø™HIDƒ£øÈ");

	@usb/hid_device_api.h

1 #i‚de‡
__HID__


2 
	#__HID__


	)

4 
	#HID_DRV_DEBUG


	)

5 #ifde‡
HID_DRV_DEBUG


6 
	#hid_¥ötf
 
u¥ötf


	)

8 
	#hid_¥ötf
(...)

	)

11 
	#BLE_HID
 1

	)

12 
	#USB_HID
 2

	)

13 
	#HID_TYPE
 
USB_HID


	)

15 
	$u32
 (*
	t_ªp‹t_£nd_func
)(
	tu8
 , *, 
	tu16
 );

16 
	$u32
 (*
	tªad_ªp‹t_m≠_cb
)(
	tu16
 , *, u16 );

17 
	$u32
 (*
	touçut_ªp‹t_cb
)(
	tu8
, *, 
	tu16
);

18 
	s_vﬁume_d©a


20 
s8
 
ch™√l
:2;

21 
s8
 
Vﬁume
:2;

22 
u8
 
music_µ
:1;

23 
u8
 
muisc_√xt
:1;

24 
u8
 
music_¥e
:1;

25 
u8
 
music_øndom
:1;

26 }
	t__©åibuã__
((
	t∑cked
)Ë
	t_vﬁume_d©a
;

30 
MOUSE_LEFT
 = 0x00,

31 
MOUSE_RIGHT
,

32 
MOUSE_UP
,

33 
MOUSE_DOWN
,

34 
WHEEL_UP
,

35 
WHEEL_DOWN
,

36 
MOUSE_LEFT_BUTTON
,

37 
MOUSE_RIGHT_BUTTON
,

38 
MOUSE_MIDDLE_BUTTON
,

40 
	`mou£_c⁄åﬁ
(
u8
 
cmd
);

41 
	`£t_mou£_£nds
(
u8
 
d©a
);

46 
VOLUME_UP
 = 0,

47 
VOLUME_DOWN
,

48 
MUSIC_PP
,

49 
MUSIC_NEXT
,

50 
MUSIC_PRE
,

51 
MUSIC_RANDOM
,

53 
	`hid_music_c⁄åﬁ
(
u8
 
cmd
);

55 
u32
 
	`gë_ªp‹t_m≠_size
();

	@usb/usb_dev_control.c

11 
	~<S3C2440.H
>

12 
	~"c⁄fig.h
"

13 
	~"úq.h
"

14 
	~"usb_dev_c⁄åﬁ.h
"

16 
	#USB_DRV_DEBUG


	)

17 #ifde‡
USB_DRV_DEBUG


18 
	#usb_¥ötf
 
u¥ötf


	)

20 
	#usb_¥ötf
(...)

	)

23 
usb_evít_ˇŒback
 
	gevít_ˇŒback
 = 
NULL
;

24 
usb_dev_i§
();

26 
	$öô_usb_dev_c⁄åﬁ
(
usb_evít_ˇŒback
 
evít_cb
)

28 
CLKCON
 |
	`BIT
(7);

29 
CLKSLOW
 &~
	`BIT
(7);

31 
PWR_REG
 = 0x00;

32 
EP_INT_EN_REG
 = 0x1;

33 
USB_INT_EN_REG
 = 
	`BIT
(2) | BIT(1) | BIT(0);

35 
INDEX_REG
 = 0;

36 
MAXP_REG
 = 
	`BIT
(0);

37 
	`ªgi°î_úq
(
INT_USBD
, 0, 
usb_dev_i§
);

38 
evít_ˇŒback
 = 
evít_cb
;

40 
GPCCON
 &= ~(3 << 10);

41 
GPCCON
 |
	`BIT
(10);

42 
GPCUP
 |
	`BIT
(5);

43 
GPCDAT
 |
	`BIT
(5);

45  
NULL
;

46 
	}
}

48 
	$˛o£_usb_dev_c⁄åﬁ
()

50 
CLKCON
 &~
	`BIT
(7);

51 
GPCCON
 &= ~(3 << 10);

52 
GPCCON
 |
	`BIT
(10);

53 
GPCUP
 &~
	`BIT
(5);

54 
GPCDAT
 &~
	`BIT
(5);

56 
evít_ˇŒback
 = 
NULL
;

57 
	`dißbÀ_úq
(
INT_USBD
);

58 
	}
}

60 
ölöe
 
	$evít_dól_cb
(
u16
 
evít
, 
u8
 
ï_ödex
, u8 *
buf„r
, u8 
Àn
)

62 if(
evít_ˇŒback
)

63 
	`evít_ˇŒback
(
evít
, 
ï_ödex
, 
buf„r
, 
Àn
);

64 
	}
}

66 
ölöe
 
u8
 
	$gë_fifo_˙t
(
u8
 
ï_ödex
)

68 
u8
 
ödex_ªg_back
 = 
INDEX_REG
;

69 
u8
 
fifo_size
 = 
OUT_FIFO_CNT1_REG
;

70 
INDEX_REG
 = 
ödex_ªg_back
;

71  
fifo_size
;

72 
	}
}

75 
	$fifo_Êush
(
u8
 
ï_ödex
)

77 
u8
 
ödex_ªg_back
 = 
INDEX_REG
;

79 
INDEX_REG
 = 
ï_ödex
;

80 if(
ï_ödex
 == 0)

82 
u8
 
d©a
;

83 
OUT_FIFO_CNT1_REG
)

85 
d©a
 = 
EP0_FIFO
;

90 
OUT_CSR1_REG
 |
EP_OUT_FLUSH_FIFO
;

91 
IN_CSR1_REG
 |
EP_IN_FLUSH_FIFO
;

94 
INDEX_REG
 = 
ödex_ªg_back
;

95 
	}
}

104 
u8
 
	$ªad_ï_fifo
(
u8
 
ï_ödex
, u8 * 
buff
, u8 
size
)

106 
u8
 
ödex_ªg_back
 = 
INDEX_REG
;

107 
u8
 
fifo_size
;

108 if(
ï_ödex
>4)

111 
INDEX_REG
 = 
ï_ödex
;

112 
fifo_size
 = 
OUT_FIFO_CNT1_REG
;

113 if(
size
>
fifo_size
)

114 
size
 = 
fifo_size
;

115 
fifo_size
 = 
size
;

117 
size
--)

119 *
buff
++ = * (&
EP0_FIFO
 + 
INDEX_REG
 * (volatile *));

123 if(
ï_ödex
 == 0)

124 
	`ï0_˛ór_out_rdy
();

126 
	`ï_˛ór_out_rdy
();

128 
INDEX_REG
 = 
ödex_ªg_back
;

129  
fifo_size
;

130 
	}
}

132 
u8
 
	$wrôe_ï_fifo
(
u8
 
ï_ödex
, u8 *
buff
, u8 
size
)

134 
u8
 
ödex_ªg_back
 = 
INDEX_REG
;

135 
u8
 
fifo_size
 = 
size
;

137 if(
ï_ödex
>4)

139 
INDEX_REG
 = 
ï_ödex
;

141 if(
ï_ödex
 == 0)

142 if(
EP0_CSR
 & 
	`BIT
(1))

145 if(
IN_CSR1_REG
 & 
	`BIT
(0))

148 
size
--)

150 *(&
EP0_FIFO
 + 
INDEX_REG
 * (vﬁ©ûê*)Ë*
buff
++;

154 if(
ï_ödex
 == 0)

155 
EP0_CSR
 |
	`BIT
(1);

157 
IN_CSR1_REG
 |
	`BIT
(0);

159 
INDEX_REG
 = 
ödex_ªg_back
;

160  
size
;

161 
	}
}

163 
	$ï_i§_dól
(
u8
 
ï_ödex
)

165 if(
ï_ödex
)

167 if(
	`usb_hw_˘æ
(
GET_EP_DIR
, 
ï_ödex
Ë=
OUT_MODE
)

169 if(
OUT_CSR1_REG
 & 
EP_IN_SENT_STALL
)

171 
	`usb_¥ötf
("SENT_STALL\n\r");

173 
	`usb_hw_˘æ
(
CLEAR_SENT_STALL
, 
ï_ödex
);

175 if(
OUT_CSR1_REG
 & 
EP_OUT_RDY
)

177 
u8
 
buf„r
[64];

178 
u8
 
buf„r_size
 = 
	`ªad_ï_fifo
(
ï_ödex
, 
buf„r
, 64);

179 
	`evít_dól_cb
(
DATA_OUT_EVENT
, 
ï_ödex
, 
buf„r
, 
buf„r_size
);

186 if(
IN_CSR1_REG
 & 
EP_IN_SENT_STALL
)

188 
	`usb_¥ötf
("SENT_STALL\n\r");

190 
	`usb_hw_˘æ
(
CLEAR_SENT_STALL
, 
ï_ödex
);

192 if(
IN_CSR1_REG
 & 
	`BIT
(3))

195 
	`usb_hw_˘æ
(
EP_IN_FLUSH_FIFO
, 0);

198 
	`evít_dól_cb
(
DATA_IN_EVENT
, 
ï_ödex
, 0, 0);

205 if(
EP0_CSR
 & 
EP0_OUT_RDY
)

207 
u8
 
∑ck_size
;

208 
u8
 
buf„r
[16];

209 
∑ck_size
 = 
	`ªad_ï_fifo
(0, 
buf„r
, 16);

210 
	`evít_dól_cb
(
DATA_OUT_EVENT
, 0, 
buf„r
, 
∑ck_size
);

213 if(
EP0_CSR
 & 
EP0_SETUP_END
)

215 
	`usb_¥ötf
("SETUP_END\n\r");

216 
	`usb_hw_˘æ
(
CLEAR_SETUP_END
, 0);

220 if(
EP0_CSR
 & 
EP0_DATA_END
)

222 
	`usb_¥ötf
("DATA_END\n\r");

223 
	`usb_hw_˘æ
(
CLEAR_DATA_END
, 0);

228 
	`evít_dól_cb
(
DATA_IN_EVENT
, 0, 0, 0);

231 
	}
}

232 
	$usb_dev_i§
()

234 
u8
 
ªs
 = 0;

236 if(
USB_INT_REG
 & 
USB_RES
)

238 
	`usb_¥ötf
("\n\rusbÑest\n\r");

239 
USB_INT_REG
 |
USB_RES
;

240 
	`evít_dól_cb
(
RES_EVENT
, 0, 0, 0);

243 if(
USB_INT_REG
 & 
USB_RESUME
)

245 
	`usb_¥ötf
("RESUME\n\r");

246 
	`evít_dól_cb
(
RESUME_EVENT
, 0, 0, 0);

249 if(
USB_INT_REG
 & 
USB_SUSPEND
)

251 
	`usb_¥ötf
("SUSPEND\n\r");

252 
	`evít_dól_cb
(
SUSPEND_EVENT
, 0, 0, 0);

255 if(
EP_INT_REG
)

257 
u8
 
ï_ödex
;

259 
ï_ödex
 = 0;Ép_index < 4;Ép_index++)

261 if(
EP_INT_REG
 & 
	`BIT
(
ï_ödex
))

263 
INDEX_REG
 = 
ï_ödex
;

264 
EP_INT_REG
 |
	`BIT
(
ï_ödex
);

265 
	`ï_i§_dól
(
ï_ödex
);

269 
	`CÀ¨Pídög
(
INT_USBD
);

270 
	}
}

279 
u8
 
	$›í_ï
(
u8
 
ï_ödex
, u8 
ï_size
, u8 
dú
, u8 
mode
)

281 if(
ï_ödex
 > 4)

286 
EP_INT_EN_REG
 |
	`BIT
(
ï_ödex
);

287 
INDEX_REG
 = 
ï_ödex
;

289 
ï_size
)

292 
MAXP_REG
 = 
EP_FIFO_8
;

295 
MAXP_REG
 = 
EP_FIFO_16
;

298 
MAXP_REG
 = 
EP_FIFO_32
;

301 
MAXP_REG
 = 
EP_FIFO_64
;

307 if(
ï_ödex
 == 0)

310 if(
dú
 =
IN_MODE
)

312 if(
mode
 !
EP_ATTR_BULK
)

315 
IN_CSR2_REG
 = 
IN_MODE
;

319 
IN_CSR2_REG
 = 
IN_MODE
;

322 
IN_CSR1_REG
 = 0;

324 if(
dú
 =
OUT_MODE
)

326 if(
mode
 !
EP_ATTR_BULK
)

328 
IN_CSR2_REG
 = 
OUT_MODE
;

333 
IN_CSR2_REG
 = 
OUT_MODE
;

341 
	}
}

342 
	$˛o£_ï
(
u8
 
ï_ödex
)

344 if(
ï_ödex
 > 4)

349 
EP_INT_EN_REG
 &~
	`BIT
(
ï_ödex
);

350 
	}
}

352 
u32
 
	$usb_hw_˘æ
(
u8
 
CMD
, 
u32
 
d©a
)

354 
u8
 
ödex_ªg_back
 = 
INDEX_REG
;

355 
u8
 
ªs
 = 0;

356 
CMD
)

358 
CLEAR_SETUP_END
:

359 
EP0_CSR
 |
	`BIT
(7);

361 
FLUSH_EP
:

362 
	`fifo_Êush
(
d©a
);

364 
CLEAR_DATA_END
:

365 
EP0_CSR
 |
EP0_DATA_END
;

367 
CLEAR_SENT_STALL
:

368 
INDEX_REG
 = 
d©a
;

369 
IN_CSR1_REG
 |
EP_IN_SENT_STALL
;

370 
OUT_CSR1_REG
 |
EP_OUT_SENT_STALL
;

372 
GET_EP_DIR
:

373 
INDEX_REG
 = 
d©a
;

374 
ªs
 = 
IN_CSR2_REG
&
IN_MODE
;

376 
GET_EP_SIZE
:

377 
INDEX_REG
 = 
d©a
;

378 
ªs
 = 
MAXP_REG
;

380 
GET_EP_SEND_STATUS
:

381 
INDEX_REG
 = 
d©a
;

382 if(
d©a
)

383 
ªs
 = 
IN_CSR1_REG
 & 
EP_IN_RDY
;

385 
ªs
 = 
EP0_CSR
 & 
	`BIT
(1);

391 
INDEX_REG
 = 
ödex_ªg_back
;

392  
ªs
;

393 
	}
}

	@usb/usb_dev_control.h

1 #i‚de‡
_USB_DEV_CONTR_


2 
	#_USB_DEV_CONTR_


	)

4 
	#c⁄åﬁ_d©a_íd
(Ë{
EP0_CSR
 |
	`BIT
(3);}

	)

5 
	#c⁄åﬁ_d©a_ö_íd
(Ë{
EP0_CSR
 |
	`BIT
(3)|BIT(1);}

	)

7 
	#EP_FIFO_8
 (1<<0)

	)

8 
	#EP_FIFO_16
 (1<<1)

	)

9 
	#EP_FIFO_32
 (1<<2)

	)

10 
	#EP_FIFO_64
 (1<<3)

	)

12 
	#BULK_MODE
 (0<<6)

	)

14 
	#IN_MODE
 (1<<5)

	)

15 
	#OUT_MODE
 (0<<5)

	)

17 
	#USB_RES
 
	`BIT
(2)

	)

18 
	#USB_RESUME
 
	`BIT
(1)

	)

19 
	#USB_SUSPEND
 
	`BIT
(0)

	)

20 
	#EP0_SETUP_END
 
	`BIT
(4)

	)

21 
	#EP0_DATA_END
 
	`BIT
(2)

	)

22 
	#EP0_OUT_RDY
 
	`BIT
(0)

	)

23 
	#EP_IN_SENT_STALL
 
	`BIT
(5)

	)

24 
	#EP_IN_FLUSH_FIFO
 
	`BIT
(3)

	)

25 
	#EP_IN_RDY
 
	`BIT
(0)

	)

26 
	#EP_OUT_RDY
 
	`BIT
(0)

	)

27 
	#EP_OUT_SENT_STALL
 
	`BIT
(6)

	)

28 
	#EP_OUT_FLUSH_FIFO
 
	`BIT
(4)

	)

31 
	#ï0_˛ór_out_rdy
(Ëdo{
EP0_CSR
 |
	`BIT
(6);}0)

	)

32 
	#ï_˛ór_out_rdy
(Ëdo{
OUT_CSR1_REG
 &~
	`BIT
(0);}0)

	)

34 
	#EP_ATTR_CONTROL
 (0x0)

	)

35 
	#EP_ATTR_ISOCHRONOUS
 (0x1)

	)

36 
	#EP_ATTR_BULK
 (0x2)

	)

37 
	#EP_ATTR_INTERRUPT
 (0x3)

	)

39 (*
	tusb_evít_ˇŒback
)(
	tu16
 
	tev¡
, 
	tu8
 
	tï_ödex
, u8 *
	tbuf„r
, u8 
	tÀn
);

43 
RES_EVENT
 = 0x00,

44 
RESUME_EVENT
,

45 
SUSPEND_EVENT
,

46 
DATA_OUT_EVENT
,

47 
DATA_IN_EVENT
,

52 
CLEAR_SETUP_END
 = 0x00,

53 
FLUSH_EP
,

54 
CLEAR_DATA_END
,

55 
CLEAR_SENT_STALL
,

56 
GET_EP_DIR
,

57 
GET_EP_SIZE
,

58 
GET_EP_SEND_STATUS
,

60 
u32
 
	`usb_hw_˘æ
(
u8
 
CMD
, u32 
d©a
);

61 
	`öô_usb_dev_c⁄åﬁ
(
usb_evít_ˇŒback
 
evít_cb
);

62 
	`˛o£_usb_dev_c⁄åﬁ
();

63 
u8
 
	`wrôe_ï_fifo
(u8 
ï_ödex
, u8 *
buff
, u8 
size
);

64 
u8
 
	`›í_ï
(u8 
ï_ödex
, u8 
ï_size
, u8 
dú
, u8 
mode
);

65 
	`˛o£_ï
(
u8
 
ï_ödex
);

	@usb/usb_dev_enum.c

1 
	~"usb_dev_íum.h
"

2 
	~"SCSI.h
"

3 
	~"c_buff.h
"

4 
	~"èsk_m™age.h
"

5 
	~"cmd.h
"

7 
_usb_drv_h™dÀ
 
	gusb_hd
;

8 #i‡
USB_DEV_ENUM
 =
USB_COM


9 c⁄° 
USB_DEVICE_DESCRIPTOR
 
	gdevi˚_des¸ùt‹
 =

11 (
USB_DEVICE_DESCRIPTOR
),

12 
DEVICE_TYPE
,

32 c⁄° 
CONF_INT_ENDP_DESCRIPTOR
 
	gc⁄fig
 =

35 (
USB_CONFIGURATION_DESCRIPTOR
),

36 
CONFIGURATION_TYPE
,

37 (
CONF_INT_ENDP_DESCRIPTOR
) % 256,

38 (
CONF_INT_ENDP_DESCRIPTOR
) / 256,

48 (
USB_INTERFACE_DESCRIPTOR
),

49 
INTERFACE_TYPE
,

61 (
HEADER_FUNCTIONAL_DESCRIPTOR
),

62 
CS_INTERFACE_DESCRIPTOR
,

70 (
CALL_MANAGEMENT_FUNCTIONAL_DESCRIPTOR
),

71 
CS_INTERFACE_DESCRIPTOR
,

79 (
ABSTRACT_CONTROL_MANAGEMENT_FUNCTIONAL_DESCRIPTOR
),

80 
CS_INTERFACE_DESCRIPTOR
,

91 (
UNION_FUNCTIONAL_DESCRIPTOR
),

92 
CS_INTERFACE_DESCRIPTOR
,

109 (
USB_INTERFACE_DESCRIPTOR
),

110 
INTERFACE_TYPE
,

121 (
USB_ENDPOINT_DESCRIPTOR
),

122 
ENDPOINT_TYPE
,

123 2 | 
EP_ADDR_IN
,

124 
EP_ATTR_BULK
,

130 (
USB_ENDPOINT_DESCRIPTOR
),

131 
ENDPOINT_TYPE
,

132 1 | 
EP_ADDR_OUT
,

133 
EP_ATTR_BULK
,

142 
u8
 
	g§ög3
[] =

144 0x0c,
STRING_TYPE
,'L',0x00,'X',0x00,'U',0x00,'S',0x00,'B',0x00

148 
u8
 
	g§ög1
[] =

150 0x04,
STRING_TYPE
,
LANGID_US_L
,
LANGID_US_H


154 
LINE_CODING
 
	gLINE_COD
 =

171 
u8
 
	$usb_wrôe
(*
buff
,
u16
 
Àn
)

173  
usb_hd
.
io
.
	`ï_wrôe
(
buff
,
Àn
,2);

174 
	}
}

184 
u8
 
	$usb_d©a_ˇŒback
(
u8
*
ªad_d©a
,
u16
 
size
,u8 
ï_ödex
)

186 if(!
ï_ödex
) {

187 
	`mem˝y
(&
LINE_COD
,
ªad_d©a
,7);

188 
	`u¥ötf
("b %d\n\r",
LINE_COD
.
dwDTER©e
);

191 
	`usb_wrôe
(
ªad_d©a
,
size
);

195 
	}
}

207 
u8
 
	$˛ass_ˇŒback
(
USB_SETUP_DATA
*
cmd
)

210 if(
cmd
->
bmReque°Ty≥
.
dú
==1)

212 
cmd
->
bReque°
)

214 
GET_LINE_CODING
:

215 
	`wrôe_ï
((
u8
*)&
LINE_COD
,7,0);

227 
cmd
->
bReque°
)

229 
SET_CONTROL_LINE_STATE
:

234 
SET_LINE_CODING
:

244 
	}
}

253 
u8
 
	$›í_usb_u¨t
()

255 
	`des¸ùt‹_ªgi°î
(
DEVICE_TYPE
,(
u8
*)&
devi˚_des¸ùt‹
,0);

256 
	`des¸ùt‹_ªgi°î
(
CONFIGURATION_TYPE
,(
u8
*)&
c⁄fig
,0);

257 
	`des¸ùt‹_ªgi°î
(
STRING_TYPE
,(
u8
*)&
§ög3
,1);

258 
	`des¸ùt‹_ªgi°î
(
STRING_TYPE
,(
u8
*)&
§ög3
,2);

259 
	`des¸ùt‹_ªgi°î
(
STRING_TYPE
,(
u8
*)&
§ög1
,0);

260 
	`›í_usb
(&
usb_hd
,
usb_d©a_ˇŒback
,
˛ass_ˇŒback
);

262 
	}
}

265 
	$cﬁ£_usb_u¨t
()

267 
	`£t_gë_ï0_d©a
();

268 
	}
}

273 #i‡
USB_DEV_ENUM
 =
USB_DISK


274 c⁄° 
USB_DEVICE_DESCRIPTOR
 
	gdevi˚_des¸ùt‹
 =

276 (
USB_DEVICE_DESCRIPTOR
),

277 
DEVICE_TYPE
,

297 c⁄° 
CON_INT_ENDP_DESCRIPTOR_STRUCT
 
	gc⁄_öt_ídp_des¸ùt‹
 =

301 (
USB_CONFIGURATION_DESCRIPTOR
),

302 
CONFIGURATION_TYPE
,

303 (
CON_INT_ENDP_DESCRIPTOR_STRUCT
)%256,

304 (
CON_INT_ENDP_DESCRIPTOR_STRUCT
)/256,

314 (
USB_INTERFACE_DESCRIPTOR
),

315 
INTERFACE_TYPE
,

328 (
USB_ENDPOINT_DESCRIPTOR
),

329 
ENDPOINT_TYPE
,

330 2 | 
EP_ADDR_IN
,

331 
EP_ATTR_BULK
,

337 (
USB_ENDPOINT_DESCRIPTOR
),

338 
ENDPOINT_TYPE
,

339 1 | 
EP_ADDR_OUT
,

340 
EP_ATTR_BULK
,

348 
u8
 
	g§ög3
[] =

350 0x0c,
STRING_TYPE
,'L',0x00,'X',0x00,'U',0x00,'S',0x00,'B',0x00

354 
u8
 
	g§ög1
[] =

356 0x04,
STRING_TYPE
,
LANGID_US_L
,
LANGID_US_H


360 
u8
 
	gcsw_°ï
 = 
CBW_START
;

361 
	$£t_csw_°ï
(
u8
 
°ï
)

363 
csw_°ï
 = 
°ï
;

364 
	}
}

365 
u8
 
	$cbw_cmd_dól
(
CBW
 *
cbw_cmd
)

367 
u8
 
ªs
;

368 
CSW
 
csw_ªs
;

372 
csw_ªs
.
dCSWTag
 = 
cbw_cmd
->
dCBWTag
;

373 
csw_ªs
.
dCSWSig«tuª
 = 0x53425355;

374 if(
cbw_cmd
->
dCBWD©aTønsgîLígth
 == 0)

376 
csw_°ï
 = 
CSW_END
;

381 
csw_°ï
 = 
DATA_TRANSFER
;

384 
ªs
 = 
	`scsi_cmd_dól
(
cbw_cmd
->
CBWCB
, cbw_cmd->
bCBWCBLígth
);

385 
csw_ªs
.
dCSWD©aResidue
 = 0;

389 
csw_ªs
.
bCSWSètus
 = 
ªs
;

393 if(
ªs
)

395 
	`u¥ötf
("cbw_err\n\r");

396 
	`gë_ï_buff_‰ì
(2Ë< (
CBW
)) ;

397 
	`¥ötf_buff
((
u8
 *)
cbw_cmd
, (
CBW
));

407 if(
csw_°ï
 =
CSW_END
)

409 
	`usb_wrôe
(&
csw_ªs
,13);

411 
csw_°ï
 = 
CBW_START
;

418 
	}
}

421 
c_buff_°ru˘
 *
cbw_cmd_cbuf
;

423 
u8
 
	$usb_d©a_ˇŒback
(
u8
 *
ªad_d©a
,
u16
 
size
,u8 
ï_ödex
)

426 
CBW
 
cbw_cmd
;

428 
	`mem˝y
(&
cbw_cmd
, 
ªad_d©a
, 
size
);

431 if(
cbw_cmd
.
dCBWSig«tuª
 == 0x43425355)

433 
u8
 
ªs
;

434 
ªs
 = 
	`wrôe_cbuff
(
cbw_cmd_cbuf
, (
u8
 *)&
cbw_cmd
, (
CBW
 ));

435 if(
ªs
 == 0)

437 
	`u¥ötf
("cbuff over\n\r");

439 
ªs
 =
	`èsk_po°_msg
("usb_èsk", 2, 
CBW_CMD_ARRIVAL
, (
CBW
));

440 if(
ªs
)

442 
	`u¥ötf
("po° ovî %d\n\r", 
ªs
);

444 
	`u¥ötf
("\n\rcb 0x%x ", 
cbw_cmd
.
CBWCB
[0]);

467 
	}
}

474 
u8
 
	$usb_wrôe
(*
buff
,
u16
 
Àn
)

476  
usb_hd
.
io
.
	`ï_wrôe
(
buff
,
Àn
,2);

477 
	}
}

488 c⁄° 
u8
 
	g°‹e_num
 = 0;

489 
u8
 
	$˛ass_ˇŒback
(
USB_SETUP_DATA
*
cmd
)

492 if(
cmd
->
bmReque°Ty≥
.
dú
==1)

494 
cmd
->
bReque°
)

497 
	`wrôe_ï
((
u8
*)&
°‹e_num
,1,0);

505 
cmd
->
bReque°
)

512 
	`u¥ötf
("¯0x%x\n\r", 
cmd
->
bReque°
);

513 
	`¥ötf_buff
((*)
cmd
, 8);

515 
	}
}

525 
u8
 
	$›í_usb_disk
()

527 
	`des¸ùt‹_ªgi°î
(
DEVICE_TYPE
,(
u8
*)&
devi˚_des¸ùt‹
,0);

528 
	`des¸ùt‹_ªgi°î
(
CONFIGURATION_TYPE
,(
u8
*)&
c⁄_öt_ídp_des¸ùt‹
,0);

529 
	`des¸ùt‹_ªgi°î
(
STRING_TYPE
,(
u8
*)&
§ög3
,1);

530 
	`des¸ùt‹_ªgi°î
(
STRING_TYPE
,(
u8
*)&
§ög3
,2);

531 
	`des¸ùt‹_ªgi°î
(
STRING_TYPE
,(
u8
*)&
§ög1
,0);

532 
	`›í_usb
(&
usb_hd
,
usb_d©a_ˇŒback
,
˛ass_ˇŒback
);

535 
	}
}

539 #i‡
USB_DEV_ENUM
 =
USB_HID


541 c⁄° 
USB_DEVICE_DESCRIPTOR
 
	gdevi˚_des¸ùt‹
 =

543 (
USB_DEVICE_DESCRIPTOR
),

544 
DEVICE_TYPE
,

563 c⁄° 
	gKeyBﬂrdRï‹tDes¸ùt‹
[]=

598 c⁄° 
u8
 
	gª•⁄d_öãºu±_exm∂e
[8] = {0x0, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00};

599 c⁄° 
u8
 
	gª•⁄d_öãºu±_exm∂e1
[8] = {0x0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

600 c⁄° 
CON_INT_ENDP_DESCRIPTOR_STRUCT
 
	gc⁄_öt_ídp_des¸ùt‹
=

604 (
USB_CONFIGURATION_DESCRIPTOR
),

605 
CONFIGURATION_TYPE
,

606 (
CON_INT_ENDP_DESCRIPTOR_STRUCT
)%256,

607 (
CON_INT_ENDP_DESCRIPTOR_STRUCT
)/256,

616 (
USB_INTERFACE_DESCRIPTOR
),

617 
INTERFACE_TYPE
,

620 
ENDPOINT_NUMBER
,

628 (
HID_DESCRIPTOR_STRUCT
),

629 
HID_DESCRIPTOR
,

632 
NUM_SUB_DESCRIPTORS
,

635 
REPORT_DESCRIPTOR
,

636 (
KeyBﬂrdRï‹tDes¸ùt‹
)

643 (
USB_ENDPOINT_DESCRIPTOR
),

644 
ENDPOINT_TYPE
,

645 1 | 
EP_ADDR_IN
,

646 
EP_ATTR_INTERRUPT
,

664 
	g§ög3
[] =

666 0x0c,
STRING_TYPE
,'L',0x00,'X',0x00,'U',0x00,'S',0x00,'B',0x00

668 
u8
 
	g§ög1
[] =

670 0x04,
STRING_TYPE
,
LANGID_US_L
,
LANGID_US_H


673 
u8
 
	$usb_d©a_ˇŒback
(
u8
 *
ªad_d©a
,
u16
 
size
,u8 
ï_ödex
)

676 
	`usb_¥ötf
("d cb ");

677 
	`¥ötf_buff
(
ªad_d©a
, 
size
);

679 
	}
}

691 
u8
 
	$˛ass_ˇŒback
(
USB_SETUP_DATA
*
cmd
)

694 
	`usb_¥ötf
("c:0x%x\n", 
cmd
->
bReque°
);

695 
cmd
->
bReque°
)

697 
SET_IDLE
:

698 
	`usb_¥ötf
("idle\n\r");

700 
GET_DESCRIPTOR
:

701 
cmd
->
bVÆueH
)

703 
REPORT_DESCRIPTOR
:

704 
	`wrôe_ï
((
u8
*)
KeyBﬂrdRï‹tDes¸ùt‹
,(KeyBoardReportDescriptor),0);

706 
	`¥ötf
("r");

710 
	`¥ötf_buff
((
u8
 *)
cmd
, (
USB_SETUP_DATA
));

714 
SET_REPORT
:

715 
	`wrôe_ï
(
ª•⁄d_öãºu±_exm∂e1
, (respond_interrupt_exmple1), 1);

718 
	`¥ötf_buff
((
u8
 *)
cmd
, (
USB_SETUP_DATA
));

722 
	}
}

725 
u8
 
	$öãºu±_mode_dól
(
u8
 
ï_ödex
, *
buff
, 
u16
 
Àn
)

727 if(
ï_ödex
 == 1)

731 
	}
}

732 
	$£nd_key
()

734 
	`wrôe_ï
(
ª•⁄d_öãºu±_exm∂e
, (respond_interrupt_exmple), 1);

735 
	}
}

742 
u8
 
	$›í_usb_hid
()

744 
	`des¸ùt‹_ªgi°î
(
DEVICE_TYPE
,(
u8
*)&
devi˚_des¸ùt‹
,0);

745 
	`des¸ùt‹_ªgi°î
(
CONFIGURATION_TYPE
,(
u8
*)&
c⁄_öt_ídp_des¸ùt‹
,0);

746 
	`des¸ùt‹_ªgi°î
(
STRING_TYPE
,(
u8
*)&
§ög3
,1);

747 
	`des¸ùt‹_ªgi°î
(
STRING_TYPE
,(
u8
*)&
§ög3
,2);

748 
	`des¸ùt‹_ªgi°î
(
STRING_TYPE
,(
u8
*)&
§ög1
,0);

749 
	`öãºu±_mode_ˇŒback_ªgi°î
(
öãºu±_mode_dól
);

750  
	`›í_usb
(&
usb_hd
,
usb_d©a_ˇŒback
,
˛ass_ˇŒback
);

751 
	}
}

752 
u8
 
	$key_do
(**
¨g
, 
¨g_num
)

754 
	`£nd_key
();

756 
	}
}

758 
REGISTER_CMD
(
key
, 
key_do
,"∑¢ÀÕHID∞¥º¸");

	@usb/usb_dev_enum.h

1 #i‚de‡
_USB_DEV_


2 
	#_USB_DEV_


	)

3 
	~"usb_drv.h
"

5 
	#USB_COM
 1

	)

6 
	#USB_DISK
 2

	)

7 
	#USB_HID
 3

	)

9 
	#USB_DEV_ENUM
 4

10 

	)

12 
	#ENDPOINT_NUM
 2

	)

14 
	#SEND_ENCAPSULATED_COMMAND
 0x00

	)

15 
	#GET_ENCAPSULATED_RESPONSE
 0x01

	)

16 
	#SET_COMM_FEATURE
 0x02

	)

17 
	#GET_COMM_FEATURE
 0x03

	)

18 
	#CLEAR_COMM_FEATURE
 0x04

	)

19 
	#SET_LINE_CODING
 0x20

	)

20 
	#GET_LINE_CODING
 0x21

	)

21 
	#SET_CONTROL_LINE_STATE
 0x22

	)

22 
	#SEND_BREAK
 0x23

	)

24 
	#NETWORK_CONNECTION
 0x00

	)

25 
	#RESPONSE_AVAILABLE
 0x01

	)

26 
	#SERIAL_STATE
 0x20l

	)

28 #i‡
USB_DEV_ENUM
 =
USB_COM


29 
	s_CONF_INT_ENDP_DESCRIPTOR


31 
USB_CONFIGURATION_DESCRIPTOR
 
	mc⁄fig
;

32 
USB_INTERFACE_DESCRIPTOR
 
	möãrÁ˚
;

33 
HEADER_FUNCTIONAL_DESCRIPTOR
 
	mhódî_fun˘i⁄Æ_des¸ùt‹
;

34 
CALL_MANAGEMENT_FUNCTIONAL_DESCRIPTOR
 
	mˇŒ_m™agemít_fun˘i⁄Æ_des¸ùt‹
;

35 
ABSTRACT_CONTROL_MANAGEMENT_FUNCTIONAL_DESCRIPTOR
 
	mab°ø˘_⁄åﬁ_™agemít_un˘i⁄Æ_es¸ùt‹
;

36 
UNION_FUNCTIONAL_DESCRIPTOR
 
	muni⁄_fun˘i⁄Æ_des¸ùt‹
;

38 
USB_INTERFACE_DESCRIPTOR
 
	möãrÁ˚2
;

39 
USB_ENDPOINT_DESCRIPTOR
 
	mídpoöt
[
ENDPOINT_NUM
];

40 }
	tCONF_INT_ENDP_DESCRIPTOR
;

42 
	s_löe_codög


44 
u32
 
	mdwDTER©e
;

45 
u8
 
	mbCh¨F‹m©
;

46 
u8
 
	mbP¨ôyTy≥
;

47 
u8
 
	mbD©aBôs
;

48 }
	tLINE_CODING
;

51 #i‡
USB_DEV_ENUM
 =
USB_DISK


54 
	#SUCCESS
 0x00

	)

55 
	#FAIL
 0x01

	)

56 
	#ERROR
 0x02

	)

60 
	s_CBW


62 
	mdCBWSig«tuª
;

63 
	mdCBWTag
;

64 
	mdCBWD©aTønsgîLígth
;

65 
	mbmCBWFœgs
;

66 
	mbCBWLUN
;

67 
	mbCBWCBLígth
;

68 
	mCBWCB
[16];

70 
	tCBW
, * 
	tpCBW
;

72 
	s_CSW


74 
	mdCSWSig«tuª
;

75 
	mdCSWTag
;

76 
	mdCSWD©aResidue
;

77 
	mbCSWSètus
;

79 
	tCSW
, * 
	tpCSW
;

81 
	#ENDPOINT_NUMBER
 2

	)

83 
	s_CON_INT_ENDP_DESCRIPTOR_STRUCT


85 
USB_CONFIGURATION_DESCRIPTOR
 
	mc⁄figuøti⁄_des¸ùt‹
;

86 
USB_INTERFACE_DESCRIPTOR
 
	möãrÁ˚_des¸ô‹
;

87 
USB_ENDPOINT_DESCRIPTOR
 
	mídpoöt_des¸ùt‹
[
ENDPOINT_NUMBER
];

88 }
	t__©åibuã__
((
	t∑cked
)Ë
	tCON_INT_ENDP_DESCRIPTOR_STRUCT
;

92 
	mCBW_START
 = 0x00,

93 
	mDATA_TRANSFER
,

94 
	mCSW_END
,

99 
	mSIGNA_ERR
 = 0x01,

103 
u8
 
usb_wrôe
(*
buff
,
u16
 
Àn
);

104 
u8
 
›í_usb_disk
();

105 
£t_csw_°ï
(
u8
 
°ï
);

106 
u8
 
cbw_cmd_dól
(
CBW
 *
cbw_cmd
);

110 #i‡
USB_DEV_ENUM
 =
USB_HID


112 
	#GET_REPORT
 0x01

113 
	#GET_IDLE
 0x02

114 
	#GET_PROTOCOL
 0x03

115 
	#SET_REPORT
 0x09

116 
	#SET_IDLE
 0x0A

117 
	#SET_PROTOCOL
 0x0B

118 

	)

119 
	#HID_DESCRIPTOR
 0x21

120 
	#REPORT_DESCRIPTOR
 0x22

121 
	#PHYSICAL_DESCRIPTOR
 0x23

122 

	)

125 
	#ENDPOINT_NUMBER
 1

	)

127 
	s_HID_SUB_DESCRIPTOR_STRUCT


129 
u8
 
	mbDes¸ùt‹Ty≥
;

130 
u16
 
	mwDes¸ùt‹Lígth
;

131 }
	t__©åibuã__
((
	t∑cked
)Ë
	tHID_SUB_DESCRIPTOR_STRUCT
,*
	tpHID_SUB_DESCRIPTOR_STRUCT
;

132 
	#NUM_SUB_DESCRIPTORS
 1

	)

134 
	s_HID_DESCRIPTOR_STRUCT


136 
u8
 
	mbLígth
;

137 
u8
 
	mbDes¸ùt‹Ty≥
;

138 
u16
 
	mbcdHID
;

139 
u8
 
	mbCou¡ryCode
;

140 
u8
 
	mbNumDes¸ùt‹s
;

141 
HID_SUB_DESCRIPTOR_STRUCT
 
	mHidSubDes¸ùt‹s
[
NUM_SUB_DESCRIPTORS
];

142 }
	t__©åibuã__
((
	t∑cked
)Ë
	tHID_DESCRIPTOR_STRUCT
,*
	tpHID_DESCRIPTOR_STRUCT
;

144 
	s_CON_INT_ENDP_DESCRIPTOR_STRUCT


146 
USB_CONFIGURATION_DESCRIPTOR
 
	mc⁄figuøti⁄_des¸ùt‹
;

147 
USB_INTERFACE_DESCRIPTOR
 
	möãrÁ˚_des¸ùt‹
;

148 
HID_DESCRIPTOR_STRUCT
 
	mhid_des¸ùt‹
;

149 
USB_ENDPOINT_DESCRIPTOR
 
	mídpoöt_des¸ùt‹
[
ENDPOINT_NUMBER
];

150 }
	t__©åibuã__
((
	t∑cked
)Ë
	tCON_INT_ENDP_DESCRIPTOR_STRUCT
;

	@usb/usb_drv.c

11 
	~<S3C2440.H
>

13 
	~"usb_drv.h
"

14 
	~"usb_dev_c⁄åﬁ.h
"

16 * 
	gi§_h™dÀ_¨øy
 = (*) 0x33fb06b0;

17 
ï_d©a_h™dÀ
 * 
öô_ï_d©a
(
u16
 
mÆloc_buff_size
);

18 
‰ì_ï_d©a
(
ï_d©a_h™dÀ
 **
ï_d©a
);

19 
usb_evít_cb
(
u16
 
evít
, 
u8
 
ï_ödex
, u8 *
buf„r
, u8 
buf„r_Àn
);

20 
öô_usb
();

22 
ï_d©a_h™dÀ
 * 
	gï_d©a
[5];

23 
USB_DEVICE_DESCRIPTOR
 * 
	gdevi˚_des¸ùt‹_poöt
 = 
NULL
;

24 
u8
 * 
	gc⁄figuøti⁄_des¸ùt‹_poöt
 = 
NULL
;

25 
u8
 * 
	g°rög_des¸ùt‹_poöt
[5] ={
NULL
};

26 
u8
 * 
	göãrÁ˚_des¸ùt‹_poöt
 = 
NULL
;

27 
	$u8
(*
d©a_¨rive_ˇŒback
Ë(
u8
 * 
buff
, 
u16
 
size
, u8 
ï_ödex
Ë
NULL
;

28 
	$u8
(*
˛ass_ªque°_ˇŒback
Ë(
USB_SETUP_DATA
 * 
ho°_cmd
);

37 
u8
 
	$des¸ùt‹_ªgi°î
(
u8
 
des¸ùt‹_ty≥
, * 
des¸ùt‹
, u8 
ödex
)

39 
des¸ùt‹_ty≥
)

41 
DEVICE_TYPE
:

42 
devi˚_des¸ùt‹_poöt
 = 
des¸ùt‹
;

44 
CONFIGURATION_TYPE
:

45 
c⁄figuøti⁄_des¸ùt‹_poöt
 = 
des¸ùt‹
;

47 
STRING_TYPE
:

48 
°rög_des¸ùt‹_poöt
[
ödex
] = 
des¸ùt‹
;

50 
INTERFACE_TYPE
:

51 
öãrÁ˚_des¸ùt‹_poöt
 = 
des¸ùt‹
;

53 
ENDPOINT_TYPE
:

56  
ARG_ERR
;

59 
	}
}

69 
u8
 
›í_usb
(
_usb_drv_h™dÀ
 *
usb_hd
, 
	$u8
(*
ª˚ive_ˇŒback
Ë(
u8
 *, 
u16
, u8), 
	$u8
(*
˛ass_ªque°_cb
Ë(
USB_SETUP_DATA
 *))

72 
ï_d©a
[0] = 
	`öô_ï_d©a
(128);

74 if(
ï_d©a
[0] == 0) {

75  
MEM_ERR
;

77 
ï_d©a
[0]->
buff_size
 = 128;

79 
	`usb_¥ötf
("dev sizê%d \n\r",(
USB_DEVICE_DESCRIPTOR
));

80 
	`usb_¥ötf
("sizeo‡ty≥ %d", (
ªque°_ty≥
 ));

81 if(
usb_hd
 =
NULL
) {

82  
HANDLE_ERR
;

85 if(
devi˚_des¸ùt‹_poöt
){

86 
ï_d©a
[0]->
ï_size
 = 
devi˚_des¸ùt‹_poöt
->
bMaxPackëSize0
;

87 
ï_d©a
[0]->
ödex
 = 0;

89  
DESCRIPTOR_ERR
;

92 
d©a_¨rive_ˇŒback
 = 
ª˚ive_ˇŒback
;

93 
˛ass_ªque°_ˇŒback
 = 
˛ass_ªque°_cb
;

94 if(
c⁄figuøti⁄_des¸ùt‹_poöt
){

95 
u8
 * 
p_c⁄f
 = 
c⁄figuøti⁄_des¸ùt‹_poöt
;

97 
p_c⁄f
 += *p_conf;

98 
p_c⁄f
 < (
c⁄figuøti⁄_des¸ùt‹_poöt
 + configuration_descriptor_point[3] *256 + configuration_descriptor_point[2])){

99 
	`usb_¥ötf
("g 0x%x 0x%x",
p_c⁄f
-
c⁄figuøti⁄_des¸ùt‹_poöt
 , configuration_descriptor_point[3] *256 + configuration_descriptor_point[2]);

100 if(
p_c⁄f
[1] =
ENDPOINT_TYPE
){

101 
u8
 
ï_ödx
 = 
p_c⁄f
[2] &0x0f;

103 
	`usb_¥ötf
("gëÉp%d\n\r", 
ï_ödx
);

104 if(
p_c⁄f
[2] &0x80){

105 
ï_d©a
[
ï_ödx
] = 
	`öô_ï_d©a
(
EP_BUFF_MAX
);

107 
ï_d©a
[
ï_ödx
] = 
	`öô_ï_d©a
(64);

110 if(
ï_d©a
[
ï_ödx
] =
NULL
) {

111  
MEM_ERR
;

114 
ï_d©a
[
ï_ödx
]->
dúe˘i⁄
 = 
p_c⁄f
[2] &0x80;

115 
ï_d©a
[
ï_ödx
]->
ï_©å
 = 
p_c⁄f
[3];

116 
ï_d©a
[
ï_ödx
]->
ï_size
 = 
p_c⁄f
[4];

117 
ï_d©a
[
ï_ödx
]->
ödex
 =Ép_indx;

119 if(
p_c⁄f
[2] &0x80){

120 
ï_d©a
[
ï_ödx
]->
buff_size
 = 
EP_BUFF_MAX
;

122 
ï_d©a
[
ï_ödx
]->
buff_size
 = 64;

125 
p_c⁄f
 +=Ö_conf[0];

128  
DESCRIPTOR_ERR
;

131 
usb_hd
->
io
.
d©a_¨rive_ˇŒback
 = data_arrive_callback;

132 
usb_hd
->
io
.
ï_wrôe
 = 
wrôe_ï
;

133 
usb_hd
->
des¸ùt‹
.
c⁄figuøti⁄_des¸ùt‹_poöt
 = 
öãrÁ˚_des¸ùt‹_poöt
;

134 
usb_hd
->
des¸ùt‹
.
devi˚_des¸ùt‹_poöt
 = device_descriptor_point;

135 
usb_hd
->
des¸ùt‹
.
öãrÁ˚_des¸ùt‹_poöt
 = interface_descriptor_point;

136 
usb_hd
->
des¸ùt‹
.
°rög_des¸ùt‹_poöt
 = string_descriptor_point;

138 
	`öô_usb_dev_c⁄åﬁ
(
usb_evít_cb
);

139 
	`usb_¥ötf
("open usb sucess\n\r");

141 
	}
}

143 
	$˛o£_usb
()

145 
u8
 
ï_ödex
;

146 
	`˛o£_usb_dev_c⁄åﬁ
();

147 
ï_ödex
 = 0;Ép_index < 5;Ép_index++)

148 
	`‰ì_ï_d©a
(&
ï_d©a
[
ï_ödex
]);

149 
	}
}

156 
ï_d©a_h™dÀ
 * 
	$öô_ï_d©a
(
u16
 
mÆloc_buff_size
)

158 
ï_d©a_h™dÀ
 * 
√w_ï_d©a
 = (ï_d©a_h™dÀ *)
	`mÆloc
((ep_data_handle));

160 if(
√w_ï_d©a
 == 0) {

164 if(
mÆloc_buff_size
) {

165 
√w_ï_d©a
->
cbuff
 = 
	`√w_cbuff
(
mÆloc_buff_size
);

166 if(
√w_ï_d©a
->
cbuff
 == 0) {

170 
√w_ï_d©a
->
buff
 = 0;

173 
√w_ï_d©a
->
˙t
 = 0;

174 
√w_ï_d©a
->
d©a_size
 = 0;

175 
√w_ï_d©a
->
busy
 = 0;

176 
√w_ï_d©a
->
°¨t_Êag
 = 0;

178  
√w_ï_d©a
;

179 
	}
}

186 
	$‰ì_ï_d©a
(
ï_d©a_h™dÀ
 **
ï_d©a
)

188 if(*
ï_d©a
 =
NULL
) {

192 if((*
ï_d©a
)->
cbuff
 !
NULL
) {

193 
	`‰ì_cbuff
((*
ï_d©a
)->
cbuff
);

195 
	`usb_¥ötf
("‰ìÉ∞%d", (*
ï_d©a
)->
ödex
);

196 
	`‰ì
(*
ï_d©a
);

197 *
ï_d©a
 = 
NULL
;

198 
	}
}

206 
	$˛ór_ï_d©a
(
u8
 
ï_ödex
)

208 if(
ï_d©a
[
ï_ödex
])

209 
	`Êush_cbuff
(
ï_d©a
[
ï_ödex
]->
cbuff
);

210 
	}
}

217 
u8
 
	$£nd_ï
(
ï_d©a_h™dÀ
 * 
ï_h™dÀ
)

219 
∑ck_size
 = 
ï_h™dÀ
->
ï_size
;

220 
u8
 
£nd_buf„r
[64];

222 
∑ck_size
 = 
	`ªad_cbuff
(
ï_h™dÀ
->
cbuff
, 
£nd_buf„r
,Öack_size);

223 if(
∑ck_size
 == 0){

224  
DATA_END
;

226 
	`wrôe_ï_fifo
(
ï_h™dÀ
->
ödex
, 
£nd_buf„r
, 
∑ck_size
);

227 if(
ï_h™dÀ
->
ödex
 == 0){

228 if(
	`gë_cbuff_d©a_size
(
ï_h™dÀ
->
cbuff
) == 0){

229 
	`c⁄åﬁ_d©a_ö_íd
();

232  
NO_ERR
;

233 
	}
}

241 
u8
 
	$wrôe_ï
(
u8
 * 
buff
, 
u16
 
Àn
, u8 
ï_ödex
)

243 
u8
 
ªs
 = 
NO_ERR
;

244 
	`wrôe_cbuff
(
ï_d©a
[
ï_ödex
]->
cbuff
, 
buff
, 
Àn
);

245 
	`£nd_ï
(
ï_d©a
[
ï_ödex
]);

246  
ªs
;

248 
	}
}

250 
u16
 
	$gë_ï_buff_‰ì
(
u8
 
ï_ödex
)

252  
	`gë_cbuff_ªmaö
(
ï_d©a
[
ï_ödex
]->
cbuff
);

253 
	}
}

261 
u8
 
	$gë_des¸ùt‹_dól
(
USB_SETUP_DATA
 * 
ho°_cmd
)

263 
ho°_cmd
->
bVÆueH
) {

264 
DEVICE_TYPE
:

265 if(
devi˚_des¸ùt‹_poöt
)

266 
	`wrôe_ï
((
u8
 *Ë
devi˚_des¸ùt‹_poöt
, ((u8 *) device_descriptor_point)[0], 0);

267 
	`usb_¥ötf
("dev\n\r");

270 
CONFIGURATION_TYPE
:

271 if(
c⁄figuøti⁄_des¸ùt‹_poöt
) {

272 
u16
 
c⁄f_des¸ùt‹_size
 =((
USB_CONFIGURATION_DESCRIPTOR
 *Ë
c⁄figuøti⁄_des¸ùt‹_poöt
)->
wTŸÆLígthL
 + ((USB_CONFIGURATION_DESCRIPTOR *Ëc⁄figuøti⁄_des¸ùt‹_poöt)->
wTŸÆLígthH
 *256;

274 if(
ho°_cmd
->
bLígth
 == 0xff) {

275 
c⁄f_des¸ùt‹_size
 = (
USB_CONFIGURATION_DESCRIPTOR
);

277 
c⁄f_des¸ùt‹_size
 = 
	`MIN
(
ho°_cmd
->
bLígth
 , conf_descriptor_size);

278 
	`wrôe_ï
(
c⁄figuøti⁄_des¸ùt‹_poöt
, 
c⁄f_des¸ùt‹_size
, 0);

280 
	`usb_¥ötf
("cnf\n\r");

283 
STRING_TYPE
:

284 if(
°rög_des¸ùt‹_poöt
[
ho°_cmd
->
bVÆueL
]) {

285 
u8
 
Àn
;

286 
Àn
 = 
	`MIN
(
ho°_cmd
->
bLígth
,*
°rög_des¸ùt‹_poöt
[ho°_cmd->
bVÆueL
]);

288 
	`wrôe_ï
(
°rög_des¸ùt‹_poöt
[
ho°_cmd
->
bVÆueL
], 
Àn
,0);

289 
	`usb_¥ötf
("gë så %d\n", 
ho°_cmd
->
bVÆueL
);

294 
INTERFACE_TYPE
:

295 if(
öãrÁ˚_des¸ùt‹_poöt
) {

296 
	`wrôe_ï
(
öãrÁ˚_des¸ùt‹_poöt
, interface_descriptor_point[0], 0);

300 
ENDPOINT_TYPE
:

310 
	}
}

313 
u8
 
	g∑ck_˙t
 = 0;

316 
	$£t_gë_ï0_d©a
()

318 
∑ck_˙t
++;

319 
	}
}

322 
u8
 
	$gë_ï0_d©a
(
u8
 * 
d©a_buff
, u8 
Àn
)

324 if(
∑ck_˙t
) {

325 if(
d©a_¨rive_ˇŒback
)

326 
	`d©a_¨rive_ˇŒback
(
d©a_buff
, 
Àn
, 0);

328 
∑ck_˙t
--;

333 
	}
}

341 
u8
 
	$ho°_cmd_dól
(
USB_SETUP_DATA
 * 
ho°_cmd
)

343 
	`usb_¥ötf
("cmd ");

344 if(
ho°_cmd
->
bmReque°Ty≥
.
ªcive_ty≥
 == 1){

345 
u8
 
ªs
 = 0;

347 if(
˛ass_ªque°_ˇŒback
)

348 
ªs
 = 
	`˛ass_ªque°_ˇŒback
(
ho°_cmd
);

350 
ªs
) {

352 
	`c⁄åﬁ_d©a_íd
();

355 
	`c⁄åﬁ_d©a_ö_íd
();

358 
	`£t_gë_ï0_d©a
();

363  
UNKNOWN_CMD
;

366 if(
ho°_cmd
->
bmReque°Ty≥
.
ªcive_ty≥
 == 2){

367 
u8
 
ödex_ªg_back
 = 
INDEX_REG
;

368 
INDEX_REG
 = 
ho°_cmd
->
bReque°
;

369 
	`usb_¥ötf
("OUT_FIFO_CNT1_REG:%d\n\r",
OUT_FIFO_CNT1_REG
);

370 
INDEX_REG
 = 
ödex_ªg_back
;

372 if(
ho°_cmd
->
bmReque°Ty≥
.
dú
 == 1){

373 
ho°_cmd
->
bReque°
){

374 
GET_DESCRIPTOR
:

375 
	`gë_des¸ùt‹_dól
(
ho°_cmd
);

378 
	`c⁄åﬁ_d©a_ö_íd
();

379 
	`usb_¥ötf
("unk⁄w cmdÑeque° 0x%x\n\r", 
ho°_cmd
->
bReque°
);

380  
UNKNOWN_CMD
;

383 
ho°_cmd
->
bReque°
) {

384 
SET_ADDRESS
:

385 
FUNC_ADDR_REG
 = 
	`BIT
(7Ë| 
ho°_cmd
->
bVÆueL
;

386 
	`c⁄åﬁ_d©a_íd
();

387 
	`˛ór_ï_d©a
(0);

388 
	`usb_¥ötf
("√wádd∏%d\n\r", 
	`gë_cbuff_d©a_size
(
ï_d©a
[0]->
cbuff
));

390 
SET_CONFIGURATION
:

392 
	`˛ór_ï_d©a
(0);

393 
	`c⁄åﬁ_d©a_ö_íd
();

394 
	`usb_¥ötf
("£àcfg %d\n\r", 
ho°_cmd
->
bVÆueL
);

397 
	`c⁄åﬁ_d©a_ö_íd
();

398  
UNKNOWN_CMD
;

403  
NO_ERR
;

404 
	}
}

411 
	$usb_evít_cb
(
u16
 
evít
, 
u8
 
ï_ödex
, u8 *
buf„r
, u8 
buf„r_Àn
)

413 
u8
 
ªs
 = 0;

414 
evít
) {

415 
RES_EVENT
:

417 
u8
 
ï
;

418 
ï
 = 1;Ép <5;Ép++) {

419 if(
ï_d©a
[
ï
]) {

420 
	`›í_ï
(
ï
, 
ï_d©a
[ï]->
ï_size
,Ép_d©a[ï]->
dúe˘i⁄
,Ép_d©a[ï]->
ï_©å
);

422 
	`˛ór_ï_d©a
(
ï
);

426 
DATA_OUT_EVENT
:

427 if(
ï_ödex
) {

428 if(
d©a_¨rive_ˇŒback
)

429 
	`d©a_¨rive_ˇŒback
(
buf„r
, 
buf„r_Àn
, 
ï_ödex
);

431 if(
	`gë_ï0_d©a
((
u8
 *)
buf„r
, 
buf„r_Àn
)) {

432 
	`c⁄åﬁ_d©a_ö_íd
();

436 
ªs
 = 
	`ho°_cmd_dól
(
buf„r
);

437 if(
ªs
 =
UNKNOWN_CMD
) {

438 
	`¥ötf_buff
((
u8
 *)
buf„r
, buffer);

442 
DATA_IN_EVENT
:

443 
	`£nd_ï
(
ï_d©a
[
ï_ödex
]);

448 
	}
}

	@usb/usb_drv.h

1 #i‚de‡
_USB_DRV_


2 
	#_USB_DRV_


	)

3 
	~"c⁄fig.h
"

4 
	~"c_buff.h
"

6 
	#USB_DRV_DEBUG


	)

7 #ifde‡
USB_DRV_DEBUG


8 
	#usb_¥ötf
 
u¥ötf


	)

10 
	#usb_¥ötf
(...)

	)

13 
	#HOST_TO_DEVICE
 (0x00)

	)

14 
	#DEVICE_TO_HOST
 (0x80)

	)

17 
	#STANDARD_TYPE
 (0x00)

	)

18 
	#CLASS_TYPE
 (0x20)

	)

19 
	#VENDOR_TYPE
 (0x40)

	)

20 
	#RESERVED_TYPE
 (0x60)

	)

23 
	#DEVICE_RECIPIENT
 (0)

	)

24 
	#INTERFACE_RECIPIENT
 (1)

	)

25 
	#ENDPOINT_RECIPIENT
 (2)

	)

26 
	#OTHER_RECIPIENT
 (3)

	)

29 
	#DEVICE_REMOTE_WAKEUP
 (1)

	)

30 
	#EP_STALL
 (0)

	)

33 
	#GET_STATUS
 (0)

	)

34 
	#CLEAR_FEATURE
 (1)

	)

35 
	#SET_FEATURE
 (3)

	)

36 
	#SET_ADDRESS
 (5)

	)

37 
	#GET_DESCRIPTOR
 (6)

	)

38 
	#SET_DESCRIPTOR
 (7)

	)

39 
	#GET_CONFIGURATION
 (8)

	)

40 
	#SET_CONFIGURATION
 (9)

	)

41 
	#GET_INTERFACE
 (10)

	)

42 
	#SET_INTERFACE
 (11)

	)

43 
	#SYNCH_FRAME
 (12)

	)

46 
	#GET_DEVICE_ID
 (0)

	)

47 
	#GET_PORT_STATUS
 (1)

	)

48 
	#SOFT_RESET
 (2)

	)

51 
	#DEVICE_TYPE
 (1)

	)

52 
	#CONFIGURATION_TYPE
 (2)

	)

53 
	#STRING_TYPE
 (3)

	)

54 
	#INTERFACE_TYPE
 (4)

	)

55 
	#ENDPOINT_TYPE
 (5)

	)

57 
	#CS_INTERFACE_DESCRIPTOR
 (0x24)

	)

59 
	#CONF_ATTR_DEFAULT
 (0x80)

60 
	#CONF_ATTR_REMOTE_WAKEUP
 (0x20)

	)

61 
	#CONF_ATTR_SELFPOWERED
 (0x40)

	)

64 
	#EP_ADDR_IN
 (0x80)

	)

65 
	#EP_ADDR_OUT
 (0x00)

	)

67 
	#EP_ATTR_CONTROL
 (0x0)

	)

68 
	#EP_ATTR_ISOCHRONOUS
 (0x1)

	)

69 
	#EP_ATTR_BULK
 (0x2)

	)

70 
	#EP_ATTR_INTERRUPT
 (0x3)

	)

74 
	#LANGID_US_L
 (0x09)

	)

75 
	#LANGID_US_H
 (0x04)

	)

77 
	#SENT_STALL
 
	`BIT
(6)

	)

83 
	sUSB_DEVICE_DESCRIPTOR
{

84 
u8
 
	mbLígth
;

85 
u8
 
	mbDes¸ùt‹Ty≥
;

86 
u8
 
	mbcdUSBL
;

87 
u8
 
	mbcdUSBH
;

88 
u8
 
	mbDevi˚Cœss
;

89 
u8
 
	mbDevi˚SubCœss
;

90 
u8
 
	mbDevi˚PrŸocﬁ
;

91 
u8
 
	mbMaxPackëSize0
;

92 
u8
 
	midVíd‹L
;

93 
u8
 
	midVíd‹H
;

94 
u8
 
	midProdu˘L
;

95 
u8
 
	midProdu˘H
;

96 
u8
 
	mbcdDevi˚L
;

97 
u8
 
	mbcdDevi˚H
;

98 
u8
 
	miM™uÁ˘uªr
;

99 
u8
 
	miProdu˘
;

100 
u8
 
	miSîülNumbî
;

101 
u8
 
	mbNumC⁄figuøti⁄s
;

102 }
__©åibuã__
((
∑cked
));

105 
	sUSB_CONFIGURATION_DESCRIPTOR
{

106 
u8
 
	mbLígth
;

107 
u8
 
	mbDes¸ùt‹Ty≥
;

108 
u8
 
	mwTŸÆLígthL
;

109 
u8
 
	mwTŸÆLígthH
;

110 
u8
 
	mbNumI¡îÁ˚s
;

111 
u8
 
	mbC⁄figuøti⁄VÆue
;

112 
u8
 
	miC⁄figuøti⁄
;

113 
u8
 
	mbmAâribuãs
;

114 
u8
 
	mmaxPowî
;

115 }
__©åibuã__
((
∑cked
));

118 
	sUSB_INTERFACE_DESCRIPTOR
{

119 
u8
 
	mbLígth
;

120 
u8
 
	mbDes¸ùt‹Ty≥
;

121 
u8
 
	mbI¡îÁ˚Numbî
;

122 
u8
 
	mbA…î«ãSëtög
;

123 
u8
 
	mbNumEndpoöts
;

124 
u8
 
	mbI¡îÁ˚Cœss
;

125 
u8
 
	mbI¡îÁ˚SubCœss
;

126 
u8
 
	mbI¡îÁ˚PrŸocﬁ
;

127 
u8
 
	miI¡îÁ˚
;

128 }
__©åibuã__
((
∑cked
));

131 
	sUSB_ENDPOINT_DESCRIPTOR
{

132 
u8
 
	mbLígth
;

133 
u8
 
	mbDes¸ùt‹Ty≥
;

134 
u8
 
	mbEndpoötAddªss
;

135 
u8
 
	mbmAâribuãs
;

136 
u8
 
	mwMaxPackëSizeL
;

137 
u8
 
	mwMaxPackëSizeH
;

138 
u8
 
	mbI¡îvÆ
;

139 }
__©åibuã__
((
∑cked
));

141 
	s_HEADER_FUNCTIONAL_DESCRIPTOR


143 
u8
 
	mbFun˘i⁄Lígth
;

144 
u8
 
	mbDes¸ùt‹Ty≥
;

145 
u8
 
	mbDes¸ùt‹Subty≥
;

146 
u8
 
	mbcdCDCL
;

147 
u8
 
	mbcdCDCH
;

148 }
	t__©åibuã__
((
	t∑cked
))
	tHEADER_FUNCTIONAL_DESCRIPTOR
;

150 
	s_CALL_MANAGEMENT_FUNCTIONAL_DESCRIPTOR


152 
u8
 
	mbFun˘i⁄Lígth
;

153 
u8
 
	mbDes¸ùt‹Ty≥
;

154 
u8
 
	mbDes¸ùt‹Subty≥
;

155 
u8
 
	mbmC≠abûôõs
;

156 
u8
 
	mbD©aI¡îÁ˚
;

158 }
	t__©åibuã__
((
	t∑cked
))
	tCALL_MANAGEMENT_FUNCTIONAL_DESCRIPTOR
;

160 
	s_ABSTRACT_CONTROL_MANAGEMENT_FUNCTIONAL_DESCRIPTOR


162 
u8
 
	mbFun˘i⁄Lígth
;

163 
u8
 
	mbDes¸ùt‹Ty≥
;

164 
u8
 
	mbDes¸ùt‹Subty≥
;

165 
u8
 
	mbmC≠abûôõs
;

166 }
	t__©åibuã__
((
	t∑cked
))
	tABSTRACT_CONTROL_MANAGEMENT_FUNCTIONAL_DESCRIPTOR
;

168 
	s_UNION_FUNCTIONAL_DESCRIPTOR


170 
u8
 
	mbFun˘i⁄Lígth
;

171 
u8
 
	mbDes¸ùt‹Ty≥
;

172 
u8
 
	mbDes¸ùt‹Subty≥
;

173 
u8
 
	mbMa°îI¡îÁ˚
;

174 
u8
 
	mbSœveI¡îÁ˚
;

175 }
	t__©åibuã__
((
	t∑cked
))
	tUNION_FUNCTIONAL_DESCRIPTOR
;

177 
	s_EP_DATA_HANDLE


179 
u8
 *
	mbuff
;

180 
u16
 
	mbuff_size
;

181 
u16
 
	md©a_size
;

182 
u16
 
	m˙t
;

183 
u8
 
	mï_©å
;

184 
u8
 
	mdúe˘i⁄
;

185 
u8
 
	mï_size
;

186 
u8
 
	mödex
;

187 
u8
 
	m°¨t_Êag
;

188 vﬁ©ûê
u8
 
	mbusy
;

189 
c_buff_°ru˘
 *
	mcbuff
;

190 
u8
 (*
ï_i§_dól
)(
	mu8
);

191 }
	tï_d©a_h™dÀ
;

195 
	mSIZE_8
 =0x01,

196 
	mSIZE_16
,

197 
	mSIZE_32
,

198 
	mSIZE_64
,

199 }
	tEP_MAXSIZE_ENUM
;

210 
	mNORM
 =0x00,

211 
	mCLASS
,

212 
	mUSER
,

213 }
	tcmd_ty≥
;

218 
	mDEVICE
=0x00,

219 
	mINTERFACE
,

220 
	mENDPOINT
,

221 
	mOTHER
,

222 }
	tªcive_ty≥
;

224 
	s_ªque°_ty≥


226 
u8
 
	mªcive_ty≥
:5;

227 
u8
 
	mcmdty≥
:2;

228 
u8
 
	mdú
 :1;

229 }
	t__©åibuã__
((
	t∑cked
)Ë
	tªque°_ty≥
;

230 
	s_USB_SETUP_DATA
{

231 
ªque°_ty≥
 
	mbmReque°Ty≥
;

232 
u8
 
	mbReque°
;

233 
u8
 
	mbVÆueL
;

234 
u8
 
	mbVÆueH
;

235 
u8
 
	mbIndexL
;

236 
u8
 
	mbIndexH
;

237 
u16
 
	mbLígth
;

238 }
	tUSB_SETUP_DATA
;

241 
	s_usb_drv_io


243 
u8
 (*
ï_wrôe
)(
	mu8
 *, 
	mu16
, u8);

244 
u8
 (*
d©a_¨rive_ˇŒback
Ë(u8 * 
	mbuff
, 
u16
 
	msize
, u8 
	mï_ödex
);

245 }
	t_usb_drv_io
;

247 
	s_usb_drv_des¸ùt‹


249 
USB_DEVICE_DESCRIPTOR
 * 
	mdevi˚_des¸ùt‹_poöt
;

250 
u8
 * 
	mc⁄figuøti⁄_des¸ùt‹_poöt
;

251 
u8
 **
	m°rög_des¸ùt‹_poöt
;

252 
u8
 * 
	möãrÁ˚_des¸ùt‹_poöt
;

253 }
	t_usb_drv_des¸ùt‹
;

256 
	s_usb_drv_h™dÀ


258 
_usb_drv_io
 
	mio
;

259 
_usb_drv_des¸ùt‹
 
	mdes¸ùt‹
;

260 
u8
 *
	musb_«me
;

261 
u8
 
	m°©us
;

262 }
	t_usb_drv_h™dÀ
;

267 
	mNO_ERR
 = 0x00,

268 
	mUNKNOWN_CMD
,

269 
	mMEM_ERR
,

270 
	mEP_INDEX_ERR
,

271 
	mARG_ERR
,

272 
	mDESCRIPTOR_ERR
,

273 
	mNO_BUFF
,

274 
	mHANDLE_ERR
,

275 
	mDATA_END
,

276 }
	tUSB_ERR_ENUM
;

278 
	#EP_BUFF_MAX
 1024

279 
	#EP0_BUFF_MAX
 (0x08)

	)

281 
	#£t_d©a_íd
(Ë
EP0_CSR
 |
	`BIT
(3)

	)

282 
	#£t_d©a_íd_™d_ö
(Ë
EP0_CSR
 |
	`BIT
(3)|BIT(1)

	)

286 
u8
 
wrôe_ï
(u8 *
buff
, 
u16
 
Àn
, u8 
ï
);

287 
u8
 
›í_usb
(
_usb_drv_h™dÀ
 *
usb_hd
, 
	$u8
(*
ª˚ive_ˇŒback
Ë(
u8
 *, 
u16
, u8), 
	$u8
(*
˛ass_ªque°_cb
Ë(
USB_SETUP_DATA
 *));

288 
	`˛o£_usb
();

289 
u8
 
	`des¸ùt‹_ªgi°î
(u8 
des¸ùt‹_ty≥
, * 
des¸ùt‹
, u8 
ödex
);

290 
	`£t_gë_ï0_d©a
();

291 
u16
 
	`gë_ï_buff_‰ì
(
u8
 
ï_ödex
);

292 
	`u∆ﬂd_usb
();

294 
	`öãºu±_mode_ˇŒback_ªgi°î
(
	$u8
 (*
cb_func
)(
u8
, *, 
u16
));

	@usb/usb_hid_device.c

11 
	~"usb_hid_devi˚.h
"

13 
_usb_drv_h™dÀ
 
	gusb_hd
;

14 c⁄° 
USB_DEVICE_DESCRIPTOR
 
	gdevi˚_des¸ùt‹
 =

16 (
USB_DEVICE_DESCRIPTOR
),

17 
DEVICE_TYPE
,

36 
CON_INT_ENDP_DESCRIPTOR_STRUCT
 
	gc⁄_öt_ídp_des¸ùt‹
=

40 (
USB_CONFIGURATION_DESCRIPTOR
),

41 
CONFIGURATION_TYPE
,

42 (
CON_INT_ENDP_DESCRIPTOR_STRUCT
)%256,

43 (
CON_INT_ENDP_DESCRIPTOR_STRUCT
)/256,

52 (
USB_INTERFACE_DESCRIPTOR
),

53 
INTERFACE_TYPE
,

56 
ENDPOINT_NUMBER
,

64 (
HID_DESCRIPTOR_STRUCT
),

65 
HID_DESCRIPTOR
,

68 
NUM_SUB_DESCRIPTORS
,

71 
REPORT_DESCRIPTOR
,

79 (
USB_ENDPOINT_DESCRIPTOR
),

80 
ENDPOINT_TYPE
,

81 1 | 
EP_ADDR_IN
,

82 
EP_ATTR_INTERRUPT
,

100 
	g§ög3
[] =

102 0x0c,
STRING_TYPE
,'L',0x00,'X',0x00,'U',0x00,'S',0x00,'B',0x00

104 
u8
 
	g§ög1
[] =

106 0x04,
STRING_TYPE
,
LANGID_US_L
,
LANGID_US_H


108 c⁄° 
u8
 
	gª•⁄d_nuŒ
[8] = {0x0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

110 
ªad_ªp‹t_m≠_cb
 
	gusb_ªad_hid_m≠
 = 
NULL
;

111 
ouçut_ªp‹t_cb
 
	gusb_hid_ouçut_ªp‹t_cb
 = 
NULL
;

113 
	$ªgi°î_usb_hid_ˇŒback
(
ªad_ªp‹t_m≠_cb
 
ªad_ªp‹t_m≠_ˇŒback
,
ouçut_ªp‹t_cb
 
ouçut_ªp‹t_ˇŒback
)

115 
usb_ªad_hid_m≠
 = 
ªad_ªp‹t_m≠_ˇŒback
;

116 
usb_hid_ouçut_ªp‹t_cb
 = 
ouçut_ªp‹t_ˇŒback
;

117 
	}
}

119 
u8
 
	$usb_d©a_ˇŒback
(
u8
 *
ªad_d©a
,
u16
 
size
,u8 
ï_ödex
)

122 
	`usb_¥ötf
("d cb ");

123 
	`¥ötf_buff
(
ªad_d©a
, 
size
);

124 if(
usb_hid_ouçut_ªp‹t_cb
)

125 
	`usb_hid_ouçut_ªp‹t_cb
(0, 
ªad_d©a
, 
size
);

127 
	}
}

129 
	$usb_hid_öput_ªp‹t_£nd
(
u8
 
ªp‹t_id
, u8 *
buf„r
, 
u16
 
buf„r_Àn
)

131 
u8
 
ªp‹t
[64];

132 if(
ªp‹t_id
 != 0xff){

133 
buf„r_Àn
 = buffer_len > 64?64:buffer_len;

134 
	`wrôe_ï
(
buf„r
,
buf„r_Àn
, 1);

137 
ªp‹t
[0] = 
ªp‹t_id
;

138 
buf„r_Àn
 = buffer_len > 63?63:buffer_len;

139 
	`mem˝y
(&
ªp‹t
[1], 
buf„r
, 
buf„r_Àn
);

140 
	`wrôe_ï
(
ªp‹t
,
buf„r_Àn
+1, 1);

142 
	}
}

152 
u8
 
	$˛ass_ˇŒback
(
USB_SETUP_DATA
*
cmd
)

155 
	`usb_¥ötf
("c:0x%x\n", 
cmd
->
bReque°
);

156 
cmd
->
bReque°
)

158 
SET_IDLE
:

159 
	`usb_¥ötf
("idle\n\r");

161 
GET_DESCRIPTOR
:

162 
cmd
->
bVÆueH
)

164 
REPORT_DESCRIPTOR
:

167 if(
usb_ªad_hid_m≠
)

169 
u8
 
m≠_buff
[128];

170 
u16
 
off£t
 = 0;

171 
u16
 
∑ck_size
;

172 
u16
 
m≠_size
 = 
	`gë_ªp‹t_m≠_size
();

173 ; 
off£t
 < 
m≠_size
; off£à+
∑ck_size
)

176 
∑ck_size
 = 
m≠_size
 - 
off£t
;

177 if(
∑ck_size
 > 128)

178 
∑ck_size
 = 128;

181 
∑ck_size
 = 
	`usb_ªad_hid_m≠
(
off£t
, 
m≠_buff
,Öack_size);

183 
	`wrôe_ï
(
m≠_buff
,
∑ck_size
, 0);

186 
	`u¥ötf
("r");

190 
	`¥ötf_buff
((
u8
 *)
cmd
, (
USB_SETUP_DATA
));

194 
SET_REPORT
:

198 
	`¥ötf_buff
((
u8
 *)
cmd
, (
USB_SETUP_DATA
));

202 
	}
}

211 
u8
 
	$›í_usb_hid
()

213 
	`des¸ùt‹_ªgi°î
(
DEVICE_TYPE
,(
u8
*)&
devi˚_des¸ùt‹
,0);

214 
c⁄_öt_ídp_des¸ùt‹
.
hid_des¸ùt‹
.
HidSubDes¸ùt‹s
[0].
wDes¸ùt‹Lígth
 = 
	`gë_ªp‹t_m≠_size
();

215 
	`des¸ùt‹_ªgi°î
(
CONFIGURATION_TYPE
,(
u8
*)&
c⁄_öt_ídp_des¸ùt‹
,0);

216 
	`des¸ùt‹_ªgi°î
(
STRING_TYPE
,(
u8
*)&
§ög3
,1);

217 
	`des¸ùt‹_ªgi°î
(
STRING_TYPE
,(
u8
*)&
§ög3
,2);

218 
	`des¸ùt‹_ªgi°î
(
STRING_TYPE
,(
u8
*)&
§ög1
,0);

220 
	`›í_usb
(&
usb_hd
,
usb_d©a_ˇŒback
,
˛ass_ˇŒback
);

222 
	}
}

224 
	$˛o£_usb_hid
()

226 
	`˛o£_usb
();

227 
	}
}

	@usb/usb_hid_device.h

1 #i‚de‡
_USB_HID_DEV_


2 
	#_USB_HID_DEV_


	)

3 
	~"c⁄fig.h
"

4 
	~"hid_devi˚_≠i.h
"

5 
	~"usb_drv.h
"

7 
	#GET_REPORT
 0x01

8 
	#GET_IDLE
 0x02

9 
	#GET_PROTOCOL
 0x03

10 
	#SET_REPORT
 0x09

11 
	#SET_IDLE
 0x0A

12 
	#SET_PROTOCOL
 0x0B

13 

	)

14 
	#HID_DESCRIPTOR
 0x21

15 
	#REPORT_DESCRIPTOR
 0x22

16 
	#PHYSICAL_DESCRIPTOR
 0x23

17 

	)

18 
	#ENDPOINT_NUMBER
 1

	)

20 
	s_HID_SUB_DESCRIPTOR_STRUCT


22 
u8
 
	mbDes¸ùt‹Ty≥
;

23 
u16
 
	mwDes¸ùt‹Lígth
;

24 }
	t__©åibuã__
((
	t∑cked
)Ë
	tHID_SUB_DESCRIPTOR_STRUCT
,*
	tpHID_SUB_DESCRIPTOR_STRUCT
;

25 
	#NUM_SUB_DESCRIPTORS
 1

	)

27 
	s_HID_DESCRIPTOR_STRUCT


29 
u8
 
	mbLígth
;

30 
u8
 
	mbDes¸ùt‹Ty≥
;

31 
u16
 
	mbcdHID
;

32 
u8
 
	mbCou¡ryCode
;

33 
u8
 
	mbNumDes¸ùt‹s
;

34 
HID_SUB_DESCRIPTOR_STRUCT
 
	mHidSubDes¸ùt‹s
[
NUM_SUB_DESCRIPTORS
];

35 }
	t__©åibuã__
((
	t∑cked
)Ë
	tHID_DESCRIPTOR_STRUCT
,*
	tpHID_DESCRIPTOR_STRUCT
;

37 
	s_CON_INT_ENDP_DESCRIPTOR_STRUCT


39 
USB_CONFIGURATION_DESCRIPTOR
 
	mc⁄figuøti⁄_des¸ùt‹
;

40 
USB_INTERFACE_DESCRIPTOR
 
	möãrÁ˚_des¸ùt‹
;

41 
HID_DESCRIPTOR_STRUCT
 
	mhid_des¸ùt‹
;

42 
USB_ENDPOINT_DESCRIPTOR
 
	mídpoöt_des¸ùt‹
[
ENDPOINT_NUMBER
];

43 }
	t__©åibuã__
((
	t∑cked
)Ë
	tCON_INT_ENDP_DESCRIPTOR_STRUCT
;

45 
ªgi°î_usb_hid_ˇŒback
(
ªad_ªp‹t_m≠_cb
 
ªad_ªp‹t_m≠_ˇŒback
,
ouçut_ªp‹t_cb
 
ouçut_ªp‹t_ˇŒback
);

46 
usb_hid_öput_ªp‹t_£nd
(
u8
 
ªp‹t_id
, u8 *
buf„r
, 
u16
 
buf„r_Àn
);

47 
u8
 
›í_usb_hid
();

48 
˛o£_usb_hid
();

	@usb/usb_task.c

1 
	~"usb_drv.h
"

2 
	~"usb_dev_íum.h
"

3 
	~"èsk_m™age.h
"

4 
	~"sd_drv.h
"

6 
	~"c_buff.h
"

8 #ifde‡
USB_DEV
==
USB_DISK


9 
u8
 
usb_èsk
(*
p
);

10 
u8
 
usb_öô
();

11 
u8
 
usb_exô
();

12 
sd_h™dÀ
 *
	gsd_hd
 = 0;

13 
c_buff_°ru˘
 *
	gcbw_cmd_cbuf
 = 
NULL
;

15 
èsk_ls
 
	gusb_èsk_ls
 =

17 .
«me
 = "usb_task",

18 .
	gèsk_func
 = 
usb_èsk
,

19 .
	gèsk_öô
 = 
usb_öô
,

20 .
	gèsk_exô
 = 
usb_exô
,

21 .
	gq_msg
 = 0,

24 
u32
 
	gèsk_run_˙t
 = 0;;

25 
u32
 
	gmsg
[4];

26 
u8
 
	gsd_buf
[
SD_BLOCK_SIZE
];

27 
CBW
 
	gcbw_cmd
;

28 
u8
 
	$usb_èsk
(*
p
)

30 
u8
 
ªs
;

32 if(
èsk_run_˙t
++ == 1000)

35 
èsk_run_˙t
 = 0;

37 
	`mem£t
((
u8
 *)
msg
, 0x00, (msg));

38 
ªs
 = 
	`èsk_≥nd_msg
(
msg
);

45 
msg
[0])

47 
CBW_CMD_ARRIVAL
:

49 
	`ªad_cbuff
(
cbw_cmd_cbuf
, (
u8
 *)&
cbw_cmd
, (
CBW
));

50 
	`cbw_cmd_dól
(&
cbw_cmd
);

53 if(
msg
[0] != 0xffffffff)

54 
	`u¥ötf
("î∏msg %d\n\r", 
msg
[0]);

59 
	}
}

61 
u8
 
	$usb_öô
()

63 if(
	`›í_usb_disk
())

68 
sd_hd
 = 
	`›í_sd
();

69 if(
sd_hd
 == 0)

74 
cbw_cmd_cbuf
 = 
	`√w_cbuff
(200);

75 if(
cbw_cmd_cbuf
 =
NULL
)

81 
	}
}

83 
u8
 
	$usb_exô
()

85 
	`u∆ﬂd_usb
();

86 
	`‰ì_cbuff
(&
cbw_cmd_cbuf
);

88 
	}
}

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

95 #unde‡
__USE_ISOC99


96 #unde‡
__USE_ISOC95


97 #unde‡
__USE_POSIX


98 #unde‡
__USE_POSIX2


99 #unde‡
__USE_POSIX199309


100 #unde‡
__USE_POSIX199506


101 #unde‡
__USE_XOPEN


102 #unde‡
__USE_XOPEN_EXTENDED


103 #unde‡
__USE_UNIX98


104 #unde‡
__USE_XOPEN2K


105 #unde‡
__USE_XOPEN2K8


106 #unde‡
__USE_LARGEFILE


107 #unde‡
__USE_LARGEFILE64


108 #unde‡
__USE_FILE_OFFSET64


109 #unde‡
__USE_BSD


110 #unde‡
__USE_SVID


111 #unde‡
__USE_MISC


112 #unde‡
__USE_ATFILE


113 #unde‡
__USE_GNU


114 #unde‡
__USE_REENTRANT


115 #unde‡
__USE_FORTIFY_LEVEL


116 #unde‡
__FAVOR_BSD


117 #unde‡
__KERNEL_STRICT_NAMES


121 #i‚de‡
_LOOSE_KERNEL_NAMES


122 
	#__KERNEL_STRICT_NAMES


	)

126 
	#__USE_ANSI
 1

	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

144 #i‡
deföed
 
_BSD_SOURCE
 && \

145 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

146 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

147 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

148 
	#__FAVOR_BSD
 1

	)

152 #ifde‡
_GNU_SOURCE


153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_POSIX_SOURCE


156 
	#_POSIX_SOURCE
 1

	)

157 #unde‡
_POSIX_C_SOURCE


158 
	#_POSIX_C_SOURCE
 200809L

	)

159 #unde‡
_XOPEN_SOURCE


160 
	#_XOPEN_SOURCE
 700

	)

161 #unde‡
_XOPEN_SOURCE_EXTENDED


162 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

163 #unde‡
_LARGEFILE64_SOURCE


164 
	#_LARGEFILE64_SOURCE
 1

	)

165 #unde‡
_BSD_SOURCE


166 
	#_BSD_SOURCE
 1

	)

167 #unde‡
_SVID_SOURCE


168 
	#_SVID_SOURCE
 1

	)

169 #unde‡
_ATFILE_SOURCE


170 
	#_ATFILE_SOURCE
 1

	)

175 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

176 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

177 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

178 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

179 
	#_BSD_SOURCE
 1

	)

180 
	#_SVID_SOURCE
 1

	)

187 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

188 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

189 
	#__USE_ISOC99
 1

	)

193 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

194 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

195 
	#__USE_ISOC95
 1

	)

200 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

201 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

202 
	#_POSIX_SOURCE
 1

	)

203 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

204 
	#_POSIX_C_SOURCE
 2

	)

205 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

206 
	#_POSIX_C_SOURCE
 199506L

	)

207 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

208 
	#_POSIX_C_SOURCE
 200112L

	)

210 
	#_POSIX_C_SOURCE
 200809L

	)

212 
	#__USE_POSIX_IMPLICITLY
 1

	)

215 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


216 
	#__USE_POSIX
 1

	)

219 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX2
 1

	)

223 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

224 
	#__USE_POSIX199309
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

228 
	#__USE_POSIX199506
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

232 
	#__USE_XOPEN2K
 1

	)

233 #unde‡
__USE_ISOC99


234 
	#__USE_ISOC99
 1

	)

237 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

238 
	#__USE_XOPEN2K8
 1

	)

239 #unde‡
_ATFILE_SOURCE


240 
	#_ATFILE_SOURCE
 1

	)

243 #ifdef 
_XOPEN_SOURCE


244 
	#__USE_XOPEN
 1

	)

245 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

246 
	#__USE_XOPEN_EXTENDED
 1

	)

247 
	#__USE_UNIX98
 1

	)

248 #unde‡
_LARGEFILE_SOURCE


249 
	#_LARGEFILE_SOURCE
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

252 
	#__USE_XOPEN2K8
 1

	)

254 
	#__USE_XOPEN2K
 1

	)

255 #unde‡
__USE_ISOC99


256 
	#__USE_ISOC99
 1

	)

259 #ifde‡
_XOPEN_SOURCE_EXTENDED


260 
	#__USE_XOPEN_EXTENDED
 1

	)

265 #ifde‡
_LARGEFILE_SOURCE


266 
	#__USE_LARGEFILE
 1

	)

269 #ifde‡
_LARGEFILE64_SOURCE


270 
	#__USE_LARGEFILE64
 1

	)

273 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

274 
	#__USE_FILE_OFFSET64
 1

	)

277 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


278 
	#__USE_MISC
 1

	)

281 #ifdef 
_BSD_SOURCE


282 
	#__USE_BSD
 1

	)

285 #ifdef 
_SVID_SOURCE


286 
	#__USE_SVID
 1

	)

289 #ifdef 
_ATFILE_SOURCE


290 
	#__USE_ATFILE
 1

	)

293 #ifdef 
_GNU_SOURCE


294 
	#__USE_GNU
 1

	)

297 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


298 
	#__USE_REENTRANT
 1

	)

301 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

302 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

303 #i‡
_FORTIFY_SOURCE
 > 1

304 
	#__USE_FORTIFY_LEVEL
 2

	)

306 
	#__USE_FORTIFY_LEVEL
 1

	)

309 
	#__USE_FORTIFY_LEVEL
 0

	)

313 
	~<bôs/¥edefs.h
>

316 
	#__STDC_ISO_10646__
 200009L

	)

324 #unde‡
__GNU_LIBRARY__


325 
	#__GNU_LIBRARY__
 6

	)

329 
	#__GLIBC__
 2

	)

330 
	#__GLIBC_MINOR__
 10

	)

332 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

333 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

336 #i‡
deföed
 
__GNUC__
 \

337 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

338 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

339 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

340 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

344 #i‚de‡
__ASSEMBLER__


345 #i‚de‡
_SYS_CDEFS_H


346 
	~<sys/cdefs.h
>

351 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


352 
	#__USE_LARGEFILE
 1

	)

353 
	#__USE_LARGEFILE64
 1

	)

359 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

360 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

361 && 
deföed
 
	g__exã∫_ölöe


362 
	#__USE_EXTERN_INLINES
 1

	)

367 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

368 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

369 && 
deföed
 
	g__exã∫_ölöe


370 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

378 
	~<gnu/°ubs.h
>

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

42 
	#__MALLOC_P
(
¨gs
Ë
	)
args

43 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

48 
__BEGIN_DECLS


51 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

54 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

55 
__©åibuã_mÆloc__
 
__wur
;

62 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

63 
__©åibuã_w¨n_unu£d_ªsu…__
;

66 
‰ì
 
__MALLOC_P
 ((*
__±r
));

69 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

72 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

73 
__©åibuã_mÆloc__
 
__wur
;

76 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

82 
__©åibuã_mÆloc__
 
__wur
;

86 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

89 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

90 
__©åibuã_mÆloc__
;

94 
	smÆlöfo
 {

95 
	m¨ía
;

96 
	m‹dblks
;

97 
	msmblks
;

98 
	mhblks
;

99 
	mhblkhd
;

100 
	musmblks
;

101 
	mfsmblks
;

102 
	mu‹dblks
;

103 
	mf‹dblks
;

104 
	mkìpco°
;

108 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

111 #i‚de‡
M_MXFAST


112 
	#M_MXFAST
 1

	)

114 #i‚de‡
M_NLBLKS


115 
	#M_NLBLKS
 2

	)

117 #i‚de‡
M_GRAIN


118 
	#M_GRAIN
 3

	)

120 #i‚de‡
M_KEEP


121 
	#M_KEEP
 4

	)

125 
	#M_TRIM_THRESHOLD
 -1

	)

126 
	#M_TOP_PAD
 -2

	)

127 
	#M_MMAP_THRESHOLD
 -3

	)

128 
	#M_MMAP_MAX
 -4

	)

129 
	#M_CHECK_ACTION
 -5

	)

130 
	#M_PERTURB
 -6

	)

131 
	#M_ARENA_TEST
 -7

	)

132 
	#M_ARENA_MAX
 -8

	)

135 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

139 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

143 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

146 
mÆloc_°©s
 
__MALLOC_P
 (());

149 
mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
);

152 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

156 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

161 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

163 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

164 
__c⁄°
 
__mÆloc_±r_t
));

165 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

166 
__c⁄°
 
__mÆloc_±r_t
));

167 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

168 
__c⁄°
 
__mÆloc_±r_t
));

169 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

170 
size_t
 
__size
,

171 
__c⁄°
 
__mÆloc_±r_t
));

172 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

175 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

178 
__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/öt-Œ64.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	tumode_t
;

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

149 
	#°dö
 
°dö


	)

150 
	#°dout
 
°dout


	)

151 
	#°dîr
 
°dîr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

157 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifde‡
__USE_ATFILE


162 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

163 
__c⁄°
 *
__√w
Ë
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #i‚de‡
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

174 #ifde‡
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

177 
	#tmpfûe
 
tmpfûe64


	)

181 #ifde‡
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

186 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`f˛o£
 (
FILE
 *
__°ªam
);

219 
	`fÊush
 (
FILE
 *
__°ªam
);

220 
__END_NAMESPACE_STD


222 #ifde‡
__USE_MISC


229 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_GNU


239 
	`f˛o£Æl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #i‚de‡
__USE_FILE_OFFSET64


249 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

255 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

256 
__c⁄°
 *
__ª°ri˘
 
__modes
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

259 #ifde‡
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

261 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

264 
__c⁄°
 *
__ª°ri˘
 
__modes
,

265 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

266 
__wur
;

268 
	#f›í
 
f›í64


	)

269 
	#‰e›í
 
‰e›í64


	)

272 
__END_NAMESPACE_STD


273 #ifde‡
__USE_LARGEFILE64


274 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

275 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

276 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

294 #ifde‡
__USE_XOPEN2K8


296 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

297 
__THROW
 
__wur
;

302 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

306 
__BEGIN_NAMESPACE_STD


309 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

313 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

314 
__modes
, 
size_t
 
__n
Ë
__THROW
;

315 
__END_NAMESPACE_STD


317 #ifdef 
__USE_BSD


320 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

321 
size_t
 
__size
Ë
__THROW
;

324 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

328 
__BEGIN_NAMESPACE_STD


333 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

334 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

339 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

341 
	$•rötf
 (*
__ª°ri˘
 
__s
,

342 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

348 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

349 
_G_va_li°
 
__¨g
);

354 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

356 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

357 
_G_va_li°
 
__¨g
Ë
__THROW
;

358 
__END_NAMESPACE_STD


360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


361 
__BEGIN_NAMESPACE_C99


363 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

365 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

367 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

368 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

369 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

370 
__END_NAMESPACE_C99


373 #ifde‡
__USE_GNU


376 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

377 
_G_va_li°
 
__¨g
)

378 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

379 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

380 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

381 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

382 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

383 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

384 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

387 #ifde‡
__USE_XOPEN2K8


394 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

395 
_G_va_li°
 
__¨g
)

396 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

397 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

398 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

402 
__BEGIN_NAMESPACE_STD


407 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

413 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

415 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

416 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

418 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

419 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

420 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

421 #ifde‡
__REDIRECT


425 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

427 
__isoc99_fsˇnf
Ë
__wur
;

428 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

429 
__isoc99_sˇnf
Ë
__wur
;

430 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

431 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

432 
__isoc99_ssˇnf
Ë
__THROW
;

434 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

436 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

439 
	#fsˇnf
 
__isoc99_fsˇnf


	)

440 
	#sˇnf
 
__isoc99_sˇnf


	)

441 
	#ssˇnf
 
__isoc99_ssˇnf


	)

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_ISOC99


448 
__BEGIN_NAMESPACE_C99


453 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

454 
_G_va_li°
 
__¨g
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

461 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

462 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

466 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

467 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

469 #i‡!
deföed
 
__USE_GNU
 \

470 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

471 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

472 #ifde‡
__REDIRECT


476 
	`__REDIRECT
 (
vfsˇnf
,

477 (
FILE
 *
__ª°ri˘
 
__s
,

478 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

479 
__isoc99_vfsˇnf
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

482 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vssˇnf
,

485 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

487 
__isoc99_vssˇnf
)

488 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

490 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

491 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

492 
_G_va_li°
 
__¨g
Ë
__wur
;

493 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

494 
_G_va_li°
 
__¨g
Ë
__wur
;

495 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

496 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

497 
_G_va_li°
 
__¨g
Ë
__THROW
;

498 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

499 
	#vsˇnf
 
__isoc99_vsˇnf


	)

500 
	#vssˇnf
 
__isoc99_vssˇnf


	)

504 
__END_NAMESPACE_C99


508 
__BEGIN_NAMESPACE_STD


513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

521 
__END_NAMESPACE_STD


525 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

527 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


532 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

533 
	`gëch¨_u∆ocked
 ();

536 #ifde‡
__USE_MISC


543 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

547 
__BEGIN_NAMESPACE_STD


555 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

562 
	`putch¨
 (
__c
);

563 
__END_NAMESPACE_STD


567 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

569 #ifde‡
__USE_MISC


576 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

579 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


584 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

585 
	`putch¨_u∆ocked
 (
__c
);

589 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

590 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

592 
	`gëw
 (
FILE
 *
__°ªam
);

595 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

599 
__BEGIN_NAMESPACE_STD


604 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

605 
__wur
;

612 *
	$gës
 (*
__s
Ë
__wur
;

613 
__END_NAMESPACE_STD


615 #ifde‡
__USE_GNU


622 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

623 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

627 #ifdef 
__USE_XOPEN2K8


638 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

639 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

640 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

641 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

642 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

652 
size_t
 *
__ª°ri˘
 
__n
,

653 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

657 
__BEGIN_NAMESPACE_STD


662 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

668 
	`puts
 (
__c⁄°
 *
__s
);

675 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

682 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

683 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

688 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

689 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

690 
__END_NAMESPACE_STD


692 #ifde‡
__USE_GNU


699 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

700 
FILE
 *
__ª°ri˘
 
__°ªam
);

703 #ifde‡
__USE_MISC


710 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

717 
__BEGIN_NAMESPACE_STD


722 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

727 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

732 
	`ªwöd
 (
FILE
 *
__°ªam
);

733 
__END_NAMESPACE_STD


740 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


741 #i‚de‡
__USE_FILE_OFFSET64


746 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

751 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

753 #ifde‡
__REDIRECT


754 
	`__REDIRECT
 (
f£eko
,

755 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

756 
f£eko64
);

757 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

759 
	#f£eko
 
f£eko64


	)

760 
	#·ñlo
 
·ñlo64


	)

765 
__BEGIN_NAMESPACE_STD


766 #i‚de‡
__USE_FILE_OFFSET64


771 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

776 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

778 #ifde‡
__REDIRECT


779 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

780 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

781 
	`__REDIRECT
 (
f£ços
,

782 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

784 
	#fgëpos
 
fgëpos64


	)

785 
	#f£ços
 
f£ços64


	)

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_LARGEFILE64


791 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

792 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

793 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

794 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

797 
__BEGIN_NAMESPACE_STD


799 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

801 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

803 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
__END_NAMESPACE_STD


806 #ifde‡
__USE_MISC


808 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

809 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

810 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

814 
__BEGIN_NAMESPACE_STD


819 
	`≥º‹
 (
__c⁄°
 *
__s
);

820 
__END_NAMESPACE_STD


826 
	~<bôs/sys_îæi°.h
>

829 #ifdef 
__USE_POSIX


831 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 #ifde‡
__USE_MISC


836 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

840 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

841 
deföed
 
__USE_MISC
)

846 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

852 
	`p˛o£
 (
FILE
 *
__°ªam
);

856 #ifdef 
__USE_POSIX


858 *
	$˘îmid
 (*
__s
Ë
__THROW
;

862 #ifde‡
__USE_XOPEN


864 *
	`cu£rid
 (*
__s
);

868 #ifdef 
__USE_GNU


869 
ob°ack
;

872 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

873 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

874 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

875 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

876 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

877 
_G_va_li°
 
__¨gs
)

878 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

882 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


886 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

890 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

893 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

896 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


900 
	#__√ed_gë›t


	)

901 
	~<gë›t.h
>

906 #ifde‡
__USE_EXTERN_INLINES


907 
	~<bôs/°dio.h
>

909 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


910 
	~<bôs/°dio2.h
>

912 #ifde‡
__LDBL_COMPAT


913 
	~<bôs/°dio-ldbl.h
>

916 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

41 
__BEGIN_NAMESPACE_STD


43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

44 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

45 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

49 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 
__END_NAMESPACE_STD


55 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


56 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
__c
, 
size_t
 
__n
)

58 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

62 
__BEGIN_NAMESPACE_STD


64 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

67 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

68 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

71 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


74 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__OPTIMIZE__


80 
__exã∫_Æways_ölöe
 *

81 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


83  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

86 
__exã∫_Æways_ölöe
 
__c⁄°
 *

87 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


89  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

92 
	}
}

94 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

95 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

97 
__END_NAMESPACE_STD


99 #ifde‡
__USE_GNU


102 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


103 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

113 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


114 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

116 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

119 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

120 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 
__BEGIN_NAMESPACE_STD


127 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

131 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

132 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

135 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

138 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

139 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

142 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

143 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

145 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

149 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

150 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

152 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

153 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((2));

155 
__END_NAMESPACE_STD


157 #ifde‡
__USE_XOPEN2K8


161 
	~<xloˇÀ.h
>

164 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

165 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

167 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

168 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

171 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


173 *
	$°rdup
 (
__c⁄°
 *
__s
)

174 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

180 #i‡
deföed
 
__USE_XOPEN2K8


181 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

182 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

185 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


187 
	#°rdu∑
(
s
) \

188 (
__exãnsi⁄__
 \

190 
__c⁄°
 *
__ﬁd
 = (
s
); \

191 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

192 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

193 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

194 
	}
}))

	)

197 
	#°∫du∑
(
s
, 
n
) \

198 (
__exãnsi⁄__
 \

200 
__c⁄°
 *
__ﬁd
 = (
s
); \

201 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

202 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

203 
__√w
[
__Àn
] = '\0'; \

204 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

205 }))

	)

208 
	g__BEGIN_NAMESPACE_STD


210 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


213 *
°rchr
 (*
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

215 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 #ifde‡
__OPTIMIZE__


219 
__exã∫_Æways_ölöe
 *

220 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


222  
__buûtö_°rchr
 (
__s
, 
__c
);

225 
__exã∫_Æways_ölöe
 
__c⁄°
 *

226 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


228  
__buûtö_°rchr
 (
__s
, 
__c
);

233 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

234 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


240 *
	`°ºchr
 (*
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

242 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 #ifde‡
__OPTIMIZE__


246 
__exã∫_Æways_ölöe
 *

247 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


249  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

252 
__exã∫_Æways_ölöe
 
__c⁄°
 *

253 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


255  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

258 
	}
}

260 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

261 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 
__END_NAMESPACE_STD


265 #ifde‡
__USE_GNU


268 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


269 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

271 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

275 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

279 
__BEGIN_NAMESPACE_STD


282 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

283 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

286 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


292 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

294 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__OPTIMIZE__


298 
__exã∫_Æways_ölöe
 *

299 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


301  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

304 
__exã∫_Æways_ölöe
 
__c⁄°
 *

305 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


307  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

310 
	}
}

312 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

313 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

316 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


319 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

321 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

322 
__c⁄°
 *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

325 #ifde‡
__OPTIMIZE__


326 
__exã∫_Æways_ölöe
 *

327 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


329  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

332 
__exã∫_Æways_ölöe
 
__c⁄°
 *

333 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


335  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

338 
	}
}

340 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2));

348 
__END_NAMESPACE_STD


352 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

353 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

354 **
__ª°ri˘
 
__ßve_±r
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

356 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


357 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

358 **
__ª°ri˘
 
__ßve_±r
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

362 #ifde‡
__USE_GNU


364 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


365 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

367 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

368 
__c⁄°
 *
__√edÀ
)

369 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

371 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

372 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 #ifde‡
__USE_GNU


380 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

381 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

386 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

387 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

389 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

390 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

395 
__BEGIN_NAMESPACE_STD


397 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

399 
__END_NAMESPACE_STD


401 #ifdef 
__USE_XOPEN2K8


404 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

405 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

409 
__BEGIN_NAMESPACE_STD


411 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

412 
__END_NAMESPACE_STD


413 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


421 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


424 #ifde‡
__REDIRECT_NTH


425 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

426 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

427 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

429 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

430 
__THROW
 
	`__n⁄nuŒ
 ((2));

431 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

436 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 #ifde‡
__USE_XOPEN2K8


443 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

449 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

451 #ifde‡
__USE_BSD


453 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

454 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

460 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

461 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


467 *
	`ödex
 (*
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

472 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


473 
__exã∫_Æways_ölöe
 *

474 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


476  
	`__buûtö_ödex
 (
__s
, 
__c
);

479 
__exã∫_Æways_ölöe
 
__c⁄°
 *

480 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


482  
	`__buûtö_ödex
 (
__s
, 
__c
);

485 
	}
}

487 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

488 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

492 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


495 *
	`rödex
 (*
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

500 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


501 
__exã∫_Æways_ölöe
 *

502 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


504  
	`__buûtö_rödex
 (
__s
, 
__c
);

507 
__exã∫_Æways_ölöe
 
__c⁄°
 *

508 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


510  
	`__buûtö_rödex
 (
__s
, 
__c
);

513 
	}
}

515 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

516 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

521 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifdef 
__USE_GNU


526 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifde‡
__GNUC__


528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

55 
	#__bsw≠_c⁄°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

59 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

60 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

61 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

62 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

63 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

64 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

65 || 
deföed
 
	g__amdÁm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exãnsi⁄__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exãnsi⁄__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "Ù" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exãnsi⁄__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_c⁄°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

110 #i‡
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exãnsi⁄__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exãnsi⁄__
 \

122 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

125 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

128 
__w
.
__Œ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_SET_BTS
 "btsq"

	)

31 
	#__FD_CLR_BTR
 "båq"

	)

32 
	#__FD_ISSET_BT
 "btq"

	)

34 
	#__FD_ZERO_STOS
 "°o¶"

	)

35 
	#__FD_SET_BTS
 "bt¶"

	)

36 
	#__FD_CLR_BTR
 "bål"

	)

37 
	#__FD_ISSET_BT
 "bé"

	)

40 
	#__FD_ZERO
(
fd•
) \

42 
__d0
, 
__d1
; \

43 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

44 : "=c" (
__d0
), "=D" (
__d1
) \

45 : "a" (0), "0" ( (
fd_£t
) \

46 /  (
__fd_mask
)), \

47 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

49 } 0)

	)

51 
	#__FD_SET
(
fd
, 
fd•
) \

52 
__asm__
 
	`__vﬁ©ûe__
 (
__FD_SET_BTS
 " %1,%0" \

53 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

54 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

55 : "cc","mem‹y")

	)

56 
	#__FD_CLR
(
fd
, 
fd•
) \

57 
__asm__
 
	`__vﬁ©ûe__
 (
__FD_CLR_BTR
 " %1,%0" \

58 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

59 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

60 : "cc","mem‹y")

	)

61 
	#__FD_ISSET
(
fd
, 
fd•
) \

62 (
__exãnsi⁄__
 \

63 ({
__ªsu…
; \

64 
__asm__
 
	`__vﬁ©ûe__
 (
__FD_ISSET_BT
 " %1,%2 ; setcb %b0" \

65 : "=q" (
__ªsu…
) \

66 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
), \

67 "m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

69 
__ªsu…
; }))

	)

75 
	#__FD_ZERO
(
£t
) \

77 
__i
; \

78 
fd_£t
 *
__¨r
 = (
£t
); \

79 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

80 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

81 } 0)

	)

82 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

83 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

84 
	#__FD_ISSET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] & 
	`__FDMASK
 (d))

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0)

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

91 
size_t
 
__Àn
))

93 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

94 
	}
}

96 
__exã∫_Æways_ölöe
 

97 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

99 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

100 
	}
}

103 
__exã∫_Æways_ölöe
 *

104 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

106  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

107 
	}
}

109 #ifde‡
__USE_GNU


110 
__exã∫_Æways_ölöe
 *

111 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

113  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

114 
	}
}

118 
__exã∫_Æways_ölöe
 *

119 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

120 
size_t
 
__Àn
))

122  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

123 
	}
}

126 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

127 
size_t
 
__de°Àn
Ë
__THROW
;

128 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

129 
__c⁄°
 *
__§c
,

130 
size_t
 
__n
), 
°≤˝y
);

132 
__exã∫_Æways_ölöe
 *

133 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

135 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

136 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

137  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

138  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

139 
	}
}

142 
__exã∫_Æways_ölöe
 *

143 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

145  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

146 
	}
}

149 
__exã∫_Æways_ölöe
 *

150 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

151 
size_t
 
__Àn
))

153  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

154 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
,\

447 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

448 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

449 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

450 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
, 0) \

451 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

452 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

455 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

456 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

458 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

459 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

460 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

461 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

466 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

467 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

469 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

470 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

471 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 #ifde‡
_IO_MTSAFE_IO


474 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

475 
	#_IO_Êockfûe
(
_Â
) \

476 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

477 
	#_IO_fu∆ockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

480 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

481 
	#_IO_Êockfûe
(
_Â
Ë

	)

482 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

483 
	#_IO_·rylockfûe
(
_Â
Ë

	)

484 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

485 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

488 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

489 
_IO_va_li°
, *
__ª°ri˘
);

490 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

491 
_IO_va_li°
);

492 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

493 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

495 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

496 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

498 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

500 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


501 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

502 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

503 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

504 #i‡
__GNUC__
 >= 2

507 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


508 
	~<shlib-com∑t.h
>

509 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

510 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

511 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

512 c⁄° 
_IO_°dö_u£d
;

513 
wók_exã∫
 (
_IO_°dö_u£d
);

516 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


517 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

521 
	#_IO_fwide
(
__Â
, 
__mode
) \

522 ({ 
__ªsu…
 = (
__mode
); \

523 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

525 i‡((
__Â
)->
_mode
 == 0) \

527 (
__Â
)->
_mode
 = -1; \

528 
__ªsu…
 = (
__Â
)->
_mode
; \

530 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

531 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

533 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

534 
__ªsu…
; })

	)

537 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

538 
_IO_va_li°
, *
__ª°ri˘
);

539 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

540 
_IO_va_li°
);

541 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

542 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

545 #ifde‡
__LDBL_COMPAT


546 
	~<bôs/libio-ldbl.h
>

549 #ifde‡
__˝lu•lus


	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

519 #ifde‡
__USE_GNU


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #ifde‡
__USE_GNU


551 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

553 
__END_NAMESPACE_STD


555 #ifde‡
__USE_ISOC99


556 
__BEGIN_NAMESPACE_C99


559 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

560 
__END_NAMESPACE_C99


564 
__BEGIN_NAMESPACE_STD


566 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

567 
__END_NAMESPACE_STD


571 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


604 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

614 #i‚de‡
__USE_FILE_OFFSET64


615 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__REDIRECT


618 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

619 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 
	#mk°emp
 
mk°emp64


	)

624 #ifde‡
__USE_LARGEFILE64


625 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

629 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


635 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

638 #ifde‡
__USE_GNU


645 #i‚de‡
__USE_FILE_OFFSET64


646 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 #ifde‡
__REDIRECT


649 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

650 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

652 
	#mko°emp
 
mko°emp64


	)

655 #ifde‡
__USE_LARGEFILE64


656 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

661 
__BEGIN_NAMESPACE_STD


666 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

667 
__END_NAMESPACE_STD


670 #ifdef 
__USE_GNU


673 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

674 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

677 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


683 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

684 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

689 #i‚de‡
__COMPAR_FN_T


690 
	#__COMPAR_FN_T


	)

691 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

693 #ifdef 
__USE_GNU


694 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

697 #ifde‡
__USE_GNU


698 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

701 
__BEGIN_NAMESPACE_STD


704 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

705 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

706 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

710 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

711 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

712 #ifde‡
__USE_GNU


713 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

714 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

715 
	`__n⁄nuŒ
 ((1, 4));

720 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

721 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

722 
__END_NAMESPACE_STD


724 #ifde‡
__USE_ISOC99


725 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

726 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

730 
__BEGIN_NAMESPACE_STD


734 
div_t
 
	$div
 (
__numî
, 
__díom
)

735 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

736 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

737 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

738 
__END_NAMESPACE_STD


740 #ifde‡
__USE_ISOC99


741 
__BEGIN_NAMESPACE_C99


742 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

743 
__díom
)

744 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

745 
__END_NAMESPACE_C99


749 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


756 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

757 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

762 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

763 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

768 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

769 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

772 #ifde‡
__USE_MISC


774 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

775 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

776 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

777 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

778 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

779 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

780 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

781 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

786 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

787 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

788 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

789 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

790 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

791 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

793 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

794 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

795 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

796 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

797 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

798 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

799 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

800 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

805 
__BEGIN_NAMESPACE_STD


808 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

811 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

812 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

815 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

819 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

820 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

822 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

823 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

824 
__THROW
;

825 
__END_NAMESPACE_STD


828 #ifde‡
__USE_SVID


833 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

837 #ifde‡
__USE_XOPEN_EXTENDED


844 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

845 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

846 **
__ª°ri˘
 
__vÆuï
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

851 #ifde‡
__USE_XOPEN


853 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_XOPEN2K


861 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

864 #ifde‡
__USE_XOPEN


869 
	$gø¡±
 (
__fd
Ë
__THROW
;

873 
	$u∆ock±
 (
__fd
Ë
__THROW
;

878 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

881 #ifde‡
__USE_GNU


885 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

886 
__THROW
 
	`__n⁄nuŒ
 ((2));

889 
	`gë±
 ();

892 #ifde‡
__USE_BSD


896 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


903 
	~<bôs/°dlib.h
>

905 #ifde‡
__LDBL_COMPAT


906 
	~<bôs/°dlib-ldbl.h
>

910 #unde‡
__√ed_mÆloc_™d_ˇŒoc


912 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

41 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


42 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


43 
±hªad_muãx_t
 
	t__libc_lock_t
;

44 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

46 
	t__libc_lock_t
;

47 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

49 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

50 #ifde‡
__USE_UNIX98


51 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

53 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

56 
__libc_lock_›aque__
 
	t__libc_lock_t
;

57 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

58 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

62 
±hªad_key_t
 
	t__libc_key_t
;

71 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

73 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

75 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

77 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

89 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

90 #i‡
LLL_LOCK_INITIALIZER
 == 0

91 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

92 
CLASS
 
__libc_lock_t
 
NAME
;

	)

94 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

95 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

98 #i‡
__LT_SPINLOCK_INIT
 == 0

99 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

100 
CLASS
 
__libc_lock_t
 
NAME
;

	)

102 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

103 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

107 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

108 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

112 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

113 #i‡
LLL_LOCK_INITIALIZER
 == 0

114 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

115 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

117 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

118 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

120 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

121 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

123 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

124 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

125 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

126 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

129 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

130 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

131 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

132 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

134 
	#__πld_lock_öôülize
(
NAME
) \

135 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

142 #ifde‡
__PIC__


143 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

144 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

145 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

147 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

148 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

152 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


153 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

154 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

155 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

156 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

157 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

159 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

160 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

161 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

162 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

163 
FUNC
 
ARGS


	)

169 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

170 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

172 
	#__libc_lock_öô
(
NAME
) \

173 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

175 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


178 
	#__libc_rwlock_öô
(
NAME
) \

179 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

181 
	#__libc_rwlock_öô
(
NAME
) \

182 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

186 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

187 
	#__libc_lock_öô_ªcursive
(
NAME
) \

188 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

190 
	#__libc_lock_öô_ªcursive
(
NAME
) \

192 i‡(
__±hªad_muãx_öô
 !
NULL
) \

194 
±hªad_muãx©å_t
 
__©å
; \

195 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

196 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

197 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

198 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

200 } 0)

	)

203 
	#__πld_lock_öô_ªcursive
(
NAME
) \

205 i‡(
__±hªad_muãx_öô
 !
NULL
) \

207 
±hªad_muãx©å_t
 
__©å
; \

208 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

209 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

210 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

211 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

213 } 0)

	)

218 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

219 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

221 
	#__libc_lock_föi
(
NAME
) \

222 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

224 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


225 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

227 
	#__libc_rwlock_föi
(
NAME
) \

228 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

232 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

233 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

235 
	#__libc_lock_föi_ªcursive
(
NAME
) \

236 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

240 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

241 
	#__libc_lock_lock
(
NAME
) \

242 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

244 
	#__libc_lock_lock
(
NAME
) \

245 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

247 
	#__libc_rwlock_rdlock
(
NAME
) \

248 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

249 
	#__libc_rwlock_wæock
(
NAME
) \

250 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

253 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

254 
	#__libc_lock_lock_ªcursive
(
NAME
) \

256 *
£lf
 = 
THREAD_SELF
; \

257 i‡((
NAME
).
ow√r
 !
£lf
) \

259 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

260 (
NAME
).
ow√r
 = 
£lf
; \

262 ++(
NAME
).
˙t
; \

263 } 0)

	)

265 
	#__libc_lock_lock_ªcursive
(
NAME
) \

266 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

270 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

271 
	#__libc_lock_åylock
(
NAME
) \

272 
	`Œl_åylock
 (
NAME
)

	)

274 
	#__libc_lock_åylock
(
NAME
) \

275 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

277 
	#__libc_rwlock_åyrdlock
(
NAME
) \

278 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

279 
	#__libc_rwlock_åywæock
(
NAME
) \

280 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

283 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

284 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

286 
ªsu…
 = 0; \

287 *
£lf
 = 
THREAD_SELF
; \

288 i‡((
NAME
).
ow√r
 !
£lf
) \

290 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

292 (
NAME
).
ow√r
 = 
£lf
; \

293 (
NAME
).
˙t
 = 1; \

296 
ªsu…
 = 
EBUSY
; \

299 ++(
NAME
).
˙t
; \

300 
ªsu…
; \

301 })

	)

303 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

304 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

307 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

308 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

311 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

312 
	#__libc_lock_u∆ock
(
NAME
) \

313 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

315 
	#__libc_lock_u∆ock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

318 
	#__libc_rwlock_u∆ock
(
NAME
) \

319 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

322 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

324 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

326 i‡(--(
NAME
).
˙t
 == 0) \

328 (
NAME
).
ow√r
 = 
NULL
; \

329 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

331 } 0)

	)

333 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

334 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

337 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


338 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

339 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

341 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

342 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

344 
	#__πld_lock_lock_ªcursive
(
NAME
) \

345 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

347 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

348 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

350 
	#__πld_lock_lock_ªcursive
(
NAME
) \

351 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

353 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

358 #i‡
PTHREAD_ONCE_INIT
 == 0

361 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

362 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

364 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

365 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

369 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

371 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

372 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

373 
INIT_FUNCTION
)); \

374 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

375 
	`INIT_FUNCTION
 (); \

376 (
ONCE_CONTROL
) |= 2; \

378 } 0)

	)

385 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

386 (*
routöe
Ë(*), *
¨g
);

387 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

388 
execuã
);

389 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

390 (*
routöe
Ë(*), *
¨g
);

391 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

392 
execuã
);

395 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

396 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

397 
_avaû
; \

398 i‡(
DOIT
) { \

399 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

400 i‡(
_avaû
) { \

401 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

402 
ARG
)); \

404 
_buf„r
.
__routöe
 = (
FCT
); \

405 
_buf„r
.
__¨g
 = (
ARG
); \

408 
_avaû
 = 0; \

409 }

	)

412 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

413 i‡(
_avaû
) { \

414 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

415 } i‡(
DOIT
) \

416 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

417 
	}

	)
}

420 
	#__libc_˛ónup_íd
(
DOIT
) \

421 i‡(
_avaû
) { \

422 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

423 } i‡(
DOIT
) \

424 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

428 
__exã∫_ölöe
 

429 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

431 i‡(
f
->
__do_ô
)

432 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

433 
	}
}

435 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

437 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

438 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

439 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

440 .
__do_ô
 = 1 };

	)

442 
	#__libc_˛ónup_p›
(
execuã
) \

443 
__˛‰ame
.
__do_ô
 = (
execuã
); \

444 } 0)

	)

448 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

449 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

452 
	#__libc_gë•ecific
(
KEY
) \

453 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

456 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

457 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

463 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

464 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

465 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

466 (*
__∑ª¡
) (),

467 (*
__chûd
) (),

468 *
__dso_h™dÀ
);

473 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

474 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

476 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

478 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

480 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

482 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

484 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

486 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

488 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

489 
__köd
);

491 #ifde‡
__USE_UNIX98


492 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

493 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

495 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

497 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

499 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

501 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

503 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

505 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

508 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

509 (*
__de°r_fun˘i⁄
) (*));

511 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

512 
__c⁄°
 *
__poöãr
);

514 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

516 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

517 (*
__öô_routöe
) ());

519 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

520 (*
__∑ª¡
) (),

521 (*
__chûd
) ());

527 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


528 #ifde‡
wók_exã∫


529 #i‡
_LIBC


530 
	~<bp-sym.h
>

532 
	#BP_SYM
 (
sym
Ë
	)
sym

534 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

535 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

536 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

537 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

538 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

539 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

540 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

541 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

542 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

543 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

544 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

545 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

546 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

547 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

548 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

549 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

550 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

551 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

552 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

553 
	$wók_exã∫
 (
__±hªad_öôülize
)

554 
	$wók_exã∫
 (
__±hªad_©f‹k
)

555 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

556 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

557 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

559 #¥agm®
wók
 
__±hªad_muãx_öô


560 #¥agm®
wók
 
__±hªad_muãx_de°roy


561 #¥agm®
wók
 
__±hªad_muãx_lock


562 #¥agm®
wók
 
__±hªad_muãx_åylock


563 #¥agm®
wók
 
__±hªad_muãx_u∆ock


564 #¥agm®
wók
 
__±hªad_muãx©å_öô


565 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


566 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


567 #¥agm®
wók
 
__±hªad_rwlock_de°roy


568 #¥agm®
wók
 
__±hªad_rwlock_rdlock


569 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


570 #¥agm®
wók
 
__±hªad_rwlock_wæock


571 #¥agm®
wók
 
__±hªad_rwlock_åywæock


572 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


573 #¥agm®
wók
 
__±hªad_key_¸óã


574 #¥agm®
wók
 
__±hªad_£t•ecific


575 #¥agm®
wók
 
__±hªad_gë•ecific


576 #¥agm®
wók
 
__±hªad_⁄˚


577 #¥agm®
wók
 
__±hªad_öôülize


578 #¥agm®
wók
 
__±hªad_©f‹k


579 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


580 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


581 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

55 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

56 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

61 #i‚de‡
_WINT_T


66 
	#_WINT_T


	)

67 
	twöt_t
;

71 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

72 && 
deföed
 
__WINT_TYPE__


73 
__BEGIN_NAMESPACE_STD


74 
__WINT_TYPE__
 
	twöt_t
;

75 
	g__END_NAMESPACE_STD


80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_XOPEN2K


70 
	mPTHREAD_MUTEX_STALLED
,

71 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_ROBUST
,

73 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


78 #ifde‡
__USE_UNIX98


82 
	mPTHREAD_PRIO_NONE
,

83 
	mPTHREAD_PRIO_INHERIT
,

84 
	mPTHREAD_PRIO_PROTECT


90 #i‡
__WORDSIZE
 == 64

91 
	#PTHREAD_MUTEX_INITIALIZER
 \

92 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

93 #ifde‡
__USE_GNU


94 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

102 
	#PTHREAD_MUTEX_INITIALIZER
 \

103 { { 0, 0, 0, 0, 0, { 0 } } }

	)

104 #ifde‡
__USE_GNU


105 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

109 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

110 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

116 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


119 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

121 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

122 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 
	#PTHREAD_RWLOCK_INITIALIZER
 \

127 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

128 #ifde‡
__USE_GNU


129 #i‡
__WORDSIZE
 == 64

130 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

132 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

134 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

136 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

137 0, 0, 0, 0 } }

	)

139 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

141 0 } }

	)

151 
	mPTHREAD_INHERIT_SCHED
,

152 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

153 
	mPTHREAD_EXPLICIT_SCHED


154 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

161 
	mPTHREAD_SCOPE_SYSTEM
,

162 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

163 
	mPTHREAD_SCOPE_PROCESS


164 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

171 
	mPTHREAD_PROCESS_PRIVATE
,

172 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

173 
	mPTHREAD_PROCESS_SHARED


174 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

180 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

184 
	s_±hªad_˛ónup_buf„r


186 (*
	m__routöe
) (*);

187 *
	m__¨g
;

188 
	m__ˇn˚…y≥
;

189 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

195 
	mPTHREAD_CANCEL_ENABLE
,

196 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

197 
	mPTHREAD_CANCEL_DISABLE


198 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

202 
	mPTHREAD_CANCEL_DEFERRED
,

203 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

204 
	mPTHREAD_CANCEL_ASYNCHRONOUS


205 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

207 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

211 
	#PTHREAD_ONCE_INIT
 0

	)

214 #ifde‡
__USE_XOPEN2K


218 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

222 
__BEGIN_DECLS


227 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

228 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

229 *(*
__°¨t_routöe
) (*),

230 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

236 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

244 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

246 #ifde‡
__USE_GNU


249 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

257 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

258 
__c⁄°
 
time•ec
 *
__ab°ime
);

265 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

269 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

272 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

280 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

288 *
__dëach°©e
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

292 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

293 
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

299 
size_t
 *
__gu¨dsize
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

303 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

304 
size_t
 
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1));

309 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


310 
__©å
,

311 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

315 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


317 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


321 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1));

329 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


330 
__©å
, *
__ª°ri˘
 
__öhîô
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

334 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

335 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

341 *
__ª°ri˘
 
__sc›e
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

345 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


350 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

357 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

358 *
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


363 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

370 
size_t
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1));

373 #ifde‡
__USE_XOPEN2K


375 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

376 **
__ª°ri˘
 
__°ackaddr
,

377 
size_t
 *
__ª°ri˘
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

383 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

384 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

387 #ifde‡
__USE_GNU


390 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

391 
size_t
 
__˝u£tsize
,

392 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

397 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

406 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

407 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

416 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

417 
__THROW
 
	`__n⁄nuŒ
 ((3));

420 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

421 *
__ª°ri˘
 
__pﬁicy
,

422 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

423 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

426 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

427 
__THROW
;

430 #ifde‡
__USE_UNIX98


432 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

435 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

438 #ifde‡
__USE_GNU


443 
	$±hªad_yõld
 (Ë
__THROW
;

448 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

449 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

450 
__THROW
 
	`__n⁄nuŒ
 ((3));

453 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

454 
˝u_£t_t
 *
__˝u£t
)

455 
__THROW
 
	`__n⁄nuŒ
 ((3));

468 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

469 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

480 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

484 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

487 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

492 
	`±hªad_ã°ˇn˚l
 ();

501 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

502 
__mask_was_ßved
;

503 } 
__ˇn˚l_jmp_buf
[1];

504 *
__∑d
[4];

505 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

508 #i‚de‡
__˛ónup_f˘_©åibuã


509 
	#__˛ónup_f˘_©åibuã


	)

514 
	s__±hªad_˛ónup_‰ame


516 (*
__ˇn˚l_routöe
) (*);

517 *
__ˇn˚l_¨g
;

518 
__do_ô
;

519 
__ˇn˚l_ty≥
;

522 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


523 #ifde‡
__˝lu•lus


525 ˛as†
	c__±hªad_˛ónup_˛ass


527 (*
__ˇn˚l_routöe
) (*);

528 *
__ˇn˚l_¨g
;

529 
__do_ô
;

530 
__ˇn˚l_ty≥
;

532 
public
:

533 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

534 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

535 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

536 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

537 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

538 &
__ˇn˚l_ty≥
); 
	}
}

539 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

549 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

551 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

555 
	#±hªad_˛ónup_p›
(
execuã
) \

556 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

557 } 0)

	)

559 #ifde‡
__USE_GNU


563 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

565 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

566 
__˛‰ame
.
	`__de„r
 ()

	)

571 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

572 
__˛‰ame
.
	`__ª°‹e
 (); \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

581 
__exã∫_ölöe
 

582 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

584 i‡(
__‰ame
->
__do_ô
)

585 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

586 
	}
}

595 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

597 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

598 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

599 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

600 .
__do_ô
 = 1 };

	)

604 
	#±hªad_˛ónup_p›
(
execuã
) \

605 
__˛‰ame
.
__do_ô
 = (
execuã
); \

606 } 0)

	)

608 #ifde‡
__USE_GNU


612 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 }; \

618 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

619 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

624 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

625 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

626 
__˛‰ame
.
__do_ô
 = (
execuã
); \

627 } 0)

	)

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

641 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

642 *
__ˇn˚l_¨g
 = (
¨g
); \

643 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

644 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

645 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

647 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

648 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

652 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

653 dÿ{

	)

654 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

655 
__˛ónup_f˘_©åibuã
;

659 
	#±hªad_˛ónup_p›
(
execuã
) \

662 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 i‡(
execuã
) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 } 0)

	)

666 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

667 
__˛ónup_f˘_©åibuã
;

669 #ifde‡
__USE_GNU


673 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

675 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

676 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

677 *
__ˇn˚l_¨g
 = (
¨g
); \

678 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

679 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

680 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

682 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

683 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

687 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

688 dÿ{

	)

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

690 
__˛ónup_f˘_©åibuã
;

695 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

698 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

699 i‡(
execuã
) \

700 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

701 
	}
} 0)

	)

702 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

703 
__˛ónup_f˘_©åibuã
;

707 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

708 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

709 #i‚de‡
SHARED


710 
	`__©åibuã__
 ((
__wók__
))

716 
__jmp_buf_èg
;

717 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

723 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

724 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1));

728 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1));

732 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

733 
__THROW
 
	`__n⁄nuŒ
 ((1));

736 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

737 
__THROW
 
	`__n⁄nuŒ
 ((1));

739 #ifde‡
__USE_XOPEN2K


741 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

742 
__c⁄°
 
time•ec
 *
__ª°ri˘


743 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

747 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

748 
__THROW
 
	`__n⁄nuŒ
 ((1));

751 #ifde‡
__USE_UNIX98


753 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

754 
__ª°ri˘
 
__muãx
,

755 *
__ª°ri˘
 
__¥io˚ûög
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

760 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

761 
__¥io˚ûög
,

762 *
__ª°ri˘
 
__ﬁd_˚ûög
)

763 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

767 #ifde‡
__USE_XOPEN2K8


769 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1));

771 #ifde‡
__USE_GNU


772 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

773 
__THROW
 
	`__n⁄nuŒ
 ((1));

782 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

791 
__ª°ri˘
 
__©å
,

792 *
__ª°ri˘
 
__psh¨ed
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

797 
__psh¨ed
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

800 #ifde‡
__USE_UNIX98


802 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


803 
__©å
, *
__ª°ri˘
 
__köd
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

809 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

813 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

814 
__ª°ri˘
 
__©å
,

815 *
__ª°ri˘
 
__¥Ÿocﬁ
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__¥Ÿocﬁ
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__¥io˚ûög
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__¥io˚ûög
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

836 #ifde‡
__USE_XOPEN2K


838 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

839 *
__robu°√ss
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

841 #ifde‡
__USE_GNU


842 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

843 *
__robu°√ss
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

849 
__robu°√ss
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_GNU


852 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

853 
__robu°√ss
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


864 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

865 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


866 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 #ifde‡
__USE_XOPEN2K


882 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

883 
__c⁄°
 
time•ec
 *
__ª°ri˘


884 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 
__c⁄°
 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROW
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

911 
__THROW
 
	`__n⁄nuŒ
 ((1));

914 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__psh¨ed
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

925 
__psh¨ed
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

930 
__ª°ri˘
 
__©å
,

931 *
__ª°ri˘
 
__¥ef
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

935 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

936 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

945 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


946 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

954 
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

967 
	`__n⁄nuŒ
 ((1, 2));

976 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

977 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

978 
__c⁄°
 
time•ec
 *
__ª°ri˘


979 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

984 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

989 
__THROW
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

993 
__ª°ri˘
 
__©å
,

994 *
__ª°ri˘
 
__psh¨ed
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

998 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

999 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1001 #ifde‡
__USE_XOPEN2K


1003 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1004 
__ª°ri˘
 
__©å
,

1005 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1009 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1010 
__˛ockid_t
 
__˛ock_id
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1015 #ifde‡
__USE_XOPEN2K


1020 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1045 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1046 
__©å
, 
__cou¡
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1064 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1068 
__ª°ri˘
 
__©å
,

1069 *
__ª°ri˘
 
__psh¨ed
)

1070 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1073 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1074 
__psh¨ed
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1088 (*
__de°r_fun˘i⁄
) (*))

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1095 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1098 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1099 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1102 #ifde‡
__USE_XOPEN2K


1104 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1105 
__˛ockid_t
 *
__˛ock_id
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((2));

1121 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1122 (*
__∑ª¡
) (),

1123 (*
__chûd
Ë()Ë
__THROW
;

1126 #ifde‡
__USE_EXTERN_INLINES


1128 
__exã∫_ölöe
 

1129 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1131  
__thªad1
 =
__thªad2
;

1132 
	}
}

1135 
	g__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<°ddef.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #ifde‡
__USE_XOPEN


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_∑øm


73 
	m__sched_¥i‹ôy
;

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_MISC


80 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
__END_DECLS


94 #i‡!
deföed
 
__deföed_sched∑øm
 \

95 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

96 
	#__deföed_sched∑øm
 1

	)

98 
	s__sched_∑øm


100 
__sched_¥i‹ôy
;

102 #unde‡
__√ed_sched∑øm


106 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


107 
	#__˝u_£t_t_deföed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

113 
	t__˝u_mask
;

116 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

122 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	t˝u_£t_t
;

126 #i‡
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

128 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

134 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

135 
__i
 = 0; __ò< 
__imax
; ++__i) \

136 
__bôs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

144 |
	`__CPUMASK
 (
__˝u
)) \

145 : 0; }))

	)

146 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 &~
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? ((((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

159 : 0; }))

	)

161 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

162 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

164 #i‡
__GNUC_PREREQ
 (2, 91)

165 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

166 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
__exãnsi⁄__
 \

170 ({ 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

171 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

172 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

173 
size_t
 
__i
; \

174 
__i
 = 0; __ò< 
__imax
; ++__i) \

175 i‡(
__bôs
[
__i
] != __bits[__i]) \

177 
__i
 =
__imax
; }))

	)

180 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

181 (
__exãnsi⁄__
 \

182 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

183 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

184 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

185 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

186 
size_t
 
__i
; \

187 
__i
 = 0; __ò< 
__imax
; ++__i) \

188 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

189 
__de°
; }))

	)

191 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

192 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

193 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

194 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

196 
__BEGIN_DECLS


198 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

199 
__THROW
;

200 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

201 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@
1
.
1
/usr/include
132
2922
S3C2440.H
cbuff/c_buff.c
cbuff/c_buff.h
chain/chain.c
chain/chain.h
cmd/cmd.c
cmd/cmd.h
cmd/cmd_common.c
cmd/cmd_common.h
comm/comm.c
comm/comm.h
comm/config.h
comm/msg.h
comm/sys.c
comm/sys.h
cpu/irq.c
cpu/irq.h
dev_manage/dev_manage.c
dev_manage/dev_manage.h
dev_manage/dev_manage_api.c
dev_manage/dev_manage_api.h
include_lib/my_malloc.h
include_lib/string.h
include_lib/vsprintf.h
lib/malloc.c
lib/stdlib.c
lib/stdlib.h
lib/string.c
lib/string.h
lib/vsprintf.c
main.c
msg/q_msg.c
msg/q_msg.h
sddrv/s3c2440_sdio.c
sddrv/s3c2440_sdio.h
sddrv/sd_dev_api.c
sddrv/sd_dev_api.h
sddrv/sd_drv.c
sddrv/sd_drv.h
task_manage/task_manage.c
task_manage/task_manage.h
uart/printf.c
uart/printf.h
uart/s3c2440_printf.h
uart/s3c2440_uart.c
uart/s3c2440_uart.h
usb/SCSI.c
usb/SCSI.h
usb/hid/hid.c
usb/hid/hid.h
usb/hid_device_api.c
usb/hid_device_api.h
usb/usb_dev_control.c
usb/usb_dev_control.h
usb/usb_dev_enum.c
usb/usb_dev_enum.h
usb/usb_drv.c
usb/usb_drv.h
usb/usb_hid_device.c
usb/usb_hid_device.h
usb/usb_task.c
/usr/include/alloca.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/features.h
/usr/include/linux/string.h
/usr/include/linux/types.h
/usr/include/malloc.h
/usr/include/sys/types.h
/usr/include/xlocale.h
/usr/include/asm/types.h
/usr/include/bits/predefs.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/linux/posix_types.h
/usr/include/stdio.h
/usr/include/string.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/posix_types.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/getopt.h
/usr/include/gnu/stubs-32.h
/usr/include/libio.h
/usr/include/linux/stddef.h
/usr/include/_G_config.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/stdio-lock.h
/usr/include/ctype.h
/usr/include/stdlib.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/bits/libc-lock.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/bits/sched.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/sys/ucontext.h
